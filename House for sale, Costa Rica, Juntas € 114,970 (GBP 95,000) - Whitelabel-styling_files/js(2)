/*
* Kendo UI v2014.1.416 (http://www.telerik.com/kendo-ui)
* Copyright 2014 Telerik AD. All rights reserved.
*
* Kendo UI commercial licenses may be obtained at
* http://www.telerik.com/purchase/license-agreement/kendo-ui-complete
* If you do not own a commercial license, this file shall be governed by the trial license terms.
*/
(function(f, define){
    define([], f);
})(function(){

/*jshint eqnull: true, loopfunc: true, evil: true, boss: true, freeze: false*/
	(function ($, undefined) {
		var kendo = window.kendo = window.kendo || { cultures: {} },
			extend = $.extend,
			each = $.each,
			isArray = $.isArray,
			proxy = $.proxy,
			noop = $.noop,
			math = Math,
			Template,
			JSON = window.JSON || {},
			support = {},
			percentRegExp = /%/,
			formatRegExp = /\{(\d+)(:[^\}]+)?\}/g,
			boxShadowRegExp = /(\d+(?:\.?)\d*)px\s*(\d+(?:\.?)\d*)px\s*(\d+(?:\.?)\d*)px\s*(\d+)?/i,
			numberRegExp = /^(\+|-?)\d+(\.?)\d*$/,
			FUNCTION = "function",
			STRING = "string",
			NUMBER = "number",
			OBJECT = "object",
			NULL = "null",
			BOOLEAN = "boolean",
			UNDEFINED = "undefined",
			getterCache = {},
			setterCache = {},
			slice = [].slice,
			globalize = window.Globalize;

		kendo.version = "2014.1.416";

		function Class() { }

		Class.extend = function (proto) {
			var base = function () { },
				member,
				that = this,
				subclass = proto && proto.init ? proto.init : function () {
					that.apply(this, arguments);
				},
				fn;

			base.prototype = that.prototype;
			fn = subclass.fn = subclass.prototype = new base();

			for (member in proto) {
				if (proto[member] != null && proto[member].constructor === Object) {
					// Merge object members
					fn[member] = extend(true, {}, base.prototype[member], proto[member]);
				} else {
					fn[member] = proto[member];
				}
			}

			fn.constructor = subclass;
			subclass.extend = that.extend;

			return subclass;
		};

		Class.prototype._initOptions = function (options) {
			this.options = deepExtend({}, this.options, options);
		};

		var isFunction = kendo.isFunction = function (fn) {
			return typeof fn === "function";
		};

		var preventDefault = function () {
			this._defaultPrevented = true;
		};

		var isDefaultPrevented = function () {
			return this._defaultPrevented === true;
		};

		var Observable = Class.extend({
			init: function () {
				this._events = {};
			},

			bind: function (eventName, handlers, one) {
				var that = this,
					idx,
					eventNames = typeof eventName === STRING ? [eventName] : eventName,
					length,
					original,
					handler,
					handlersIsFunction = typeof handlers === FUNCTION,
					events;

				if (handlers === undefined) {
					for (idx in eventName) {
						that.bind(idx, eventName[idx]);
					}
					return that;
				}

				for (idx = 0, length = eventNames.length; idx < length; idx++) {
					eventName = eventNames[idx];

					handler = handlersIsFunction ? handlers : handlers[eventName];

					if (handler) {
						if (one) {
							original = handler;
							handler = function () {
								that.unbind(eventName, handler);
								original.apply(that, arguments);
							};
							handler.original = original;
						}
						events = that._events[eventName] = that._events[eventName] || [];
						events.push(handler);
					}
				}

				return that;
			},

			one: function (eventNames, handlers) {
				return this.bind(eventNames, handlers, true);
			},

			first: function (eventName, handlers) {
				var that = this,
					idx,
					eventNames = typeof eventName === STRING ? [eventName] : eventName,
					length,
					handler,
					handlersIsFunction = typeof handlers === FUNCTION,
					events;

				for (idx = 0, length = eventNames.length; idx < length; idx++) {
					eventName = eventNames[idx];

					handler = handlersIsFunction ? handlers : handlers[eventName];

					if (handler) {
						events = that._events[eventName] = that._events[eventName] || [];
						events.unshift(handler);
					}
				}

				return that;
			},

			trigger: function (eventName, e) {
				var that = this,
					events = that._events[eventName],
					idx,
					length;

				if (events) {
					e = e || {};

					e.sender = that;

					e._defaultPrevented = false;

					e.preventDefault = preventDefault;

					e.isDefaultPrevented = isDefaultPrevented;

					events = events.slice();

					for (idx = 0, length = events.length; idx < length; idx++) {
						events[idx].call(that, e);
					}

					return e._defaultPrevented === true;
				}

				return false;
			},

			unbind: function (eventName, handler) {
				var that = this,
					events = that._events[eventName],
					idx;

				if (eventName === undefined) {
					that._events = {};
				} else if (events) {
					if (handler) {
						for (idx = events.length - 1; idx >= 0; idx--) {
							if (events[idx] === handler || events[idx].original === handler) {
								events.splice(idx, 1);
							}
						}
					} else {
						that._events[eventName] = [];
					}
				}

				return that;
			}
		});


		function compilePart(part, stringPart) {
			if (stringPart) {
				return "'" +
					part.split("'").join("\\'")
						.split('\\"').join('\\\\\\"')
						.replace(/\n/g, "\\n")
						.replace(/\r/g, "\\r")
						.replace(/\t/g, "\\t") + "'";
			} else {
				var first = part.charAt(0),
					rest = part.substring(1);

				if (first === "=") {
					return "+(" + rest + ")+";
				} else if (first === ":") {
					return "+e(" + rest + ")+";
				} else {
					return ";" + part + ";o+=";
				}
			}
		}

		var argumentNameRegExp = /^\w+/,
			encodeRegExp = /\$\{([^}]*)\}/g,
			escapedCurlyRegExp = /\\\}/g,
			curlyRegExp = /__CURLY__/g,
			escapedSharpRegExp = /\\#/g,
			sharpRegExp = /__SHARP__/g,
			zeros = ["", "0", "00", "000", "0000"];

		Template = {
			paramName: "data", // name of the parameter of the generated template
			useWithBlock: true, // whether to wrap the template in a with() block
			render: function (template, data) {
				var idx,
					length,
					html = "";

				for (idx = 0, length = data.length; idx < length; idx++) {
					html += template(data[idx]);
				}

				return html;
			},
			compile: function (template, options) {
				var settings = extend({}, this, options),
					paramName = settings.paramName,
					argumentName = paramName.match(argumentNameRegExp)[0],
					useWithBlock = settings.useWithBlock,
					functionBody = "var o,e=kendo.htmlEncode;",
					fn,
					parts,
					idx;

				if (isFunction(template)) {
					if (template.length === 2) {
						//looks like jQuery.template
						return function (d) {
							return template($, { data: d }).join("");
						};
					}
					return template;
				}

				functionBody += useWithBlock ? "with(" + paramName + "){" : "";

				functionBody += "o=";

				parts = template
					.replace(escapedCurlyRegExp, "__CURLY__")
					.replace(encodeRegExp, "#=e($1)#")
					.replace(curlyRegExp, "}")
					.replace(escapedSharpRegExp, "__SHARP__")
					.split("#");

				for (idx = 0; idx < parts.length; idx++) {
					functionBody += compilePart(parts[idx], idx % 2 === 0);
				}

				functionBody += useWithBlock ? ";}" : ";";

				functionBody += "return o;";

				functionBody = functionBody.replace(sharpRegExp, "#");

				try {
					fn = new Function(argumentName, functionBody);
					fn._slotCount = Math.floor(parts.length / 2);
					return fn;
				} catch (e) {
					throw new Error(kendo.format("Invalid template:'{0}' Generated code:'{1}'", template, functionBody));
				}
			}
		};

		function pad(number, digits, end) {
			number = number + "";
			digits = digits || 2;
			end = digits - number.length;

			if (end) {
				return zeros[digits].substring(0, end) + number;
			}

			return number;
		}

		//JSON stringify
		(function () {
			var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
				gap,
				indent,
				meta = {
					"\b": "\\b",
					"\t": "\\t",
					"\n": "\\n",
					"\f": "\\f",
					"\r": "\\r",
					"\"": '\\"',
					"\\": "\\\\"
				},
				rep,
				toString = {}.toString;


			if (typeof Date.prototype.toJSON !== FUNCTION) {

				Date.prototype.toJSON = function () {
					var that = this;

					return isFinite(that.valueOf()) ?
						pad(that.getUTCFullYear(), 4) + "-" +
						pad(that.getUTCMonth() + 1) + "-" +
						pad(that.getUTCDate()) + "T" +
						pad(that.getUTCHours()) + ":" +
						pad(that.getUTCMinutes()) + ":" +
						pad(that.getUTCSeconds()) + "Z" : null;
				};

				String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () {
					return this.valueOf();
				};
			}

			function quote(string) {
				escapable.lastIndex = 0;
				return escapable.test(string) ? "\"" + string.replace(escapable, function (a) {
					var c = meta[a];
					return typeof c === STRING ? c :
						"\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
				}) + "\"" : "\"" + string + "\"";
			}

			function str(key, holder) {
				var i,
					k,
					v,
					length,
					mind = gap,
					partial,
					value = holder[key],
					type;

				if (value && typeof value === OBJECT && typeof value.toJSON === FUNCTION) {
					value = value.toJSON(key);
				}

				if (typeof rep === FUNCTION) {
					value = rep.call(holder, key, value);
				}

				type = typeof value;
				if (type === STRING) {
					return quote(value);
				} else if (type === NUMBER) {
					return isFinite(value) ? String(value) : NULL;
				} else if (type === BOOLEAN || type === NULL) {
					return String(value);
				} else if (type === OBJECT) {
					if (!value) {
						return NULL;
					}
					gap += indent;
					partial = [];
					if (toString.apply(value) === "[object Array]") {
						length = value.length;
						for (i = 0; i < length; i++) {
							partial[i] = str(i, value) || NULL;
						}
						v = partial.length === 0 ? "[]" : gap ?
							"[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" :
							"[" + partial.join(",") + "]";
						gap = mind;
						return v;
					}
					if (rep && typeof rep === OBJECT) {
						length = rep.length;
						for (i = 0; i < length; i++) {
							if (typeof rep[i] === STRING) {
								k = rep[i];
								v = str(k, value);
								if (v) {
									partial.push(quote(k) + (gap ? ": " : ":") + v);
								}
							}
						}
					} else {
						for (k in value) {
							if (Object.hasOwnProperty.call(value, k)) {
								v = str(k, value);
								if (v) {
									partial.push(quote(k) + (gap ? ": " : ":") + v);
								}
							}
						}
					}

					v = partial.length === 0 ? "{}" : gap ?
						"{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" :
						"{" + partial.join(",") + "}";
					gap = mind;
					return v;
				}
			}

			if (typeof JSON.stringify !== FUNCTION) {
				JSON.stringify = function (value, replacer, space) {
					var i;
					gap = "";
					indent = "";

					if (typeof space === NUMBER) {
						for (i = 0; i < space; i += 1) {
							indent += " ";
						}

					} else if (typeof space === STRING) {
						indent = space;
					}

					rep = replacer;
					if (replacer && typeof replacer !== FUNCTION && (typeof replacer !== OBJECT || typeof replacer.length !== NUMBER)) {
						throw new Error("JSON.stringify");
					}

					return str("", { "": value });
				};
			}
		})();

		// Date and Number formatting
		(function () {
			var dateFormatRegExp = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|"[^"]*"|'[^']*'/g,
				standardFormatRegExp = /^(n|c|p|e)(\d*)$/i,
				literalRegExp = /(\\.)|(['][^']*[']?)|(["][^"]*["]?)/g,
				commaRegExp = /\,/g,
				EMPTY = "",
				POINT = ".",
				COMMA = ",",
				SHARP = "#",
				ZERO = "0",
				PLACEHOLDER = "??",
				EN = "en-US",
				objectToString = {}.toString;

			//cultures
			kendo.cultures["en-US"] = {
				name: EN,
				numberFormat: {
					pattern: ["-n"],
					decimals: 2,
					",": ",",
					".": ".",
					groupSize: [3],
					percent: {
						pattern: ["-n %", "n %"],
						decimals: 2,
						",": ",",
						".": ".",
						groupSize: [3],
						symbol: "%"
					},
					currency: {
						pattern: ["($n)", "$n"],
						decimals: 2,
						",": ",",
						".": ".",
						groupSize: [3],
						symbol: "$"
					}
				},
				calendars: {
					standard: {
						days: {
							names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
							namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
							namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
						},
						months: {
							names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
							namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
						},
						AM: ["AM", "am", "AM"],
						PM: ["PM", "pm", "PM"],
						patterns: {
							d: "M/d/yyyy",
							D: "dddd, MMMM dd, yyyy",
							F: "dddd, MMMM dd, yyyy h:mm:ss tt",
							g: "M/d/yyyy h:mm tt",
							G: "M/d/yyyy h:mm:ss tt",
							m: "MMMM dd",
							M: "MMMM dd",
							s: "yyyy'-'MM'-'ddTHH':'mm':'ss",
							t: "h:mm tt",
							T: "h:mm:ss tt",
							u: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
							y: "MMMM, yyyy",
							Y: "MMMM, yyyy"
						},
						"/": "/",
						":": ":",
						firstDay: 0,
						twoDigitYearMax: 2029
					}
				}
			};


			function findCulture(culture) {
				if (culture) {
					if (culture.numberFormat) {
						return culture;
					}

					if (typeof culture === STRING) {
						var cultures = kendo.cultures;
						return cultures[culture] || cultures[culture.split("-")[0]] || null;
					}

					return null;
				}

				return null;
			}

			function getCulture(culture) {
				if (culture) {
					culture = findCulture(culture);
				}

				return culture || kendo.cultures.current;
			}

			function expandNumberFormat(numberFormat) {
				numberFormat.groupSizes = numberFormat.groupSize;
				numberFormat.percent.groupSizes = numberFormat.percent.groupSize;
				numberFormat.currency.groupSizes = numberFormat.currency.groupSize;
			}

			kendo.culture = function (cultureName) {
				var cultures = kendo.cultures, culture;

				if (cultureName !== undefined) {
					culture = findCulture(cultureName) || cultures[EN];
					culture.calendar = culture.calendars.standard;
					cultures.current = culture;

					if (globalize) {
						expandNumberFormat(culture.numberFormat);
					}

				} else {
					return cultures.current;
				}
			};

			kendo.findCulture = findCulture;
			kendo.getCulture = getCulture;

			//set current culture to en-US.
			kendo.culture(EN);

			function formatDate(date, format, culture) {
				culture = getCulture(culture);

				var calendar = culture.calendars.standard,
					days = calendar.days,
					months = calendar.months;

				format = calendar.patterns[format] || format;

				return format.replace(dateFormatRegExp, function (match) {
					var result;

					if (match === "d") {
						result = date.getDate();
					} else if (match === "dd") {
						result = pad(date.getDate());
					} else if (match === "ddd") {
						result = days.namesAbbr[date.getDay()];
					} else if (match === "dddd") {
						result = days.names[date.getDay()];
					} else if (match === "M") {
						result = date.getMonth() + 1;
					} else if (match === "MM") {
						result = pad(date.getMonth() + 1);
					} else if (match === "MMM") {
						result = months.namesAbbr[date.getMonth()];
					} else if (match === "MMMM") {
						result = months.names[date.getMonth()];
					} else if (match === "yy") {
						result = pad(date.getFullYear() % 100);
					} else if (match === "yyyy") {
						result = pad(date.getFullYear(), 4);
					} else if (match === "h") {
						result = date.getHours() % 12 || 12;
					} else if (match === "hh") {
						result = pad(date.getHours() % 12 || 12);
					} else if (match === "H") {
						result = date.getHours();
					} else if (match === "HH") {
						result = pad(date.getHours());
					} else if (match === "m") {
						result = date.getMinutes();
					} else if (match === "mm") {
						result = pad(date.getMinutes());
					} else if (match === "s") {
						result = date.getSeconds();
					} else if (match === "ss") {
						result = pad(date.getSeconds());
					} else if (match === "f") {
						result = math.floor(date.getMilliseconds() / 100);
					} else if (match === "ff") {
						result = date.getMilliseconds();
						if (result > 99) {
							result = math.floor(result / 10);
						}

						result = pad(result);
					} else if (match === "fff") {
						result = pad(date.getMilliseconds(), 3);
					} else if (match === "tt") {
						result = date.getHours() < 12 ? calendar.AM[0] : calendar.PM[0];
					}

					return result !== undefined ? result : match.slice(1, match.length - 1);
				});
			}

			//number formatting
			function formatNumber(number, format, culture) {
				culture = getCulture(culture);

				var numberFormat = culture.numberFormat,
					groupSize = numberFormat.groupSize[0],
					groupSeparator = numberFormat[COMMA],
					decimal = numberFormat[POINT],
					precision = numberFormat.decimals,
					pattern = numberFormat.pattern[0],
					literals = [],
					symbol,
					isCurrency, isPercent,
					customPrecision,
					formatAndPrecision,
					negative = number < 0,
					integer,
					fraction,
					integerLength,
					fractionLength,
					replacement = EMPTY,
					value = EMPTY,
					idx,
					length,
					ch,
					hasGroup,
					hasNegativeFormat,
					decimalIndex,
					sharpIndex,
					zeroIndex,
					hasZero, hasSharp,
					percentIndex,
					currencyIndex,
					startZeroIndex,
					start = -1,
					end;

				//return empty string if no number
				if (number === undefined) {
					return EMPTY;
				}

				if (!isFinite(number)) {
					return number;
				}

				//if no format then return number.toString() or number.toLocaleString() if culture.name is not defined
				if (!format) {
					return culture.name.length ? number.toLocaleString() : number.toString();
				}

				formatAndPrecision = standardFormatRegExp.exec(format);

				// standard formatting
				if (formatAndPrecision) {
					format = formatAndPrecision[1].toLowerCase();

					isCurrency = format === "c";
					isPercent = format === "p";

					if (isCurrency || isPercent) {
						//get specific number format information if format is currency or percent
						numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;
						groupSize = numberFormat.groupSize[0];
						groupSeparator = numberFormat[COMMA];
						decimal = numberFormat[POINT];
						precision = numberFormat.decimals;
						symbol = numberFormat.symbol;
						pattern = numberFormat.pattern[negative ? 0 : 1];
					}

					customPrecision = formatAndPrecision[2];

					if (customPrecision) {
						precision = +customPrecision;
					}

					//return number in exponential format
					if (format === "e") {
						return customPrecision ? number.toExponential(precision) : number.toExponential(); // toExponential() and toExponential(undefined) differ in FF #653438.
					}

					// multiply if format is percent
					if (isPercent) {
						number *= 100;
					}

					number = round(number, precision);
					negative = number < 0;
					number = number.split(POINT);

					integer = number[0];
					fraction = number[1];

					//exclude "-" if number is negative.
					if (negative) {
						integer = integer.substring(1);
					}

					value = integer;
					integerLength = integer.length;

					//add group separator to the number if it is longer enough
					if (integerLength >= groupSize) {
						value = EMPTY;
						for (idx = 0; idx < integerLength; idx++) {
							if (idx > 0 && (integerLength - idx) % groupSize === 0) {
								value += groupSeparator;
							}
							value += integer.charAt(idx);
						}
					}

					if (fraction) {
						value += decimal + fraction;
					}

					if (format === "n" && !negative) {
						return value;
					}

					number = EMPTY;

					for (idx = 0, length = pattern.length; idx < length; idx++) {
						ch = pattern.charAt(idx);

						if (ch === "n") {
							number += value;
						} else if (ch === "$" || ch === "%") {
							number += symbol;
						} else {
							number += ch;
						}
					}

					return number;
				}

				//custom formatting
				//
				//separate format by sections.

				//make number positive
				if (negative) {
					number = -number;
				}

				if (format.indexOf("'") > -1 || format.indexOf("\"") > -1 || format.indexOf("\\") > -1) {
					format = format.replace(literalRegExp, function (match) {
						var quoteChar = match.charAt(0).replace("\\", ""),
							literal = match.slice(1).replace(quoteChar, "");

						literals.push(literal);

						return PLACEHOLDER;
					});
				}

				format = format.split(";");
				if (negative && format[1]) {
					//get negative format
					format = format[1];
					hasNegativeFormat = true;
				} else if (number === 0) {
					//format for zeros
					format = format[2] || format[0];
					if (format.indexOf(SHARP) == -1 && format.indexOf(ZERO) == -1) {
						//return format if it is string constant.
						return format;
					}
				} else {
					format = format[0];
				}

				percentIndex = format.indexOf("%");
				currencyIndex = format.indexOf("$");

				isPercent = percentIndex != -1;
				isCurrency = currencyIndex != -1;

				//multiply number if the format has percent
				if (isPercent) {
					number *= 100;
				}

				if (isCurrency && format[currencyIndex - 1] === "\\") {
					format = format.split("\\").join("");
					isCurrency = false;
				}

				if (isCurrency || isPercent) {
					//get specific number format information if format is currency or percent
					numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;
					groupSize = numberFormat.groupSize[0];
					groupSeparator = numberFormat[COMMA];
					decimal = numberFormat[POINT];
					precision = numberFormat.decimals;
					symbol = numberFormat.symbol;
				}

				hasGroup = format.indexOf(COMMA) > -1;
				if (hasGroup) {
					format = format.replace(commaRegExp, EMPTY);
				}

				decimalIndex = format.indexOf(POINT);
				length = format.length;

				if (decimalIndex != -1) {
					fraction = number.toString().split("e");
					if (fraction[1]) {
						fraction = round(number, Math.abs(fraction[1]));
					} else {
						fraction = fraction[0];
					}
					fraction = fraction.split(POINT)[1] || EMPTY;
					zeroIndex = format.lastIndexOf(ZERO) - decimalIndex;
					sharpIndex = format.lastIndexOf(SHARP) - decimalIndex;
					hasZero = zeroIndex > -1;
					hasSharp = sharpIndex > -1;
					idx = fraction.length;

					if (!hasZero && !hasSharp) {
						format = format.substring(0, decimalIndex) + format.substring(decimalIndex + 1);
						length = format.length;
						decimalIndex = -1;
						idx = 0;
					} if (hasZero && zeroIndex > sharpIndex) {
						idx = zeroIndex;
					} else if (sharpIndex > zeroIndex) {
						if (hasSharp && idx > sharpIndex) {
							idx = sharpIndex;
						} else if (hasZero && idx < zeroIndex) {
							idx = zeroIndex;
						}
					}

					if (idx > -1) {
						number = round(number, idx);
					}
				} else {
					number = round(number);
				}

				sharpIndex = format.indexOf(SHARP);
				startZeroIndex = zeroIndex = format.indexOf(ZERO);

				//define the index of the first digit placeholder
				if (sharpIndex == -1 && zeroIndex != -1) {
					start = zeroIndex;
				} else if (sharpIndex != -1 && zeroIndex == -1) {
					start = sharpIndex;
				} else {
					start = sharpIndex > zeroIndex ? zeroIndex : sharpIndex;
				}

				sharpIndex = format.lastIndexOf(SHARP);
				zeroIndex = format.lastIndexOf(ZERO);

				//define the index of the last digit placeholder
				if (sharpIndex == -1 && zeroIndex != -1) {
					end = zeroIndex;
				} else if (sharpIndex != -1 && zeroIndex == -1) {
					end = sharpIndex;
				} else {
					end = sharpIndex > zeroIndex ? sharpIndex : zeroIndex;
				}

				if (start == length) {
					end = start;
				}

				if (start != -1) {
					value = number.toString().split(POINT);
					integer = value[0];
					fraction = value[1] || EMPTY;

					integerLength = integer.length;
					fractionLength = fraction.length;

					if (negative && (number * -1) >= 0) {
						negative = false;
					}

					//add group separator to the number if it is longer enough
					if (hasGroup) {
						if (integerLength === groupSize && integerLength < decimalIndex - startZeroIndex) {
							integer = groupSeparator + integer;
						} else if (integerLength > groupSize) {
							value = EMPTY;
							for (idx = 0; idx < integerLength; idx++) {
								if (idx > 0 && (integerLength - idx) % groupSize === 0) {
									value += groupSeparator;
								}
								value += integer.charAt(idx);
							}

							integer = value;
						}
					}

					number = format.substring(0, start);

					if (negative && !hasNegativeFormat) {
						number += "-";
					}

					for (idx = start; idx < length; idx++) {
						ch = format.charAt(idx);

						if (decimalIndex == -1) {
							if (end - idx < integerLength) {
								number += integer;
								break;
							}
						} else {
							if (zeroIndex != -1 && zeroIndex < idx) {
								replacement = EMPTY;
							}

							if ((decimalIndex - idx) <= integerLength && decimalIndex - idx > -1) {
								number += integer;
								idx = decimalIndex;
							}

							if (decimalIndex === idx) {
								number += (fraction ? decimal : EMPTY) + fraction;
								idx += end - decimalIndex + 1;
								continue;
							}
						}

						if (ch === ZERO) {
							number += ch;
							replacement = ch;
						} else if (ch === SHARP) {
							number += replacement;
						}
					}

					if (end >= start) {
						number += format.substring(end + 1);
					}

					//replace symbol placeholders
					if (isCurrency || isPercent) {
						value = EMPTY;
						for (idx = 0, length = number.length; idx < length; idx++) {
							ch = number.charAt(idx);
							value += (ch === "$" || ch === "%") ? symbol : ch;
						}
						number = value;
					}

					length = literals.length;

					if (length) {
						for (idx = 0; idx < length; idx++) {
							number = number.replace(PLACEHOLDER, literals[idx]);
						}
					}
				}

				return number;
			}

			var round = function (value, precision) {
				precision = precision || 0;

				value = value.toString().split('e');
				value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + precision) : precision)));

				value = value.toString().split('e');
				value = +(value[0] + 'e' + (value[1] ? (+value[1] - precision) : -precision));

				return value.toFixed(precision);
			};

			var toString = function (value, fmt, culture) {
				if (fmt) {
					if (objectToString.call(value) === "[object Date]") {
						return formatDate(value, fmt, culture);
					} else if (typeof value === NUMBER) {
						return formatNumber(value, fmt, culture);
					}
				}

				return value !== undefined ? value : "";
			};

			if (globalize) {
				toString = function (value, format, culture) {
					if ($.isPlainObject(culture)) {
						culture = culture.name;
					}

					return globalize.format(value, format, culture);
				};
			}

			kendo.format = function (fmt) {
				var values = arguments;

				return fmt.replace(formatRegExp, function (match, index, placeholderFormat) {
					var value = values[parseInt(index, 10) + 1];

					return toString(value, placeholderFormat ? placeholderFormat.substring(1) : "");
				});
			};

			kendo._extractFormat = function (format) {
				if (format.slice(0, 3) === "{0:") {
					format = format.slice(3, format.length - 1);
				}

				return format;
			};

			kendo._activeElement = function () {
				try {
					return document.activeElement;
				} catch (e) {
					return document.documentElement.activeElement;
				}
			};

			kendo._round = round;
			kendo.toString = toString;
		})();


		(function () {
			var nonBreakingSpaceRegExp = /\u00A0/g,
				exponentRegExp = /[eE][\-+]?[0-9]+/,
				shortTimeZoneRegExp = /[+|\-]\d{1,2}/,
				longTimeZoneRegExp = /[+|\-]\d{1,2}:\d{2}/,
				dateRegExp = /^\/Date\((.*?)\)\/$/,
				signRegExp = /[+-]/,
				formatsSequence = ["G", "g", "d", "F", "D", "y", "m", "T", "t"],
				numberRegExp = {
					2: /^\d{1,2}/,
					3: /^\d{1,3}/,
					4: /^\d{4}/
				},
				objectToString = {}.toString;

			function outOfRange(value, start, end) {
				return !(value >= start && value <= end);
			}

			function designatorPredicate(designator) {
				return designator.charAt(0);
			}

			function mapDesignators(designators) {
				return $.map(designators, designatorPredicate);
			}

			//if date's day is different than the typed one - adjust
			function adjustDST(date, hours) {
				if (!hours && date.getHours() === 23) {
					date.setHours(date.getHours() + 2);
				}
			}

			function lowerArray(data) {
				var idx = 0,
					length = data.length,
					array = [];

				for (; idx < length; idx++) {
					array[idx] = (data[idx] + "").toLowerCase();
				}

				return array;
			}

			function lowerLocalInfo(localInfo) {
				var newLocalInfo = {}, property;

				for (property in localInfo) {
					newLocalInfo[property] = lowerArray(localInfo[property]);
				}

				return newLocalInfo;
			}

			function parseExact(value, format, culture) {
				if (!value) {
					return null;
				}

				var lookAhead = function (match) {
					var i = 0;
					while (format[idx] === match) {
						i++;
						idx++;
					}
					if (i > 0) {
						idx -= 1;
					}
					return i;
				},
					getNumber = function (size) {
						var rg = numberRegExp[size] || new RegExp('^\\d{1,' + size + '}'),
							match = value.substr(valueIdx, size).match(rg);

						if (match) {
							match = match[0];
							valueIdx += match.length;
							return parseInt(match, 10);
						}
						return null;
					},
					getIndexByName = function (names, lower) {
						var i = 0,
							length = names.length,
							name, nameLength,
							subValue;

						for (; i < length; i++) {
							name = names[i];
							nameLength = name.length;
							subValue = value.substr(valueIdx, nameLength);

							if (lower) {
								subValue = subValue.toLowerCase();
							}

							if (subValue == name) {
								valueIdx += nameLength;
								return i + 1;
							}
						}
						return null;
					},
					checkLiteral = function () {
						var result = false;
						if (value.charAt(valueIdx) === format[idx]) {
							valueIdx++;
							result = true;
						}
						return result;
					},
					calendar = culture.calendars.standard,
					year = null,
					month = null,
					day = null,
					hours = null,
					minutes = null,
					seconds = null,
					milliseconds = null,
					idx = 0,
					valueIdx = 0,
					literal = false,
					date = new Date(),
					twoDigitYearMax = calendar.twoDigitYearMax || 2029,
					defaultYear = date.getFullYear(),
					ch, count, length, pattern,
					pmHour, UTC, ISO8601, matches,
					amDesignators, pmDesignators,
					hoursOffset, minutesOffset,
					hasTime, match;

				if (!format) {
					format = "d"; //shord date format
				}

				//if format is part of the patterns get real format
				pattern = calendar.patterns[format];
				if (pattern) {
					format = pattern;
				}

				format = format.split("");
				length = format.length;

				for (; idx < length; idx++) {
					ch = format[idx];

					if (literal) {
						if (ch === "'") {
							literal = false;
						} else {
							checkLiteral();
						}
					} else {
						if (ch === "d") {
							count = lookAhead("d");
							if (!calendar._lowerDays) {
								calendar._lowerDays = lowerLocalInfo(calendar.days);
							}

							day = count < 3 ? getNumber(2) : getIndexByName(calendar._lowerDays[count == 3 ? "namesAbbr" : "names"], true);

							if (day === null || outOfRange(day, 1, 31)) {
								return null;
							}
						} else if (ch === "M") {
							count = lookAhead("M");
							if (!calendar._lowerMonths) {
								calendar._lowerMonths = lowerLocalInfo(calendar.months);
							}
							month = count < 3 ? getNumber(2) : getIndexByName(calendar._lowerMonths[count == 3 ? 'namesAbbr' : 'names'], true);

							if (month === null || outOfRange(month, 1, 12)) {
								return null;
							}
							month -= 1; //because month is zero based
						} else if (ch === "y") {
							count = lookAhead("y");
							year = getNumber(count);

							if (year === null) {
								return null;
							}

							if (count == 2) {
								if (typeof twoDigitYearMax === "string") {
									twoDigitYearMax = defaultYear + parseInt(twoDigitYearMax, 10);
								}

								year = (defaultYear - defaultYear % 100) + year;
								if (year > twoDigitYearMax) {
									year -= 100;
								}
							}
						} else if (ch === "h") {
							lookAhead("h");
							hours = getNumber(2);
							if (hours == 12) {
								hours = 0;
							}
							if (hours === null || outOfRange(hours, 0, 11)) {
								return null;
							}
						} else if (ch === "H") {
							lookAhead("H");
							hours = getNumber(2);
							if (hours === null || outOfRange(hours, 0, 23)) {
								return null;
							}
						} else if (ch === "m") {
							lookAhead("m");
							minutes = getNumber(2);
							if (minutes === null || outOfRange(minutes, 0, 59)) {
								return null;
							}
						} else if (ch === "s") {
							lookAhead("s");
							seconds = getNumber(2);
							if (seconds === null || outOfRange(seconds, 0, 59)) {
								return null;
							}
						} else if (ch === "f") {
							count = lookAhead("f");

							match = value.substr(valueIdx, count).match(numberRegExp[3]);
							milliseconds = getNumber(count);

							if (milliseconds !== null) {
								match = match[0].length;

								if (match < 3) {
									milliseconds *= Math.pow(10, (3 - match));
								}

								if (count > 3) {
									milliseconds = parseInt(milliseconds.toString().substring(0, 3), 10);
								}
							}

							if (milliseconds === null || outOfRange(milliseconds, 0, 999)) {
								return null;
							}

						} else if (ch === "t") {
							count = lookAhead("t");
							amDesignators = calendar.AM;
							pmDesignators = calendar.PM;

							if (count === 1) {
								amDesignators = mapDesignators(amDesignators);
								pmDesignators = mapDesignators(pmDesignators);
							}

							pmHour = getIndexByName(pmDesignators);
							if (!pmHour && !getIndexByName(amDesignators)) {
								return null;
							}
						}
						else if (ch === "z") {
							UTC = true;
							count = lookAhead("z");

							if (value.substr(valueIdx, 1) === "Z") {
								if (!ISO8601) {
									return null;
								}

								checkLiteral();
								continue;
							}

							matches = value.substr(valueIdx, 6)
										   .match(count > 2 ? longTimeZoneRegExp : shortTimeZoneRegExp);

							if (!matches) {
								return null;
							}

							matches = matches[0];
							valueIdx = matches.length;
							matches = matches.split(":");

							hoursOffset = parseInt(matches[0], 10);
							if (outOfRange(hoursOffset, -12, 13)) {
								return null;
							}

							if (count > 2) {
								minutesOffset = parseInt(matches[1], 10);
								if (isNaN(minutesOffset) || outOfRange(minutesOffset, 0, 59)) {
									return null;
								}
							}
						} else if (ch === "T") {
							ISO8601 = checkLiteral();
						} else if (ch === "'") {
							literal = true;
							checkLiteral();
						} else if (!checkLiteral()) {
							return null;
						}
					}
				}

				hasTime = hours !== null || minutes !== null || seconds || null;

				if (year === null && month === null && day === null && hasTime) {
					year = defaultYear;
					month = date.getMonth();
					day = date.getDate();
				} else {
					if (year === null) {
						year = defaultYear;
					}

					if (day === null) {
						day = 1;
					}
				}

				if (pmHour && hours < 12) {
					hours += 12;
				}

				if (UTC) {
					if (hoursOffset) {
						hours += -hoursOffset;
					}

					if (minutesOffset) {
						minutes += -minutesOffset;
					}

					value = new Date(Date.UTC(year, month, day, hours, minutes, seconds, milliseconds));
				} else {
					value = new Date(year, month, day, hours, minutes, seconds, milliseconds);
					adjustDST(value, hours);
				}

				if (year < 100) {
					value.setFullYear(year);
				}

				if (value.getDate() !== day && UTC === undefined) {
					return null;
				}

				return value;
			}

			kendo.parseDate = function (value, formats, culture) {
				if (objectToString.call(value) === "[object Date]") {
					return value;
				}

				var idx = 0;
				var date = null;
				var length, patterns;
				var tzoffset;

				if (value && value.indexOf("/D") === 0) {
					date = dateRegExp.exec(value);
					if (date) {
						tzoffset = date = date[1];

						date = parseInt(date, 10);

						tzoffset = tzoffset.substring(1).split(signRegExp)[1];

						if (tzoffset) {
							date -= (parseInt(tzoffset, 10) * kendo.date.MS_PER_MINUTE);
						}

						return new Date(date);
					}
				}

				culture = kendo.getCulture(culture);

				if (!formats) {
					formats = [];
					patterns = culture.calendar.patterns;
					length = formatsSequence.length;

					for (; idx < length; idx++) {
						formats[idx] = patterns[formatsSequence[idx]];
					}

					idx = 0;

					formats = [
						"yyyy/MM/dd HH:mm:ss",
						"yyyy/MM/dd HH:mm",
						"yyyy/MM/dd",
						"ddd MMM dd yyyy HH:mm:ss",
						"yyyy-MM-ddTHH:mm:ss.fffffffzzz",
						"yyyy-MM-ddTHH:mm:ss.fffzzz",
						"yyyy-MM-ddTHH:mm:sszzz",
						"yyyy-MM-ddTHH:mmzzz",
						"yyyy-MM-ddTHH:mmzz",
						"yyyy-MM-ddTHH:mm:ss",
						"yyyy-MM-ddTHH:mm",
						"yyyy-MM-dd HH:mm:ss",
						"yyyy-MM-dd HH:mm",
						"yyyy-MM-dd",
						"HH:mm:ss",
						"HH:mm"
					].concat(formats);
				}

				formats = isArray(formats) ? formats : [formats];
				length = formats.length;

				for (; idx < length; idx++) {
					date = parseExact(value, formats[idx], culture);
					if (date) {
						return date;
					}
				}

				return date;
			};

			kendo.parseInt = function (value, culture) {
				var result = kendo.parseFloat(value, culture);
				if (result) {
					result = result | 0;
				}
				return result;
			};

			kendo.parseFloat = function (value, culture, format) {
				if (!value && value !== 0) {
					return null;
				}

				if (typeof value === NUMBER) {
					return value;
				}

				value = value.toString();
				culture = kendo.getCulture(culture);

				var number = culture.numberFormat,
					percent = number.percent,
					currency = number.currency,
					symbol = currency.symbol,
					percentSymbol = percent.symbol,
					negative = value.indexOf("-"),
					parts, isPercent;

				//handle exponential number
				if (exponentRegExp.test(value)) {
					value = parseFloat(value.replace(number["."], "."));
					if (isNaN(value)) {
						value = null;
					}
					return value;
				}

				if (negative > 0) {
					return null;
				} else {
					negative = negative > -1;
				}

				if (value.indexOf(symbol) > -1 || (format && format.toLowerCase().indexOf("c") > -1)) {
					number = currency;
					parts = number.pattern[0].replace("$", symbol).split("n");
					if (value.indexOf(parts[0]) > -1 && value.indexOf(parts[1]) > -1) {
						value = value.replace(parts[0], "").replace(parts[1], "");
						negative = true;
					}
				} else if (value.indexOf(percentSymbol) > -1) {
					isPercent = true;
					number = percent;
					symbol = percentSymbol;
				}

				//	remove thousand delimeters (100'000'000/100.000.000 will be 100000000, but 1234.5 will stay as is)
				//
				var point5Pos = value.lastIndexOf(".5");
				if (point5Pos < value.length - 2) {
					point5Pos = -1;
				}

				var point0Pos = value.lastIndexOf(".0");
				if (point0Pos < value.length - 2) {
					point0Pos = -1;
				}

				//if (number[","] != ".") {
				while (
					(-1 != value.indexOf(number[","]))
					&& (
						(value.indexOf(number[","]) != point5Pos)
						&& (value.indexOf(number[","]) != point0Pos)
					)
					) {
					value = value.replace(number[","], "");
				}
				//}

				value = value.replace("-", "")
							 .replace(symbol, "")
							 .replace(nonBreakingSpaceRegExp, " ")
							 //caused a bug for 1.234,5, it will be formatted as 12345 for it-IT
							 //.split(number[","].replace(nonBreakingSpaceRegExp, " ")).join("")
							 .replace(number["."], ".");

				value = parseFloat(value);

				if (isNaN(value)) {
					value = null;
				} else if (negative) {
					value *= -1;
				}

				if (value && isPercent) {
					value /= 100;
				}

				return value;
			};

			if (globalize) {
				kendo.parseDate = function (value, format, culture) {
					if (objectToString.call(value) === "[object Date]") {
						return value;
					}

					return globalize.parseDate(value, format, culture);
				};

				kendo.parseFloat = function (value, culture) {
					if (typeof value === NUMBER) {
						return value;
					}

					if (value === undefined || value === null) {
						return null;
					}

					if ($.isPlainObject(culture)) {
						culture = culture.name;
					}

					value = globalize.parseFloat(value, culture);

					return isNaN(value) ? null : value;
				};
			}
		})();

		function getShadows(element) {
			var shadow = element.css(kendo.support.transitions.css + "box-shadow") || element.css("box-shadow"),
				radius = shadow ? shadow.match(boxShadowRegExp) || [0, 0, 0, 0, 0] : [0, 0, 0, 0, 0],
				blur = math.max((+radius[3]), +(radius[4] || 0));

			return {
				left: (-radius[1]) + blur,
				right: (+radius[1]) + blur,
				bottom: (+radius[2]) + blur
			};
		}

		function wrap(element, autosize) {
			var browser = support.browser,
				percentage,
				isRtl = element.css("direction") == "rtl";

			if (!element.parent().hasClass("k-animation-container")) {
				var shadows = getShadows(element),
					width = element[0].style.width,
					height = element[0].style.height,
					percentWidth = percentRegExp.test(width),
					percentHeight = percentRegExp.test(height);

				if (browser.opera) { // Box shadow can't be retrieved in Opera
					shadows.left = shadows.right = shadows.bottom = 5;
				}

				percentage = percentWidth || percentHeight;

				if (!percentWidth && (!autosize || (autosize && width))) { width = element.outerWidth(); }
				if (!percentHeight && (!autosize || (autosize && height))) { height = element.outerHeight(); }

				element.wrap(
							 $("<div/>")
							 .addClass("k-animation-container")
							 .css({
							 	width: width,
							 	height: height,
							 	marginLeft: shadows.left * (isRtl ? 1 : -1),
							 	paddingLeft: shadows.left,
							 	paddingRight: shadows.right,
							 	paddingBottom: shadows.bottom
							 }));

				if (percentage) {
					element.css({
						width: "100%",
						height: "100%",
						boxSizing: "border-box",
						mozBoxSizing: "border-box",
						webkitBoxSizing: "border-box"
					});
				}
			} else {
				var wrapper = element.parent(".k-animation-container"),
					wrapperStyle = wrapper[0].style;

				if (wrapper.is(":hidden")) {
					wrapper.show();
				}

				percentage = percentRegExp.test(wrapperStyle.width) || percentRegExp.test(wrapperStyle.height);

				if (!percentage) {
					wrapper.css({
						width: element.outerWidth(),
						height: element.outerHeight(),
						boxSizing: "content-box",
						mozBoxSizing: "content-box",
						webkitBoxSizing: "content-box"
					});
				}
			}

			if (browser.msie && math.floor(browser.version) <= 7) {
				element.css({ zoom: 1 });
				element.children(".k-menu").width(element.width());
			}

			return element.parent();
		}

		function deepExtend(destination) {
			var i = 1,
				length = arguments.length;

			for (i = 1; i < length; i++) {
				deepExtendOne(destination, arguments[i]);
			}

			return destination;
		}

		function deepExtendOne(destination, source) {
			var ObservableArray = kendo.data.ObservableArray,
				DataSource = kendo.data.DataSource,
				HierarchicalDataSource = kendo.data.HierarchicalDataSource,
				property,
				propValue,
				propType,
				destProp;

			for (property in source) {
				propValue = source[property];
				propType = typeof propValue;
				if (propType === OBJECT && propValue !== null &&
					propValue.constructor !== Array && propValue.constructor !== ObservableArray &&
					propValue.constructor !== DataSource && propValue.constructor !== HierarchicalDataSource) {
					if (propValue instanceof Date) {
						destination[property] = new Date(propValue.getTime());
					} else if (isFunction(propValue.clone)) {
						destination[property] = propValue.clone();
					} else {
						destProp = destination[property];
						if (typeof (destProp) === OBJECT) {
							destination[property] = destProp || {};
						} else {
							destination[property] = {};
						}
						deepExtendOne(destination[property], propValue);
					}
				} else if (propType !== UNDEFINED) {
					destination[property] = propValue;
				}
			}

			return destination;
		}

		function testRx(agent, rxs, dflt) {
			for (var rx in rxs) {
				if (rxs.hasOwnProperty(rx) && rxs[rx].test(agent)) {
					return rx;
				}
			}
			return dflt !== undefined ? dflt : agent;
		}

		function toHyphens(str) {
			return str.replace(/([a-z][A-Z])/g, function (g) {
				return g.charAt(0) + '-' + g.charAt(1).toLowerCase();
			});
		}

		function toCamelCase(str) {
			return str.replace(/\-(\w)/g, function (strMatch, g1) {
				return g1.toUpperCase();
			});
		}

		function getComputedStyles(element, properties) {
			var styles = {}, computedStyle;

			if (document.defaultView && document.defaultView.getComputedStyle) {
				computedStyle = document.defaultView.getComputedStyle(element, "");

				if (properties) {
					$.each(properties, function (idx, value) {
						styles[value] = computedStyle.getPropertyValue(value);
					});
				}
			} else {
				computedStyle = element.currentStyle;

				if (properties) {
					$.each(properties, function (idx, value) {
						styles[value] = computedStyle[toCamelCase(value)];
					});
				}
			}

			if (!kendo.size(styles)) {
				styles = computedStyle;
			}

			return styles;
		}

		(function () {
			support.scrollbar = function () {
				var div = document.createElement("div"),
					result;

				div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both";
				div.innerHTML = "&nbsp;";
				document.body.appendChild(div);

				result = div.offsetWidth - div.scrollWidth;

				document.body.removeChild(div);
				return result;
			};

			support.isRtl = function (element) {
				return $(element).closest(".k-rtl").length > 0;
			};

			var table = document.createElement("table");

			// Internet Explorer does not support setting the innerHTML of TBODY and TABLE elements
			try {
				table.innerHTML = "<tr><td></td></tr>";

				support.tbodyInnerHtml = true;
			} catch (e) {
				support.tbodyInnerHtml = false;
			}

			support.touch = "ontouchstart" in window;
			support.msPointers = window.MSPointerEvent;
			support.pointers = window.PointerEvent;

			var transitions = support.transitions = false,
				transforms = support.transforms = false,
				elementProto = "HTMLElement" in window ? HTMLElement.prototype : [];

			support.hasHW3D = ("WebKitCSSMatrix" in window && "m11" in new window.WebKitCSSMatrix()) || "MozPerspective" in document.documentElement.style || "msPerspective" in document.documentElement.style;

			each(["Moz", "webkit", "O", "ms"], function () {
				var prefix = this.toString(),
					hasTransitions = typeof table.style[prefix + "Transition"] === STRING;

				if (hasTransitions || typeof table.style[prefix + "Transform"] === STRING) {
					var lowPrefix = prefix.toLowerCase();

					transforms = {
						css: (lowPrefix != "ms") ? "-" + lowPrefix + "-" : "",
						prefix: prefix,
						event: (lowPrefix === "o" || lowPrefix === "webkit") ? lowPrefix : ""
					};

					if (hasTransitions) {
						transitions = transforms;
						transitions.event = transitions.event ? transitions.event + "TransitionEnd" : "transitionend";
					}

					return false;
				}
			});

			table = null;

			support.transforms = transforms;
			support.transitions = transitions;

			support.devicePixelRatio = window.devicePixelRatio === undefined ? 1 : window.devicePixelRatio;

			try {
				support.screenWidth = window.outerWidth || window.screen ? window.screen.availWidth : window.innerWidth;
				support.screenHeight = window.outerHeight || window.screen ? window.screen.availHeight : window.innerHeight;
			} catch (e) {
				//window.outerWidth throws error when in IE showModalDialog.
				support.screenWidth = window.screen.availWidth;
				support.screenHeight = window.screen.availHeight;
			}

			support.detectOS = function (ua) {
				var os = false, minorVersion, match = [],
					notAndroidPhone = !/mobile safari/i.test(ua),
					agentRxs = {
						fire: /(Silk)\/(\d+)\.(\d+(\.\d+)?)/,
						android: /(Android|Android.*(?:Opera|Firefox).*?\/)\s*(\d+)\.(\d+(\.\d+)?)/,
						iphone: /(iPhone|iPod).*OS\s+(\d+)[\._]([\d\._]+)/,
						ipad: /(iPad).*OS\s+(\d+)[\._]([\d_]+)/,
						meego: /(MeeGo).+NokiaBrowser\/(\d+)\.([\d\._]+)/,
						webos: /(webOS)\/(\d+)\.(\d+(\.\d+)?)/,
						blackberry: /(BlackBerry|BB10).*?Version\/(\d+)\.(\d+(\.\d+)?)/,
						playbook: /(PlayBook).*?Tablet\s*OS\s*(\d+)\.(\d+(\.\d+)?)/,
						wp: /(Windows Phone(?: OS)?)\s(\d+)\.(\d+(\.\d+)?)/,
						windows: /(MSIE)\s+(\d+)\.(\d+(\.\d+)?)/,
						tizen: /(tizen).*?Version\/(\d+)\.(\d+(\.\d+)?)/i,
						sailfish: /(sailfish).*rv:(\d+)\.(\d+(\.\d+)?).*firefox/i,
						ffos: /(Mobile).*rv:(\d+)\.(\d+(\.\d+)?).*Firefox/
					},
					osRxs = {
						ios: /^i(phone|pad|pod)$/i,
						android: /^android|fire$/i,
						blackberry: /^blackberry|playbook/i,
						windows: /windows/,
						wp: /wp/,
						flat: /sailfish|ffos|tizen/i,
						meego: /meego/
					},
					formFactorRxs = {
						tablet: /playbook|ipad|fire/i
					},
					browserRxs = {
						omini: /Opera\sMini/i,
						omobile: /Opera\sMobi/i,
						firefox: /Firefox|Fennec/i,
						mobilesafari: /version\/.*safari/i,
						chrome: /chrome|crios/i,
						webkit: /webkit/i,
						ie: /MSIE|Windows\sPhone/i
					};

				for (var agent in agentRxs) {
					if (agentRxs.hasOwnProperty(agent)) {
						match = ua.match(agentRxs[agent]);
						if (match) {
							if (agent == "windows" && "plugins" in navigator) { return false; } // Break if not Metro/Mobile Windows

							os = {};
							os.device = agent;
							os.tablet = testRx(agent, formFactorRxs, false);
							os.browser = testRx(ua, browserRxs, "default");
							os.name = testRx(agent, osRxs);
							os[os.name] = true;
							os.majorVersion = match[2];
							os.minorVersion = match[3].replace("_", ".");
							minorVersion = os.minorVersion.replace(".", "").substr(0, 2);
							os.flatVersion = os.majorVersion + minorVersion + (new Array(3 - (minorVersion.length < 3 ? minorVersion.length : 2)).join("0"));
							os.cordova = typeof window.PhoneGap !== UNDEFINED || typeof window.cordova !== UNDEFINED; // Use file protocol to detect appModes.
							os.appMode = window.navigator.standalone || (/file|local|wmapp/).test(window.location.protocol) || os.cordova; // Use file protocol to detect appModes.

							if (os.android && (support.devicePixelRatio < 1.5 && os.flatVersion < 400 || notAndroidPhone) && (support.screenWidth > 800 || support.screenHeight > 800)) {
								os.tablet = agent;
							}

							break;
						}
					}
				}
				return os;
			};

			var mobileOS = support.mobileOS = support.detectOS(navigator.userAgent);

			support.wpDevicePixelRatio = mobileOS.wp ? screen.width / 320 : 0;
			support.kineticScrollNeeded = mobileOS && (support.touch || support.msPointers || support.pointers);

			support.hasNativeScrolling = false;

			if (mobileOS.ios || (mobileOS.android && mobileOS.majorVersion > 2) || mobileOS.wp) {
				support.hasNativeScrolling = mobileOS;
			}

			support.mouseAndTouchPresent = support.touch && !(support.mobileOS.ios || support.mobileOS.android);

			support.detectBrowser = function (ua) {
				var browser = false, match = [],
					browserRxs = {
						webkit: /(chrome)[ \/]([\w.]+)/i,
						safari: /(webkit)[ \/]([\w.]+)/i,
						opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i,
						msie: /(msie\s|trident.*? rv:)([\w.]+)/i,
						mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
					};

				for (var agent in browserRxs) {
					if (browserRxs.hasOwnProperty(agent)) {
						match = ua.match(browserRxs[agent]);
						if (match) {
							browser = {};
							browser[agent] = true;
							browser[match[1].toLowerCase()] = true;
							browser.version = parseInt(document.documentMode || match[2], 10);

							break;
						}
					}
				}

				return browser;
			};

			support.browser = support.detectBrowser(navigator.userAgent);

			support.zoomLevel = function () {
				try {
					return support.touch ? (document.documentElement.clientWidth / window.innerWidth) :
						   support.browser.msie && support.browser.version >= 10 ? ((top || window).document.documentElement.offsetWidth / (top || window).innerWidth) : 1;
				} catch (e) {
					return 1;
				}
			};

			support.cssBorderSpacing = typeof document.documentElement.style.borderSpacing != "undefined" && !(support.browser.msie && support.browser.version < 8);

			(function (browser) {
				// add browser-specific CSS class
				var cssClass = "",
					docElement = $(document.documentElement),
					majorVersion = parseInt(browser.version, 10);

				if (browser.msie) {
					cssClass = "ie";
				} else if (browser.mozilla) {
					cssClass = "ff";
				} else if (browser.safari) {
					cssClass = "safari";
				} else if (browser.webkit) {
					cssClass = "webkit";
				} else if (browser.opera) {
					cssClass = "opera";
				}

				if (cssClass) {
					cssClass = "k-" + cssClass + " k-" + cssClass + majorVersion;
				}
				if (support.mobileOS) {
					cssClass += " k-mobile";
				}

				docElement.addClass(cssClass);
			})(support.browser);

			support.eventCapture = document.documentElement.addEventListener;

			var input = document.createElement("input");

			support.placeholder = "placeholder" in input;
			support.propertyChangeEvent = "onpropertychange" in input;

			support.input = (function () {
				var types = ["number", "date", "time", "month", "week", "datetime", "datetime-local"];
				var length = types.length;
				var value = "test";
				var result = {};
				var idx = 0;
				var type;

				for (; idx < length; idx++) {
					type = types[idx];
					input.setAttribute("type", type);
					input.value = value;

					result[type.replace("-", "")] = input.type !== "text" && input.value !== value;
				}

				return result;
			})();

			input.style.cssText = "float:left;";

			support.cssFloat = !!input.style.cssFloat;

			input = null;

			support.stableSort = (function () {
				// Chrome sort is not stable for more than *10* items
				// IE9+ sort is not stable for than *512* items
				var threshold = 513;

				var sorted = [{
					index: 0,
					field: "b"
				}];

				for (var i = 1; i < threshold; i++) {
					sorted.push({
						index: i,
						field: "a"
					});
				}

				sorted.sort(function (a, b) {
					return a.field > b.field ? 1 : (a.field < b.field ? -1 : 0);
				});

				return sorted[0].index === 1;
			})();

			support.matchesSelector = elementProto.webkitMatchesSelector || elementProto.mozMatchesSelector ||
									  elementProto.msMatchesSelector || elementProto.oMatchesSelector || elementProto.matchesSelector ||
			  function (selector) {
			  	var nodeList = document.querySelectorAll ? (this.parentNode || document).querySelectorAll(selector) || [] : $(selector),
					i = nodeList.length;

			  	while (i--) {
			  		if (nodeList[i] == this) {
			  			return true;
			  		}
			  	}

			  	return false;
			  };

			support.pushState = window.history && window.history.pushState;

			var documentMode = document.documentMode;

			support.hashChange = ("onhashchange" in window) && !(support.browser.msie && (!documentMode || documentMode <= 8)); // old IE detection
		})();


		function size(obj) {
			var result = 0, key;
			for (key in obj) {
				if (obj.hasOwnProperty(key) && key != "toJSON") { // Ignore fake IE7 toJSON.
					result++;
				}
			}

			return result;
		}

		function getOffset(element, type, positioned) {
			if (!type) {
				type = "offset";
			}

			var result = element[type](),
				mobileOS = support.mobileOS;

			// IE10 touch zoom is living in a separate viewport
			if (support.browser.msie && (support.pointers || support.msPointers) && !positioned) {
				result.top -= (window.pageYOffset - document.documentElement.scrollTop);
				result.left -= (window.pageXOffset - document.documentElement.scrollLeft);
			}

			return result;
		}

		var directions = {
			left: { reverse: "right" },
			right: { reverse: "left" },
			down: { reverse: "up" },
			up: { reverse: "down" },
			top: { reverse: "bottom" },
			bottom: { reverse: "top" },
			"in": { reverse: "out" },
			out: { reverse: "in" }
		};

		function parseEffects(input) {
			var effects = {};

			each((typeof input === "string" ? input.split(" ") : input), function (idx) {
				effects[idx] = this;
			});

			return effects;
		}

		function fx(element) {
			return new kendo.effects.Element(element);
		}

		var effects = {};

		$.extend(effects, {
			enabled: true,
			Element: function (element) {
				this.element = $(element);
			},

			promise: function (element, options) {
				if (!element.is(":visible")) {
					element.css({ display: element.data("olddisplay") || "block" }).css("display");
				}

				if (options.hide) {
					element.data("olddisplay", element.css("display")).hide();
				}

				if (options.init) {
					options.init();
				}

				if (options.completeCallback) {
					options.completeCallback(element); // call the external complete callback with the element
				}

				element.dequeue();
			},

			disable: function () {
				this.enabled = false;
				this.promise = this.promiseShim;
			},

			enable: function () {
				this.enabled = true;
				this.promise = this.animatedPromise;
			}
		});

		effects.promiseShim = effects.promise;

		function prepareAnimationOptions(options, duration, reverse, complete) {
			if (typeof options === STRING) {
				// options is the list of effect names separated by space e.g. animate(element, "fadeIn slideDown")

				// only callback is provided e.g. animate(element, options, function() {});
				if (isFunction(duration)) {
					complete = duration;
					duration = 400;
					reverse = false;
				}

				if (isFunction(reverse)) {
					complete = reverse;
					reverse = false;
				}

				if (typeof duration === BOOLEAN) {
					reverse = duration;
					duration = 400;
				}

				options = {
					effects: options,
					duration: duration,
					reverse: reverse,
					complete: complete
				};
			}

			return extend({
				//default options
				effects: {},
				duration: 400, //jQuery default duration
				reverse: false,
				init: noop,
				teardown: noop,
				hide: false
			}, options, { completeCallback: options.complete, complete: noop }); // Move external complete callback, so deferred.resolve can be always executed.

		}

		function animate(element, options, duration, reverse, complete) {
			var idx = 0,
				length = element.length,
				instance;

			for (; idx < length; idx++) {
				instance = $(element[idx]);
				instance.queue(function () {
					effects.promise(instance, prepareAnimationOptions(options, duration, reverse, complete));
				});
			}

			return element;
		}

		function toggleClass(element, classes, options, add) {
			if (classes) {
				classes = classes.split(" ");

				each(classes, function (idx, value) {
					element.toggleClass(value, add);
				});
			}

			return element;
		}

		if (!("kendoAnimate" in $.fn)) {
			extend($.fn, {
				kendoStop: function (clearQueue, gotoEnd) {
					return this.stop(clearQueue, gotoEnd);
				},

				kendoAnimate: function (options, duration, reverse, complete) {
					return animate(this, options, duration, reverse, complete);
				},

				kendoAddClass: function (classes, options) {
					return kendo.toggleClass(this, classes, options, true);
				},

				kendoRemoveClass: function (classes, options) {
					return kendo.toggleClass(this, classes, options, false);
				},
				kendoToggleClass: function (classes, options, toggle) {
					return kendo.toggleClass(this, classes, options, toggle);
				}
			});
		}

		var ampRegExp = /&/g,
			ltRegExp = /</g,
			quoteRegExp = /"/g,
			aposRegExp = /'/g,
			gtRegExp = />/g;
		function htmlEncode(value) {
			return ("" + value).replace(ampRegExp, "&amp;").replace(ltRegExp, "&lt;").replace(gtRegExp, "&gt;").replace(quoteRegExp, "&quot;").replace(aposRegExp, "&#39;");
		}

		var eventTarget = function (e) {
			return e.target;
		};

		if (support.touch) {

			eventTarget = function (e) {
				var touches = "originalEvent" in e ? e.originalEvent.changedTouches : "changedTouches" in e ? e.changedTouches : null;

				return touches ? document.elementFromPoint(touches[0].clientX, touches[0].clientY) : e.target;
			};

			each(["swipe", "swipeLeft", "swipeRight", "swipeUp", "swipeDown", "doubleTap", "tap"], function (m, value) {
				$.fn[value] = function (callback) {
					return this.bind(value, callback);
				};
			});
		}

		if (support.touch) {
			if (!support.mobileOS) {
				support.mousedown = "mousedown touchstart";
				support.mouseup = "mouseup touchend";
				support.mousemove = "mousemove touchmove";
				support.mousecancel = "mouseleave touchcancel";
				support.click = "click";
				support.resize = "resize";
			} else {
				support.mousedown = "touchstart";
				support.mouseup = "touchend";
				support.mousemove = "touchmove";
				support.mousecancel = "touchcancel";
				support.click = "touchend";
				support.resize = "orientationchange";
			}
		} else if (support.pointers) {
			support.mousemove = "pointermove";
			support.mousedown = "pointerdown";
			support.mouseup = "pointerup";
			support.mousecancel = "pointercancel";
			support.click = "pointerup";
			support.resize = "orientationchange resize";
		} else if (support.msPointers) {
			support.mousemove = "MSPointerMove";
			support.mousedown = "MSPointerDown";
			support.mouseup = "MSPointerUp";
			support.mousecancel = "MSPointerCancel";
			support.click = "MSPointerUp";
			support.resize = "orientationchange resize";
		} else {
			support.mousemove = "mousemove";
			support.mousedown = "mousedown";
			support.mouseup = "mouseup";
			support.mousecancel = "mouseleave";
			support.click = "click";
			support.resize = "resize";
		}

		var wrapExpression = function (members, paramName) {
			var result = paramName || "d",
				index,
				idx,
				length,
				member,
				count = 1;

			for (idx = 0, length = members.length; idx < length; idx++) {
				member = members[idx];
				if (member !== "") {
					index = member.indexOf("[");

					if (index !== 0) {
						if (index == -1) {
							member = "." + member;
						} else {
							count++;
							member = "." + member.substring(0, index) + " || {})" + member.substring(index);
						}
					}

					count++;
					result += member + ((idx < length - 1) ? " || {})" : ")");
				}
			}
			return new Array(count).join("(") + result;
		},
		localUrlRe = /^([a-z]+:)?\/\//i;

		extend(kendo, {
			ui: kendo.ui || {},
			fx: kendo.fx || fx,
			effects: kendo.effects || effects,
			mobile: kendo.mobile || {},
			data: kendo.data || {},
			dataviz: kendo.dataviz || { ui: { roles: {} } },
			keys: {
				INSERT: 45,
				DELETE: 46,
				BACKSPACE: 8,
				TAB: 9,
				ENTER: 13,
				ESC: 27,
				LEFT: 37,
				UP: 38,
				RIGHT: 39,
				DOWN: 40,
				END: 35,
				HOME: 36,
				SPACEBAR: 32,
				PAGEUP: 33,
				PAGEDOWN: 34,
				F2: 113,
				F10: 121,
				F12: 123,
				NUMPAD_PLUS: 107,
				NUMPAD_MINUS: 109,
				NUMPAD_DOT: 110
			},
			support: kendo.support || support,
			animate: kendo.animate || animate,
			ns: "",
			attr: function (value) {
				return "data-" + kendo.ns + value;
			},
			getShadows: getShadows,
			wrap: wrap,
			deepExtend: deepExtend,
			getComputedStyles: getComputedStyles,
			size: size,
			toCamelCase: toCamelCase,
			toHyphens: toHyphens,
			getOffset: kendo.getOffset || getOffset,
			parseEffects: kendo.parseEffects || parseEffects,
			toggleClass: kendo.toggleClass || toggleClass,
			directions: kendo.directions || directions,
			Observable: Observable,
			Class: Class,
			Template: Template,
			template: proxy(Template.compile, Template),
			render: proxy(Template.render, Template),
			stringify: proxy(JSON.stringify, JSON),
			eventTarget: eventTarget,
			htmlEncode: htmlEncode,
			isLocalUrl: function (url) {
				return url && !localUrlRe.test(url);
			},

			expr: function (expression, safe, paramName) {
				expression = expression || "";

				if (typeof safe == STRING) {
					paramName = safe;
					safe = false;
				}

				paramName = paramName || "d";

				if (expression && expression.charAt(0) !== "[") {
					expression = "." + expression;
				}

				if (safe) {
					expression = wrapExpression(expression.split("."), paramName);
				} else {
					expression = paramName + expression;
				}

				return expression;
			},

			getter: function (expression, safe) {
				return getterCache[expression] = getterCache[expression] || new Function("d", "return " + kendo.expr(expression, safe));
			},

			setter: function (expression) {
				return setterCache[expression] = setterCache[expression] || new Function("d,value", kendo.expr(expression) + "=value");
			},

			accessor: function (expression) {
				return {
					get: kendo.getter(expression),
					set: kendo.setter(expression)
				};
			},

			guid: function () {
				var id = "", i, random;

				for (i = 0; i < 32; i++) {
					random = math.random() * 16 | 0;

					if (i == 8 || i == 12 || i == 16 || i == 20) {
						id += "-";
					}
					id += (i == 12 ? 4 : (i == 16 ? (random & 3 | 8) : random)).toString(16);
				}

				return id;
			},

			roleSelector: function (role) {
				return role.replace(/(\S+)/g, "[" + kendo.attr("role") + "=$1],").slice(0, -1);
			},

			triggeredByInput: function (e) {
				return (/^(label|input|textarea|select)$/i).test(e.target.tagName);
			},

			logToConsole: function (message) {
				var console = window.console;

				if (typeof (console) != "undefined" && console.log) {
					console.log(message);
				}
			}
		});

		var Widget = Observable.extend({
			init: function (element, options) {
				var that = this;

				that.element = kendo.jQuery(element).handler(that);

				Observable.fn.init.call(that);

				options = that.options = extend(true, {}, that.options, options);

				if (!that.element.attr(kendo.attr("role"))) {
					that.element.attr(kendo.attr("role"), (options.name || "").toLowerCase());
				}

				that.element.data("kendo" + options.prefix + options.name, that);

				that.bind(that.events, options);
			},

			events: [],

			options: {
				prefix: ""
			},

			_hasBindingTarget: function () {
				return !!this.element[0].kendoBindingTarget;
			},

			_tabindex: function (target) {
				target = target || this.wrapper;

				var element = this.element,
					TABINDEX = "tabindex",
					tabindex = target.attr(TABINDEX) || element.attr(TABINDEX);

				element.removeAttr(TABINDEX);

				target.attr(TABINDEX, !isNaN(tabindex) ? tabindex : 0);
			},

			setOptions: function (options) {
				this._setEvents(options);
				$.extend(this.options, options);
			},

			_setEvents: function (options) {
				var that = this,
					idx = 0,
					length = that.events.length,
					e;

				for (; idx < length; idx++) {
					e = that.events[idx];
					if (that.options[e] && options[e]) {
						that.unbind(e, that.options[e]);
					}
				}

				that.bind(that.events, options);
			},

			resize: function (force) {
				var size = this.getSize(),
					currentSize = this._size;

				if (force || !currentSize || size.width !== currentSize.width || size.height !== currentSize.height) {
					this._resize(size);
					this.trigger("resize", size);
					this._size = size;
				}
			},

			getSize: function () {
				return kendo.dimensions(this.element);
			},

			size: function (size) {
				if (!size) {
					return this.getSize();
				} else {
					this.setSize(size);
				}
			},

			setSize: $.noop,
			_resize: $.noop,

			destroy: function () {
				var that = this;

				that.element.removeData("kendo" + that.options.prefix + that.options.name);
				that.element.removeData("handler");
				that.unbind();
			}
		});

		kendo.dimensions = function (element, dimensions) {
			var domElement = element[0];

			if (dimensions) {
				element.css(dimensions);
			}

			return { width: domElement.offsetWidth, height: domElement.offsetHeight };
		};

		kendo.notify = noop;

		var templateRegExp = /template$/i,
			jsonRegExp = /^\s*(?:\{(?:.|\r\n|\n)*\}|\[(?:.|\r\n|\n)*\])\s*$/,
			jsonFormatRegExp = /^\{(\d+)(:[^\}]+)?\}|^\[[A-Za-z_]*\]$/,
			dashRegExp = /([A-Z])/g;

		function parseOption(element, option) {
			var value;

			if (option.indexOf("data") === 0) {
				option = option.substring(4);
				option = option.charAt(0).toLowerCase() + option.substring(1);
			}

			option = option.replace(dashRegExp, "-$1");
			value = element.getAttribute("data-" + kendo.ns + option);

			if (value === null) {
				value = undefined;
			} else if (value === "null") {
				value = null;
			} else if (value === "true") {
				value = true;
			} else if (value === "false") {
				value = false;
			} else if (numberRegExp.test(value)) {
				value = parseFloat(value);
			} else if (jsonRegExp.test(value) && !jsonFormatRegExp.test(value)) {
				value = new Function("return (" + value + ")")();
			}

			return value;
		}

		function parseOptions(element, options) {
			var result = {},
				option,
				value;

			for (option in options) {
				value = parseOption(element, option);

				if (value !== undefined) {

					if (templateRegExp.test(option)) {
						value = kendo.template($("#" + value).html());
					}

					result[option] = value;
				}
			}

			return result;
		}

		kendo.initWidget = function (element, options, roles) {
			var result,
				option,
				widget,
				idx,
				length,
				role,
				value,
				dataSource;

			// Preserve backwards compatibility with (element, options, namespace) signature, where namespace was kendo.ui
			if (!roles) {
				roles = kendo.ui.roles;
			} else if (roles.roles) {
				roles = roles.roles;
			}

			element = element.nodeType ? element : element[0];

			role = element.getAttribute("data-" + kendo.ns + "role");

			if (!role) {
				return;
			}

			if (role.indexOf(".") === -1) {
				widget = roles[role];
			} else { // full namespace path - like kendo.ui.Widget
				widget = kendo.getter(role)(window);
			}

			if (!widget) {
				return;
			}

			dataSource = parseOption(element, "dataSource");

			options = $.extend({}, parseOptions(element, widget.fn.options), options);

			if (dataSource) {
				if (typeof dataSource === STRING) {
					options.dataSource = kendo.getter(dataSource)(window);
				} else {
					options.dataSource = dataSource;
				}
			}

			for (idx = 0, length = widget.fn.events.length; idx < length; idx++) {
				option = widget.fn.events[idx];

				value = parseOption(element, option);

				if (value !== undefined) {
					options[option] = kendo.getter(value)(window);
				}
			}

			result = $(element).data("kendo" + widget.fn.options.prefix + widget.fn.options.name);

			if (!result) {
				result = new widget(element, options);
			} else {
				result.setOptions(options);
			}

			return result;
		};

		kendo.rolesFromNamespaces = function (namespaces) {
			var roles = [],
				idx,
				length;

			if (!namespaces[0]) {
				namespaces = [kendo.ui, kendo.dataviz.ui];
			}

			for (idx = 0, length = namespaces.length; idx < length; idx++) {
				roles[idx] = namespaces[idx].roles;
			}

			return extend.apply(null, [{}].concat(roles.reverse()));
		};

		kendo.init = function (element) {
			var roles = kendo.rolesFromNamespaces(slice.call(arguments, 1));

			$(element).find("[data-" + kendo.ns + "role]").addBack().each(function () {
				kendo.initWidget(this, {}, roles);
			});
		};

		kendo.destroy = function (element) {
			$(element).find("[data-" + kendo.ns + "role]").addBack().each(function () {
				var widget = kendo.widgetInstance($(this));

				if (widget) {
					widget.destroy();
				}
			});
		};

		function containmentComparer(a, b) {
			return $.contains(a, b) ? -1 : 1;
		}

		function resizableWidget() {
			var widget = $(this);
			return ($.inArray(widget.attr("data-role"), ["slider", "rangeslider"]) > 0) || widget.is(":visible");
		}

		kendo.resize = function (element) {
			var widgets = $(element).find("[data-" + kendo.ns + "role]").addBack().filter(resizableWidget);

			if (!widgets.length) {
				return;
			}

			// sort widgets based on their parent-child relation
			var widgetsArray = $.makeArray(widgets);
			widgetsArray.sort(containmentComparer);

			// resize widgets
			$.each(widgetsArray, function () {
				var widget = kendo.widgetInstance($(this));
				if (widget) {
					widget.resize();
				}
			});
		};

		kendo.parseOptions = parseOptions;

		extend(kendo.ui, {
			Widget: Widget,
			roles: {},
			progress: function (container, toggle) {
				var mask = container.find(".k-loading-mask"),
					support = kendo.support,
					browser = support.browser,
					isRtl, leftRight, webkitCorrection, containerScrollLeft;

				if (toggle) {
					if (!mask.length) {
						isRtl = support.isRtl(container);
						leftRight = isRtl ? "right" : "left";
						containerScrollLeft = container.scrollLeft();
						webkitCorrection = browser.webkit ? (!isRtl ? 0 : container[0].scrollWidth - container.width() - 2 * containerScrollLeft) : 0;

						mask = $("<div class='k-loading-mask'><span class='k-loading-text'>Loading...</span><div class='k-loading-image'/><div class='k-loading-color'/></div>")
							.width("100%").height("100%")
							.css("top", container.scrollTop())
							.css(leftRight, Math.abs(containerScrollLeft) + webkitCorrection)
							.prependTo(container);
					}
				} else if (mask) {
					mask.remove();
				}
			},
			plugin: function (widget, register, prefix) {
				var name = widget.fn.options.name,
					getter;

				register = register || kendo.ui;
				prefix = prefix || "";

				register[name] = widget;

				register.roles[name.toLowerCase()] = widget;

				getter = "getKendo" + prefix + name;
				name = "kendo" + prefix + name;

				$.fn[name] = function (options) {
					var value = this,
						args;

					if (typeof options === STRING) {
						args = slice.call(arguments, 1);

						this.each(function () {
							var widget = $.data(this, name),
								method,
								result;

							if (!widget) {
								throw new Error(kendo.format("Cannot call method '{0}' of {1} before it is initialized", options, name));
							}

							method = widget[options];

							if (typeof method !== FUNCTION) {
								throw new Error(kendo.format("Cannot find method '{0}' of {1}", options, name));
							}

							result = method.apply(widget, args);

							if (result !== undefined) {
								value = result;
								return false;
							}
						});
					} else {
						this.each(function () {
							new widget(this, options);
						});
					}

					return value;
				};

				$.fn[getter] = function () {
					return this.data(name);
				};
			}
		});

		var ContainerNullObject = { bind: function () { return this; }, nullObject: true };

		var MobileWidget = Widget.extend({
			init: function (element, options) {
				Widget.fn.init.call(this, element, options);
				this.element.autoApplyNS();
				this.wrapper = this.element;
				this.element.addClass("km-widget");
			},

			destroy: function () {
				Widget.fn.destroy.call(this);
				this.element.kendoDestroy();
			},

			options: {
				prefix: "Mobile"
			},

			events: [],

			view: function () {
				var viewElement = this.element.closest(kendo.roleSelector("view splitview modalview drawer"));
				return kendo.widgetInstance(viewElement, kendo.mobile.ui) || ContainerNullObject;
			},

			viewHasNativeScrolling: function () {
				var view = this.view();
				return view && view.options.useNativeScrolling;
			},

			container: function () {
				var element = this.element.closest(kendo.roleSelector("view layout modalview drawer"));
				return kendo.widgetInstance(element, kendo.mobile.ui) || ContainerNullObject;
			}
		});

		extend(kendo.mobile, {
			init: function (element) {
				kendo.init(element, kendo.mobile.ui, kendo.ui, kendo.dataviz.ui);
			},

			appLevelNativeScrolling: function () {
				return kendo.mobile.application && kendo.mobile.application.options && kendo.mobile.application.options.useNativeScrolling;
			},

			ui: {
				Widget: MobileWidget,
				roles: {},
				plugin: function (widget) {
					kendo.ui.plugin(widget, kendo.mobile.ui, "Mobile");
				}
			}
		});

		kendo.touchScroller = function (elements, options) {
			// return the first touch scroller
			return $(elements).map(function (idx, element) {
				element = $(element);
				if (support.kineticScrollNeeded && kendo.mobile.ui.Scroller && !element.data("kendoMobileScroller")) {
					element.kendoMobileScroller(options);
					return element.data("kendoMobileScroller");
				} else {
					return false;
				}
			})[0];
		};

		kendo.preventDefault = function (e) {
			e.preventDefault();
		};

		kendo.widgetInstance = function (element, suites) {
			var role = element.data(kendo.ns + "role"),
				widgets = [], i, length;

			if (role) {
				// HACK!!! mobile view scroller widgets are instantiated on data-role="content" elements. We need to discover them when resizing.
				if (role === "content") {
					role = "scroller";
				}

				if (suites) {
					if (suites[0]) {
						for (i = 0, length = suites.length; i < length; i++) {
							widgets.push(suites[i].roles[role]);
						}
					} else {
						widgets.push(suites.roles[role]);
					}
				}
				else {
					widgets = [kendo.ui.roles[role], kendo.dataviz.ui.roles[role], kendo.mobile.ui.roles[role]];
				}

				if (role.indexOf(".") >= 0) {
					widgets = [kendo.getter(role)(window)];
				}

				for (i = 0, length = widgets.length; i < length; i++) {
					var widget = widgets[i];
					if (widget) {
						var instance = element.data("kendo" + widget.fn.options.prefix + widget.fn.options.name);
						if (instance) {
							return instance;
						}
					}
				}
			}
		};

		kendo.onResize = function (callback) {
			var handler = callback;
			if (support.mobileOS.android) {
				handler = function () { setTimeout(callback, 600); };
			}

			$(window).on(support.resize, handler);
			return handler;
		};

		kendo.unbindResize = function (callback) {
			$(window).off(support.resize, callback);
		};

		kendo.attrValue = function (element, key) {
			return element.data(kendo.ns + key);
		};

		kendo.days = {
			Sunday: 0,
			Monday: 1,
			Tuesday: 2,
			Wednesday: 3,
			Thursday: 4,
			Friday: 5,
			Saturday: 6
		};

		function focusable(element, isTabIndexNotNaN) {
			var nodeName = element.nodeName.toLowerCase();

			return (/input|select|textarea|button|object/.test(nodeName) ?
					!element.disabled :
					"a" === nodeName ?
					element.href || isTabIndexNotNaN :
					isTabIndexNotNaN
				   ) &&
				visible(element);
		}

		function visible(element) {
			return !$(element).parents().addBack().filter(function () {
				return $.css(this, "visibility") === "hidden" || $.expr.filters.hidden(this);
			}).length;
		}

		$.extend($.expr[":"], {
			kendoFocusable: function (element) {
				var idx = $.attr(element, "tabindex");
				return focusable(element, !isNaN(idx) && idx > -1);
			}
		});

		var MOUSE_EVENTS = ["mousedown", "mousemove", "mouseenter", "mouseleave", "mouseover", "mouseout", "mouseup", "click"];
		var EXCLUDE_BUST_CLICK_SELECTOR = "label, input, [data-rel=external]";

		var MouseEventNormalizer = {
			setupMouseMute: function () {
				var idx = 0,
					length = MOUSE_EVENTS.length,
					element = document.documentElement;

				if (MouseEventNormalizer.mouseTrap || !support.eventCapture) {
					return;
				}

				MouseEventNormalizer.mouseTrap = true;

				MouseEventNormalizer.bustClick = false;
				MouseEventNormalizer.captureMouse = false;

				var handler = function (e) {
					if (MouseEventNormalizer.captureMouse) {
						if (e.type === "click") {
							if (MouseEventNormalizer.bustClick && !$(e.target).is(EXCLUDE_BUST_CLICK_SELECTOR)) {
								e.preventDefault();
								e.stopPropagation();
							}
						} else {
							e.stopPropagation();
						}
					}
				};

				for (; idx < length; idx++) {
					element.addEventListener(MOUSE_EVENTS[idx], handler, true);
				}
			},

			muteMouse: function (e) {
				MouseEventNormalizer.captureMouse = true;
				if (e.data.bustClick) {
					MouseEventNormalizer.bustClick = true;
				}
				clearTimeout(MouseEventNormalizer.mouseTrapTimeoutID);
			},

			unMuteMouse: function () {
				clearTimeout(MouseEventNormalizer.mouseTrapTimeoutID);
				MouseEventNormalizer.mouseTrapTimeoutID = setTimeout(function () {
					MouseEventNormalizer.captureMouse = false;
					MouseEventNormalizer.bustClick = false;
				}, 400);
			}
		};

		var eventMap = {
			down: "touchstart mousedown",
			move: "mousemove touchmove",
			up: "mouseup touchend touchcancel",
			cancel: "mouseleave touchcancel"
		};

		if (support.touch && (support.mobileOS.ios || support.mobileOS.android)) {
			eventMap = {
				down: "touchstart",
				move: "touchmove",
				up: "touchend touchcancel",
				cancel: "touchcancel"
			};
		} else if (support.pointers) {
			eventMap = {
				down: "pointerdown",
				move: "pointermove",
				up: "pointerup",
				cancel: "pointercancel pointerleave"
			};
		} else if (support.msPointers) {
			eventMap = {
				down: "MSPointerDown",
				move: "MSPointerMove",
				up: "MSPointerUp",
				cancel: "MSPointerCancel MSPointerLeave"
			};
		}

		if (support.msPointers && !("onmspointerenter" in window)) { // IE10
			// Create MSPointerEnter/MSPointerLeave events using mouseover/out and event-time checks
			$.each({
				MSPointerEnter: "MSPointerOver",
				MSPointerLeave: "MSPointerOut"
			}, function (orig, fix) {
				$.event.special[orig] = {
					delegateType: fix,
					bindType: fix,

					handle: function (event) {
						var ret,
							target = this,
							related = event.relatedTarget,
							handleObj = event.handleObj;

						// For mousenter/leave call the handler if related is outside the target.
						// NB: No relatedTarget if the mouse left/entered the browser window
						if (!related || (related !== target && !$.contains(target, related))) {
							event.type = handleObj.origType;
							ret = handleObj.handler.apply(this, arguments);
							event.type = fix;
						}
						return ret;
					}
				};
			});
		}


		var getEventMap = function (e) { return (eventMap[e] || e); },
			eventRegEx = /([^ ]+)/g;

		kendo.applyEventMap = function (events, ns) {
			events = events.replace(eventRegEx, getEventMap);

			if (ns) {
				events = events.replace(eventRegEx, "$1." + ns);
			}

			return events;
		};

		var on = $.fn.on;

		function kendoJQuery(selector, context) {
			return new kendoJQuery.fn.init(selector, context);
		}

		extend(true, kendoJQuery, $);

		kendoJQuery.fn = kendoJQuery.prototype = new $();

		kendoJQuery.fn.constructor = kendoJQuery;

		kendoJQuery.fn.init = function (selector, context) {
			if (context && context instanceof $ && !(context instanceof kendoJQuery)) {
				context = kendoJQuery(context);
			}

			return $.fn.init.call(this, selector, context, rootjQuery);
		};

		kendoJQuery.fn.init.prototype = kendoJQuery.fn;

		var rootjQuery = kendoJQuery(document);

		extend(kendoJQuery.fn, {
			handler: function (handler) {
				this.data("handler", handler);
				return this;
			},

			autoApplyNS: function (ns) {
				this.data("kendoNS", ns || kendo.guid());
				return this;
			},

			on: function () {
				var that = this,
					ns = that.data("kendoNS");

				// support for event map signature
				if (arguments.length === 1) {
					return on.call(that, arguments[0]);
				}

				var context = that,
					args = slice.call(arguments);

				if (typeof args[args.length - 1] === UNDEFINED) {
					args.pop();
				}

				var callback = args[args.length - 1],
					events = kendo.applyEventMap(args[0], ns);

				// setup mouse trap
				if (support.mouseAndTouchPresent && events.search(/mouse|click/) > -1 && this[0] !== document.documentElement) {
					MouseEventNormalizer.setupMouseMute();

					var selector = args.length === 2 ? null : args[1],
						bustClick = events.indexOf("click") > -1 && events.indexOf("touchend") > -1;

					on.call(this,
						{
							touchstart: MouseEventNormalizer.muteMouse,
							touchend: MouseEventNormalizer.unMuteMouse
						},
						selector,
						{
							bustClick: bustClick
						});
				}

				if (typeof callback === STRING) {
					context = that.data("handler");
					callback = context[callback];

					args[args.length - 1] = function (e) {
						callback.call(context, e);
					};
				}

				args[0] = events;

				on.apply(that, args);

				return that;
			},

			kendoDestroy: function (ns) {
				ns = ns || this.data("kendoNS");

				if (ns) {
					this.off("." + ns);
				}

				return this;
			}
		});

		kendo.jQuery = kendoJQuery;
		kendo.eventMap = eventMap;

		kendo.timezone = (function () {
			var months = { Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11 };
			var days = { Sun: 0, Mon: 1, Tue: 2, Wed: 3, Thu: 4, Fri: 5, Sat: 6 };

			function ruleToDate(year, rule) {
				var date;
				var targetDay;
				var ourDay;
				var month = rule[3];
				var on = rule[4];
				var time = rule[5];
				var cache = rule[8];

				if (!cache) {
					rule[8] = cache = {};
				}

				if (cache[year]) {
					return cache[year];
				}

				if (!isNaN(on)) {
					date = new Date(Date.UTC(year, months[month], on, time[0], time[1], time[2], 0));
				} else if (on.indexOf("last") === 0) {
					date = new Date(Date.UTC(year, months[month] + 1, 1, time[0] - 24, time[1], time[2], 0));

					targetDay = days[on.substr(4, 3)];
					ourDay = date.getUTCDay();

					date.setUTCDate(date.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));
				} else if (on.indexOf(">=") >= 0) {
					date = new Date(Date.UTC(year, months[month], on.substr(5), time[0], time[1], time[2], 0));

					targetDay = days[on.substr(0, 3)];
					ourDay = date.getUTCDay();

					date.setUTCDate(date.getUTCDate() + targetDay - ourDay + (targetDay < ourDay ? 7 : 0));
				}

				return cache[year] = date;
			}

			function findRule(utcTime, rules, zone) {
				rules = rules[zone];

				if (!rules) {
					var time = zone.split(":");
					var offset = 0;

					if (time.length > 1) {
						offset = time[0] * 60 + Number(time[1]);
					}

					return [-1000000, 'max', '-', 'Jan', 1, [0, 0, 0], offset, '-'];
				}

				var year = new Date(utcTime).getUTCFullYear();

				rules = jQuery.grep(rules, function (rule) {
					var from = rule[0];
					var to = rule[1];

					return from <= year && (to >= year || (from == year && to == "only") || to == "max");
				});

				rules.push(utcTime);

				rules.sort(function (a, b) {
					if (typeof a != "number") {
						a = Number(ruleToDate(year, a));
					}

					if (typeof b != "number") {
						b = Number(ruleToDate(year, b));
					}

					return a - b;
				});

				var rule = rules[jQuery.inArray(utcTime, rules) - 1] || rules[rules.length - 1];

				return isNaN(rule) ? rule : null;
			}

			function findZone(utcTime, zones, timezone) {
				var zoneRules = zones[timezone];

				if (typeof zoneRules === "string") {
					zoneRules = zones[zoneRules];
				}

				if (!zoneRules) {
					throw new Error('Timezone "' + timezone + '" is either incorrect, or kendo.timezones.min.js is not included.');
				}

				for (var idx = zoneRules.length - 1; idx >= 0; idx--) {
					var until = zoneRules[idx][3];

					if (until && utcTime > until) {
						break;
					}
				}

				var zone = zoneRules[idx + 1];

				if (!zone) {
					throw new Error('Timezone "' + timezone + '" not found on ' + utcTime + ".");
				}

				return zone;
			}

			function zoneAndRule(utcTime, zones, rules, timezone) {
				if (typeof utcTime != NUMBER) {
					utcTime = Date.UTC(utcTime.getFullYear(), utcTime.getMonth(),
						utcTime.getDate(), utcTime.getHours(), utcTime.getMinutes(),
						utcTime.getSeconds(), utcTime.getMilliseconds());
				}

				var zone = findZone(utcTime, zones, timezone);

				return {
					zone: zone,
					rule: findRule(utcTime, rules, zone[1])
				};
			}

			function offset(utcTime, timezone) {
				if (timezone == "Etc/UTC" || timezone == "Etc/GMT") {
					return 0;
				}

				var info = zoneAndRule(utcTime, this.zones, this.rules, timezone);
				var zone = info.zone;
				var rule = info.rule;

				return rule ? zone[0] - rule[6] : zone[0];
			}

			function abbr(utcTime, timezone) {
				var info = zoneAndRule(utcTime, this.zones, this.rules, timezone);
				var zone = info.zone;
				var rule = info.rule;

				var base = zone[2];

				if (base.indexOf("/") >= 0) {
					return base.split("/")[rule && +rule[6] ? 1 : 0];
				} else if (base.indexOf("%s") >= 0) {
					return base.replace("%s", (!rule || rule[7] == "-") ? '' : rule[7]);
				}

				return base;
			}

			function convert(date, fromOffset, toOffset) {
				if (typeof fromOffset == STRING) {
					fromOffset = this.offset(date, fromOffset);
				}

				if (typeof toOffset == STRING) {
					toOffset = this.offset(date, toOffset);
				}

				var fromLocalOffset = date.getTimezoneOffset();

				date = new Date(date.getTime() + (fromOffset - toOffset) * 60000);

				var toLocalOffset = date.getTimezoneOffset();

				return new Date(date.getTime() + (toLocalOffset - fromLocalOffset) * 60000);
			}

			function apply(date, timezone) {
				return this.convert(date, date.getTimezoneOffset(), timezone);
			}

			function remove(date, timezone) {
				return this.convert(date, timezone, date.getTimezoneOffset());
			}

			function toLocalDate(time) {
				return this.apply(new Date(time), "Etc/UTC");
			}

			return {
				zones: {},
				rules: {},
				offset: offset,
				convert: convert,
				apply: apply,
				remove: remove,
				abbr: abbr,
				toLocalDate: toLocalDate
			};
		})();

		kendo.date = (function () {
			var MS_PER_MINUTE = 60000,
				MS_PER_DAY = 86400000;

			function adjustDST(date, hours) {
				if (hours === 0 && date.getHours() === 23) {
					date.setHours(date.getHours() + 2);
					return true;
				}

				return false;
			}

			function setDayOfWeek(date, day, dir) {
				var hours = date.getHours();

				dir = dir || 1;
				day = ((day - date.getDay()) + (7 * dir)) % 7;

				date.setDate(date.getDate() + day);
				adjustDST(date, hours);
			}

			function dayOfWeek(date, day, dir) {
				date = new Date(date);
				setDayOfWeek(date, day, dir);
				return date;
			}

			function firstDayOfMonth(date) {
				return new Date(
					date.getFullYear(),
					date.getMonth(),
					1
				);
			}

			function lastDayOfMonth(date) {
				var last = new Date(date.getFullYear(), date.getMonth() + 1, 0),
					first = firstDayOfMonth(date),
					timeOffset = Math.abs(last.getTimezoneOffset() - first.getTimezoneOffset());

				if (timeOffset) {
					last.setHours(first.getHours() + (timeOffset / 60));
				}

				return last;
			}

			function getDate(date) {
				date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
				adjustDST(date, 0);
				return date;
			}

			function toUtcTime(date) {
				return Date.UTC(date.getFullYear(), date.getMonth(),
							date.getDate(), date.getHours(), date.getMinutes(),
							date.getSeconds(), date.getMilliseconds());
			}

			function getMilliseconds(date) {
				return date.getTime() - getDate(date);
			}

			function isInTimeRange(value, min, max) {
				var msMin = getMilliseconds(min),
					msMax = getMilliseconds(max),
					msValue;

				if (!value || msMin == msMax) {
					return true;
				}

				if (min >= max) {
					max += MS_PER_DAY;
				}

				msValue = getMilliseconds(value);

				if (msMin > msValue) {
					msValue += MS_PER_DAY;
				}

				if (msMax < msMin) {
					msMax += MS_PER_DAY;
				}

				return msValue >= msMin && msValue <= msMax;
			}

			function isInDateRange(value, min, max) {
				var msMin = min.getTime(),
					msMax = max.getTime(),
					msValue;

				if (msMin >= msMax) {
					msMax += MS_PER_DAY;
				}

				msValue = value.getTime();

				return msValue >= msMin && msValue <= msMax;
			}

			function addDays(date, offset) {
				var hours = date.getHours();
				date = new Date(date);

				setTime(date, offset * MS_PER_DAY);
				adjustDST(date, hours);
				return date;
			}

			function setTime(date, milliseconds, ignoreDST) {
				var offset = date.getTimezoneOffset();
				var difference;

				date.setTime(date.getTime() + milliseconds);

				if (!ignoreDST) {
					difference = date.getTimezoneOffset() - offset;
					date.setTime(date.getTime() + difference * MS_PER_MINUTE);
				}
			}

			function today() {
				return getDate(new Date());
			}

			function isToday(date) {
				return getDate(date).getTime() == today().getTime();
			}

			function toInvariantTime(date) {
				var staticDate = new Date(1980, 1, 1, 0, 0, 0);

				if (date) {
					staticDate.setHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
				}

				return staticDate;
			}

			return {
				adjustDST: adjustDST,
				dayOfWeek: dayOfWeek,
				setDayOfWeek: setDayOfWeek,
				getDate: getDate,
				isInDateRange: isInDateRange,
				isInTimeRange: isInTimeRange,
				isToday: isToday,
				nextDay: function (date) {
					return addDays(date, 1);
				},
				previousDay: function (date) {
					return addDays(date, -1);
				},
				toUtcTime: toUtcTime,
				MS_PER_DAY: MS_PER_DAY,
				MS_PER_HOUR: 60 * MS_PER_MINUTE,
				MS_PER_MINUTE: MS_PER_MINUTE,
				setTime: setTime,
				addDays: addDays,
				today: today,
				toInvariantTime: toInvariantTime,
				firstDayOfMonth: firstDayOfMonth,
				lastDayOfMonth: lastDayOfMonth,
				getMilliseconds: getMilliseconds
				//TODO methods: combine date portion and time portion from arguments - date1, date 2
			};
		})();


		kendo.stripWhitespace = function (element) {
			if (document.createNodeIterator) {
				var iterator = document.createNodeIterator(element, NodeFilter.SHOW_TEXT, function (node) {
					return node.parentNode == element ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
				}, false);

				while (iterator.nextNode()) {
					if (iterator.referenceNode && !iterator.referenceNode.textContent.trim()) {
						iterator.referenceNode.parentNode.removeChild(iterator.referenceNode);
					}
				}
			} else { // IE7/8 support
				for (var i = 0; i < element.childNodes.length; i++) {
					var child = element.childNodes[i];

					if (child.nodeType == 3 && !/\S/.test(child.nodeValue)) {
						element.removeChild(child);
						i--;
					}

					if (child.nodeType == 1) {
						kendo.stripWhitespace(child);
					}
				}
			}
		};

		var animationFrame = window.requestAnimationFrame ||
							  window.webkitRequestAnimationFrame ||
							  window.mozRequestAnimationFrame ||
							  window.oRequestAnimationFrame ||
							  window.msRequestAnimationFrame ||
							  function (callback) { setTimeout(callback, 1000 / 60); };

		kendo.animationFrame = function (callback) {
			animationFrame.call(window, callback);
		};

		var animationQueue = [];

		kendo.queueAnimation = function (callback) {
			animationQueue[animationQueue.length] = callback;
			if (animationQueue.length === 1) {
				kendo.runNextAnimation();
			}
		};

		kendo.runNextAnimation = function () {
			kendo.animationFrame(function () {
				if (animationQueue[0]) {
					animationQueue.shift()();
					if (animationQueue[0]) {
						kendo.runNextAnimation();
					}
				}
			});
		};

		kendo.parseQueryStringParams = function (url) {
			var queryString = url.split('?')[1] || "",
				params = {},
				paramParts = queryString.split(/&|=/),
				length = paramParts.length,
				idx = 0;

			for (; idx < length; idx += 2) {
				if (paramParts[idx] !== "") {
					params[decodeURIComponent(paramParts[idx])] = decodeURIComponent(paramParts[idx + 1]);
				}
			}

			return params;
		};

		kendo.elementUnderCursor = function (e) {
			return document.elementFromPoint(e.x.client, e.y.client);
		};

		kendo.wheelDeltaY = function (jQueryEvent) {
			var e = jQueryEvent.originalEvent,
				deltaY = e.wheelDeltaY,
				delta;

			if (e.wheelDelta) { // Webkit and IE
				if (deltaY === undefined || deltaY) { // IE does not have deltaY, thus always scroll (horizontal scrolling is treated as vertical)
					delta = e.wheelDelta;
				}
			} else if (e.detail && e.axis === e.VERTICAL_AXIS) { // Firefox and Opera
				delta = (-e.detail) * 10;
			}

			return delta;
		};

		kendo.caret = function (element, start, end) {
			var rangeElement;
			var isPosition = start !== undefined;

			if (end === undefined) {
				end = start;
			}

			if (element[0]) {
				element = element[0];
			}

			if (isPosition && element.disabled) {
				return;
			}

			try {
				if (element.selectionStart !== undefined) {
					if (isPosition) {
						element.focus();
						element.setSelectionRange(start, end);
					} else {
						start = [element.selectionStart, element.selectionEnd];
					}
				} else if (document.selection) {
					if ($(element).is(":visible")) {
						element.focus();
					}

					rangeElement = element.createTextRange();

					if (isPosition) {
						rangeElement.collapse(true);
						rangeElement.moveStart("character", start);
						rangeElement.moveEnd("character", end - start);
						rangeElement.select();
					} else {
						var rangeDuplicated = rangeElement.duplicate(),
							selectionStart, selectionEnd;

						rangeElement.moveToBookmark(document.selection.createRange().getBookmark());
						rangeDuplicated.setEndPoint('EndToStart', rangeElement);
						selectionStart = rangeDuplicated.text.length;
						selectionEnd = selectionStart + rangeElement.text.length;

						start = [selectionStart, selectionEnd];
					}
				}
			} catch (e) {
				/* element is not focused or it is not in the DOM */
				start = [];
			}

			return start;
		};

	})(jQuery);

return window.kendo;

}, typeof define == 'function' && define.amd ? define : function(_, f){ f(); });
/*
* Kendo UI v2014.1.416 (http://www.telerik.com/kendo-ui)
* Copyright 2014 Telerik AD. All rights reserved.
*
* Kendo UI commercial licenses may be obtained at
* http://www.telerik.com/purchase/license-agreement/kendo-ui-complete
* If you do not own a commercial license, this file shall be governed by the trial license terms.
*/
(function(f, define){
    define([ "./kendo.core" ], f);
})(function(){

	(function ($, undefined) {
		var kendo = window.kendo,
			ui = kendo.ui,
			Widget = ui.Widget,
			support = kendo.support,
			getOffset = kendo.getOffset,
			activeElement = kendo._activeElement,
			OPEN = "open",
			CLOSE = "close",
			DEACTIVATE = "deactivate",
			ACTIVATE = "activate",
			CENTER = "center",
			LEFT = "left",
			RIGHT = "right",
			TOP = "top",
			BOTTOM = "bottom",
			ABSOLUTE = "absolute",
			HIDDEN = "hidden",
			BODY = "body",
			LOCATION = "location",
			POSITION = "position",
			VISIBLE = "visible",
			EFFECTS = "effects",
			ACTIVE = "k-state-active",
			ACTIVEBORDER = "k-state-border",
			ACTIVEBORDERREGEXP = /k-state-border-(\w+)/,
			ACTIVECHILDREN = ".k-picker-wrap, .k-dropdown-wrap, .k-link",
			MOUSEDOWN = "down",
			WINDOW = $(window),
			DOCUMENT_ELEMENT = $(document.documentElement),
			RESIZE_SCROLL = "resize scroll",
			cssPrefix = support.transitions.css,
			TRANSFORM = cssPrefix + "transform",
			extend = $.extend,
			NS = ".kendoPopup",
			styles = ["font-size",
					  "font-family",
					  "font-stretch",
					  "font-style",
					  "font-weight",
					  "line-height"];

		function contains(container, target) {
			return container === target || $.contains(container, target);
		}

		var Popup = Widget.extend({
			init: function (element, options) {
				var that = this, parentPopup;

				options = options || {};

				if (options.isRtl) {
					options.origin = options.origin || BOTTOM + " " + RIGHT;
					options.position = options.position || TOP + " " + RIGHT;
				}

				Widget.fn.init.call(that, element, options);

				element = that.element;
				options = that.options;

				that.collisions = options.collision ? options.collision.split(" ") : [];

				if (that.collisions.length === 1) {
					that.collisions.push(that.collisions[0]);
				}

				parentPopup = $(that.options.anchor).closest(".k-popup,.k-group").filter(":not([class^=km-])"); // When popup is in another popup, make it relative.
				options.appendTo = $($(options.appendTo)[0] || parentPopup[0] || BODY);

				that.element.hide()
					.addClass("k-popup k-group k-reset")
					.toggleClass("k-rtl", !!options.isRtl)
					.css({ position: ABSOLUTE })
					.appendTo(options.appendTo)
					.on("mouseenter" + NS, function () {
						that._hovered = true;
					})
					.on("mouseleave" + NS, function () {
						that._hovered = false;
					});

				that.wrapper = $();

				if (options.animation === false) {
					options.animation = { open: { effects: {} }, close: { hide: true, effects: {} } };
				}

				extend(options.animation.open, {
					complete: function () {
						that.wrapper.css({ overflow: VISIBLE }); // Forcing refresh causes flickering in mobile.
						that.trigger(ACTIVATE);
					}
				});

				extend(options.animation.close, {
					complete: function () {
						that.wrapper.hide();

						var location = that.wrapper.data(LOCATION),
							anchor = $(options.anchor),
							direction, dirClass;

						if (location) {
							that.wrapper.css(location);
						}

						if (options.anchor != BODY) {
							direction = (anchor[0].className.match(ACTIVEBORDERREGEXP) || ["", "down"])[1];
							dirClass = ACTIVEBORDER + "-" + direction;

							anchor
								.removeClass(dirClass)
								.children(ACTIVECHILDREN)
								.removeClass(ACTIVE)
								.removeClass(dirClass);

							element.removeClass(ACTIVEBORDER + "-" + kendo.directions[direction].reverse);
						}

						that._closing = false;
						that.trigger(DEACTIVATE);
					}
				});

				that._mousedownProxy = function (e) {
					that._mousedown(e);
				};

				that._resizeProxy = function (e) {
					that._resize(e);
				};

				if (options.toggleTarget) {
					$(options.toggleTarget).on(options.toggleEvent + NS, $.proxy(that.toggle, that));
				}
			},

			events: [
				OPEN,
				ACTIVATE,
				CLOSE,
				DEACTIVATE
			],

			options: {
				name: "Popup",
				toggleEvent: "click",
				origin: BOTTOM + " " + LEFT,
				position: TOP + " " + LEFT,
				anchor: BODY,
				collision: "flip fit",
				viewport: window,
				copyAnchorStyles: true,
				autosize: false,
				modal: false,
				animation: {
					open: {
						effects: "slideIn:down",
						transition: true,
						duration: 200
					},
					close: { // if close animation effects are defined, they will be used instead of open.reverse
						duration: 100,
						hide: true
					}
				}
			},

			destroy: function () {
				var that = this,
					options = that.options,
					element = that.element.off(NS),
					parent;

				Widget.fn.destroy.call(that);

				if (options.toggleTarget) {
					$(options.toggleTarget).off(NS);
				}

				if (!options.modal) {
					DOCUMENT_ELEMENT.unbind(MOUSEDOWN, that._mousedownProxy);
					WINDOW.unbind(RESIZE_SCROLL, that._resizeProxy);
				}

				kendo.destroy(that.element.children());
				element.removeData();

				if (options.appendTo[0] === document.body) {
					parent = element.parent(".k-animation-container");

					if (parent[0]) {
						parent.remove();
					} else {
						element.remove();
					}
				}
			},

			open: function (x, y) {
				var that = this,
					fixed = { isFixed: !isNaN(parseInt(y, 10)), x: x, y: y },
					element = that.element,
					options = that.options,
					direction = "down",
					animation, wrapper,
					anchor = $(options.anchor),
					mobile = element[0] && element.hasClass("km-widget");

				if (!that.visible()) {
					if (options.copyAnchorStyles) {
						if (mobile && styles[0] == "font-size") {
							styles.shift();
						}
						element.css(kendo.getComputedStyles(anchor[0], styles));
					}

					if (element.data("animating") || that.trigger(OPEN)) {
						return;
					}

					if (!options.modal) {
						DOCUMENT_ELEMENT.unbind(MOUSEDOWN, that._mousedownProxy)
									.bind(MOUSEDOWN, that._mousedownProxy);

						// this binding hangs iOS in editor
						if (!(support.mobileOS.ios || support.mobileOS.android)) {
							WINDOW.unbind(RESIZE_SCROLL, that._resizeProxy)
								  .bind(RESIZE_SCROLL, that._resizeProxy);
						}
					}

					that.wrapper = wrapper = kendo.wrap(element, options.autosize)
											.css({
												overflow: HIDDEN,
												display: "block",
												position: ABSOLUTE
											});

					if (support.mobileOS.android) {
						wrapper.add(anchor).css(TRANSFORM, "translatez(0)"); // Android is VERY slow otherwise. Should be tested in other droids as well since it may cause blur.
					}

					wrapper.css(POSITION);

					if ($(options.appendTo)[0] == document.body) {
						wrapper.css(TOP, "-10000px");
					}

					animation = extend(true, {}, options.animation.open);
					that.flipped = that._position(fixed);
					animation.effects = kendo.parseEffects(animation.effects, that.flipped);

					direction = animation.effects.slideIn ? animation.effects.slideIn.direction : direction;

					if (options.anchor != BODY) {
						var dirClass = ACTIVEBORDER + "-" + direction;

						element.addClass(ACTIVEBORDER + "-" + kendo.directions[direction].reverse);

						anchor
							.addClass(dirClass)
							.children(ACTIVECHILDREN)
							.addClass(ACTIVE)
							.addClass(dirClass);
					}

					element.data(EFFECTS, animation.effects)
						   .kendoStop(true)
						   .kendoAnimate(animation);
				}
			},

			toggle: function () {
				var that = this;

				that[that.visible() ? CLOSE : OPEN]();
			},

			visible: function () {
				return this.element.is(":" + VISIBLE);
			},

			close: function () {
				var that = this,
					options = that.options, wrap,
					animation, openEffects, closeEffects;

				if (that.visible()) {
					wrap = (that.wrapper[0] ? that.wrapper : kendo.wrap(that.element).hide());

					if (that._closing || that.trigger(CLOSE)) {
						return;
					}

					// Close all inclusive popups.
					that.element.find(".k-popup").each(function () {
						var that = $(this),
							popup = that.data("kendoPopup");

						if (popup) {
							popup.close();
						}
					});

					DOCUMENT_ELEMENT.unbind(MOUSEDOWN, that._mousedownProxy);
					WINDOW.unbind(RESIZE_SCROLL, that._resizeProxy);

					animation = extend(true, {}, options.animation.close);
					openEffects = that.element.data(EFFECTS);
					closeEffects = animation.effects;

					if (!closeEffects && !kendo.size(closeEffects) && openEffects && kendo.size(openEffects)) {
						animation.effects = openEffects;
						animation.reverse = true;
					}

					that._closing = true;

					that.element.kendoStop(true);
					wrap.css({ overflow: HIDDEN }); // stop callback will remove hidden overflow
					that.element.kendoAnimate(animation);
				}
			},

			_resize: function (e) {
				var that = this;

				if (e.type === "resize") {
					clearTimeout(that._resizeTimeout);
					that._resizeTimeout = setTimeout(function () {
						that._position();
						that._resizeTimeout = null;
					}, 50);
				} else {
					if (!that._hovered && !contains(that.element[0], activeElement())) {
						that.close();
					}
				}
			},

			_mousedown: function (e) {
				var that = this,
					container = that.element[0],
					options = that.options,
					anchor = $(options.anchor)[0],
					toggleTarget = options.toggleTarget,
					target = kendo.eventTarget(e),
					popup = $(target).closest(".k-popup"),
					mobile = popup.parent().parent(".km-shim").length;

				popup = popup[0];
				if (!mobile && popup && popup !== that.element[0]) {
					return;
				}

				// This MAY result in popup not closing in certain cases.
				if ($(e.target).closest("a").data("rel") === "popover") {
					return;
				}

				if (!contains(container, target) && !contains(anchor, target) && !(toggleTarget && contains($(toggleTarget)[0], target))) {
					that.close();
				}
			},

			_fit: function (position, size, viewPortSize) {
				var output = 0;

				if (position + size > viewPortSize) {
					output = viewPortSize - (position + size);
				}

				if (position < 0) {
					output = -position;
				}

				return output;
			},

			_flip: function (offset, size, anchorSize, viewPortSize, origin, position, boxSize) {
				var output = 0;
				boxSize = boxSize || size;

				if (position !== origin && position !== CENTER && origin !== CENTER) {
					if (offset + boxSize > viewPortSize) {
						output += -(anchorSize + size);
					}

					if (offset + output < 0) {
						output += anchorSize + size;
					}
				}
				return output;
			},

			_position: function (fixed) {
				var that = this,
					element = that.element.css(POSITION, ""),
					wrapper = that.wrapper,
					options = that.options,
					viewport = $(options.viewport),
					viewportOffset = viewport.offset(),
					anchor = $(options.anchor),
					origins = options.origin.toLowerCase().split(" "),
					positions = options.position.toLowerCase().split(" "),
					collisions = that.collisions,
					zoomLevel = support.zoomLevel(),
					siblingContainer, parents,
					parentZIndex, zIndex = 10002,
					isWindow = !!((viewport[0] == window) && window.innerWidth && (zoomLevel <= 1.02)),
					idx = 0, length, viewportWidth, viewportHeight;

				// $(window).height() uses documentElement to get the height
				viewportWidth = isWindow ? window.innerWidth : viewport.width();
				viewportHeight = isWindow ? window.innerHeight : viewport.height();

				siblingContainer = anchor.parents().filter(wrapper.siblings());

				if (siblingContainer[0]) {
					parentZIndex = Number($(siblingContainer).css("zIndex"));
					if (parentZIndex) {
						zIndex = parentZIndex + 1;
					} else {
						parents = anchor.parentsUntil(siblingContainer);
						for (length = parents.length; idx < length; idx++) {
							parentZIndex = Number($(parents[idx]).css("zIndex"));
							if (parentZIndex && zIndex < parentZIndex) {
								zIndex = parentZIndex + 1;
							}
						}
					}
				}

				wrapper.css("zIndex", zIndex);

				if (fixed && fixed.isFixed) {
					wrapper.css({ left: fixed.x, top: fixed.y });
				} else {
					wrapper.css(that._align(origins, positions));
				}

				var pos = getOffset(wrapper, POSITION, anchor[0] === wrapper.offsetParent()[0]),
					offset = getOffset(wrapper),
					anchorParent = anchor.offsetParent().parent(".k-animation-container,.k-popup,.k-group"); // If the parent is positioned, get the current positions

				if (anchorParent.length) {
					pos = getOffset(wrapper, POSITION, true);
					offset = getOffset(wrapper);
				}

				if (viewport[0] === window) {
					offset.top -= (window.pageYOffset || document.documentElement.scrollTop || 0);
					offset.left -= (window.pageXOffset || document.documentElement.scrollLeft || 0);
				}
				else {
					offset.top -= viewportOffset.top;
					offset.left -= viewportOffset.left;
				}

				if (!that.wrapper.data(LOCATION)) { // Needed to reset the popup location after every closure - fixes the resize bugs.
					wrapper.data(LOCATION, extend({}, pos));
				}

				var offsets = extend({}, offset),
					location = extend({}, pos);

				if (collisions[0] === "fit") {
					location.top += that._fit(offsets.top, wrapper.outerHeight(), viewportHeight / zoomLevel);
				}

				if (collisions[1] === "fit") {
					location.left += that._fit(offsets.left, wrapper.outerWidth(), viewportWidth / zoomLevel);
				}

				var flipPos = extend({}, location);

				if (collisions[0] === "flip") {
					location.top += that._flip(offsets.top, element.outerHeight(), anchor.outerHeight(), viewportHeight / zoomLevel, origins[0], positions[0], wrapper.outerHeight());
				}

				if (collisions[1] === "flip") {
					location.left += that._flip(offsets.left, element.outerWidth(), anchor.outerWidth(), viewportWidth / zoomLevel, origins[1], positions[1], wrapper.outerWidth());
				}

				element.css(POSITION, ABSOLUTE);
				wrapper.css(location);

				return (location.left != flipPos.left || location.top != flipPos.top);
			},

			_align: function (origin, position) {
				var that = this,
					element = that.wrapper,
					anchor = $(that.options.anchor),
					verticalOrigin = origin[0],
					horizontalOrigin = origin[1],
					verticalPosition = position[0],
					horizontalPosition = position[1],
					anchorOffset = getOffset(anchor),
					appendTo = $(that.options.appendTo),
					appendToOffset,
					width = element.outerWidth(),
					height = element.outerHeight(),
					anchorWidth = anchor.outerWidth(),
					anchorHeight = anchor.outerHeight(),
					top = anchorOffset.top,
					left = anchorOffset.left,
					round = Math.round;

				if (appendTo[0] != document.body) {
					appendToOffset = getOffset(appendTo);
					top -= appendToOffset.top;
					left -= appendToOffset.left;
				}


				if (verticalOrigin === BOTTOM) {
					top += anchorHeight;
				}

				if (verticalOrigin === CENTER) {
					top += round(anchorHeight / 2);
				}

				if (verticalPosition === BOTTOM) {
					top -= height;
				}

				if (verticalPosition === CENTER) {
					top -= round(height / 2);
				}

				if (horizontalOrigin === RIGHT) {
					left += anchorWidth;
				}

				if (horizontalOrigin === CENTER) {
					left += round(anchorWidth / 2);
				}

				if (horizontalPosition === RIGHT) {
					left -= width;
				}

				if (horizontalPosition === CENTER) {
					left -= round(width / 2);
				}

				return {
					top: top,
					left: left
				};
			}
		});

		ui.plugin(Popup);
	})(window.kendo.jQuery);

return window.kendo;

}, typeof define == 'function' && define.amd ? define : function(_, f){ f(); });
/*
* Kendo UI v2014.1.416 (http://www.telerik.com/kendo-ui)
* Copyright 2014 Telerik AD. All rights reserved.
*
* Kendo UI commercial licenses may be obtained at
* http://www.telerik.com/purchase/license-agreement/kendo-ui-complete
* If you do not own a commercial license, this file shall be governed by the trial license terms.
*/
(function(f, define){
    define([ "./kendo.core" ], f);
})(function(){

	(function ($, undefined) {
		var kendo = window.kendo,
			support = kendo.support,
			document = window.document,
			Class = kendo.Class,
			Observable = kendo.Observable,
			now = $.now,
			extend = $.extend,
			OS = support.mobileOS,
			invalidZeroEvents = OS && OS.android,
			DEFAULT_MIN_HOLD = 800,
			DEFAULT_THRESHOLD = support.browser.msie ? 5 : 0, // WP8 and W8 are very sensitive and always report move.

			// UserEvents events
			PRESS = "press",
			HOLD = "hold",
			SELECT = "select",
			START = "start",
			MOVE = "move",
			END = "end",
			CANCEL = "cancel",
			TAP = "tap",
			RELEASE = "release",
			GESTURESTART = "gesturestart",
			GESTURECHANGE = "gesturechange",
			GESTUREEND = "gestureend",
			GESTURETAP = "gesturetap";

		function touchDelta(touch1, touch2) {
			var x1 = touch1.x.location,
				y1 = touch1.y.location,
				x2 = touch2.x.location,
				y2 = touch2.y.location,
				dx = x1 - x2,
				dy = y1 - y2;

			return {
				center: {
					x: (x1 + x2) / 2,
					y: (y1 + y2) / 2
				},

				distance: Math.sqrt(dx * dx + dy * dy)
			};
		}

		function getTouches(e) {
			var touches = [],
				originalEvent = e.originalEvent,
				currentTarget = e.currentTarget,
				idx = 0, length,
				changedTouches,
				touch;

			if (e.api) {
				touches.push({
					id: 2,  // hardcoded ID for API call;
					event: e,
					target: e.target,
					currentTarget: e.target,
					location: e
				});
			}
			else if (e.type.match(/touch/)) {
				changedTouches = originalEvent ? originalEvent.changedTouches : [];
				for (length = changedTouches.length; idx < length; idx++) {
					touch = changedTouches[idx];
					touches.push({
						location: touch,
						event: e,
						target: touch.target,
						currentTarget: currentTarget,
						id: touch.identifier
					});
				}
			}
			else if (support.pointers || support.msPointers) {
				touches.push({
					location: originalEvent,
					event: e,
					target: e.target,
					currentTarget: currentTarget,
					id: originalEvent.pointerId
				});
			} else {
				touches.push({
					id: 1, // hardcoded ID for mouse event;
					event: e,
					target: e.target,
					currentTarget: currentTarget,
					location: e
				});
			}

			return touches;
		}

		var TouchAxis = Class.extend({
			init: function (axis, location) {
				var that = this;

				that.axis = axis;

				that._updateLocationData(location);

				that.startLocation = that.location;
				that.velocity = that.delta = 0;
				that.timeStamp = now();
			},

			move: function (location) {
				var that = this,
					offset = location["page" + that.axis],
					timeStamp = now(),
					timeDelta = (timeStamp - that.timeStamp) || 1; // Firing manually events in tests can make this 0;

				if (!offset && invalidZeroEvents) {
					return;
				}

				that.delta = offset - that.location;

				that._updateLocationData(location);

				that.initialDelta = offset - that.startLocation;
				that.velocity = that.delta / timeDelta;
				that.timeStamp = timeStamp;
			},

			_updateLocationData: function (location) {
				var that = this, axis = that.axis;

				that.location = location["page" + axis];
				that.client = location["client" + axis];
				that.screen = location["screen" + axis];
			}
		});

		var Touch = Class.extend({
			init: function (userEvents, target, touchInfo) {
				extend(this, {
					x: new TouchAxis("X", touchInfo.location),
					y: new TouchAxis("Y", touchInfo.location),
					userEvents: userEvents,
					target: target,
					currentTarget: touchInfo.currentTarget,
					initialTouch: touchInfo.target,
					id: touchInfo.id,
					pressEvent: touchInfo,
					_moved: false,
					_finished: false
				});
			},

			press: function () {
				this._holdTimeout = setTimeout($.proxy(this, "_hold"), this.userEvents.minHold);
				this._trigger(PRESS, this.pressEvent);
			},

			_hold: function () {
				this._trigger(HOLD, this.pressEvent);
			},

			move: function (touchInfo) {
				var that = this;

				if (that._finished) { return; }

				that.x.move(touchInfo.location);
				that.y.move(touchInfo.location);

				if (!that._moved) {
					if (that._withinIgnoreThreshold()) {
						return;
					}

					if (!UserEvents.current || UserEvents.current === that.userEvents) {
						that._start(touchInfo);
					} else {
						return that.dispose();
					}
				}

				// Event handlers may cancel the drag in the START event handler, hence the double check for pressed.
				if (!that._finished) {
					that._trigger(MOVE, touchInfo);
				}
			},

			end: function (touchInfo) {
				var that = this;

				that.endTime = now();

				if (that._finished) { return; }

				// Mark the object as finished if there are blocking operations in the event handlers (alert/confirm)
				that._finished = true;

				if (that._moved) {
					that._trigger(END, touchInfo);
				} else {
					that._trigger(TAP, touchInfo);
				}

				clearTimeout(that._holdTimeout);
				that._trigger(RELEASE, touchInfo);

				that.dispose();
			},

			dispose: function () {
				var userEvents = this.userEvents,
					activeTouches = userEvents.touches;

				this._finished = true;
				this.pressEvent = null;
				clearTimeout(this._holdTimeout);

				activeTouches.splice($.inArray(this, activeTouches), 1);
			},

			skip: function () {
				this.dispose();
			},

			cancel: function () {
				this.dispose();
			},

			isMoved: function () {
				return this._moved;
			},

			_start: function (touchInfo) {
				clearTimeout(this._holdTimeout);

				this.startTime = now();
				this._moved = true;
				this._trigger(START, touchInfo);
			},

			_trigger: function (name, touchInfo) {
				var that = this,
					jQueryEvent = touchInfo.event,
					data = {
						touch: that,
						x: that.x,
						y: that.y,
						target: that.target,
						event: jQueryEvent
					};

				if (that.userEvents.notify(name, data)) {
					jQueryEvent.preventDefault();
				}
			},

			_withinIgnoreThreshold: function () {
				var xDelta = this.x.initialDelta,
					yDelta = this.y.initialDelta;

				return Math.sqrt(xDelta * xDelta + yDelta * yDelta) <= this.userEvents.threshold;
			}
		});

		function preventTrigger(e) {
			e.preventDefault();

			var target = $(e.data.root),   // Determine the correct parent to receive the event and bubble.
				parent = target.closest(".k-widget").parent();

			if (!parent[0]) {
				parent = target.parent();
			}

			var fakeEventData = $.extend(true, {}, e, { target: target[0] });
			parent.trigger($.Event(e.type, fakeEventData));
		}

		function withEachUpEvent(callback) {
			var downEvents = kendo.eventMap.up.split(" "),
				idx = 0,
				length = downEvents.length;

			for (; idx < length; idx++) {
				callback(downEvents[idx]);
			}
		}

		var UserEvents = Observable.extend({
			init: function (element, options) {
				var that = this,
					filter,
					ns = kendo.guid();

				options = options || {};
				filter = that.filter = options.filter;
				that.threshold = options.threshold || DEFAULT_THRESHOLD;
				that.minHold = options.minHold || DEFAULT_MIN_HOLD;
				that.touches = [];
				that._maxTouches = options.multiTouch ? 2 : 1;
				that.allowSelection = options.allowSelection;
				that.captureUpIfMoved = options.captureUpIfMoved;
				that.eventNS = ns;

				element = $(element).handler(that);
				Observable.fn.init.call(that);

				extend(that, {
					element: element,
					surface: options.global ? $(document.documentElement) : $(options.surface || element),
					stopPropagation: options.stopPropagation,
					pressed: false
				});

				that.surface.handler(that)
					.on(kendo.applyEventMap("move", ns), "_move")
					.on(kendo.applyEventMap("up cancel", ns), "_end");

				element.on(kendo.applyEventMap("down", ns), filter, "_start");

				if (support.pointers || support.msPointers) {
					element.css("-ms-touch-action", "pinch-zoom double-tap-zoom");
				}

				if (options.preventDragEvent) {
					element.on(kendo.applyEventMap("dragstart", ns), kendo.preventDefault);
				}

				element.on(kendo.applyEventMap("mousedown selectstart", ns), filter, { root: element }, "_select");

				if (that.captureUpIfMoved && support.eventCapture) {
					var surfaceElement = that.surface[0],
						preventIfMovingProxy = $.proxy(that.preventIfMoving, that);

					withEachUpEvent(function (eventName) {
						surfaceElement.addEventListener(eventName, preventIfMovingProxy, true);
					});
				}

				that.bind([
				PRESS,
				HOLD,
				TAP,
				START,
				MOVE,
				END,
				RELEASE,
				CANCEL,
				GESTURESTART,
				GESTURECHANGE,
				GESTUREEND,
				GESTURETAP,
				SELECT
				], options);
			},

			preventIfMoving: function (e) {
				if (this._isMoved()) {
					e.preventDefault();
				}
			},

			destroy: function () {
				var that = this;

				if (that._destroyed) {
					return;
				}

				that._destroyed = true;

				if (that.captureUpIfMoved && support.eventCapture) {
					var surfaceElement = that.surface[0];
					withEachUpEvent(function (eventName) {
						surfaceElement.removeEventListener(eventName, that.preventIfMoving);
					});
				}

				that.element.kendoDestroy(that.eventNS);
				that.surface.kendoDestroy(that.eventNS);
				that.element.removeData("handler");
				that.surface.removeData("handler");
				that._disposeAll();

				that.unbind();
				delete that.surface;
				delete that.element;
				delete that.currentTarget;
			},

			capture: function () {
				UserEvents.current = this;
			},

			cancel: function () {
				this._disposeAll();
				this.trigger(CANCEL);
			},

			notify: function (eventName, data) {
				var that = this,
					touches = that.touches;

				if (this._isMultiTouch()) {
					switch (eventName) {
						case MOVE:
							eventName = GESTURECHANGE;
							break;
						case END:
							eventName = GESTUREEND;
							break;
						case TAP:
							eventName = GESTURETAP;
							break;
					}

					extend(data, { touches: touches }, touchDelta(touches[0], touches[1]));
				}

				return this.trigger(eventName, data);
			},

			// API
			press: function (x, y, target) {
				this._apiCall("_start", x, y, target);
			},

			move: function (x, y) {
				this._apiCall("_move", x, y);
			},

			end: function (x, y) {
				this._apiCall("_end", x, y);
			},

			_isMultiTouch: function () {
				return this.touches.length > 1;
			},

			_maxTouchesReached: function () {
				return this.touches.length >= this._maxTouches;
			},

			_disposeAll: function () {
				var touches = this.touches;
				while (touches.length > 0) {
					touches.pop().dispose();
				}
			},

			_isMoved: function () {
				return $.grep(this.touches, function (touch) {
					return touch.isMoved();
				}).length;
			},

			_select: function (e) {
				if (!this.allowSelection || this.trigger(SELECT, { event: e })) {
					preventTrigger(e);
				}
			},

			_start: function (e) {
				var that = this,
					idx = 0,
					filter = that.filter,
					target,
					touches = getTouches(e),
					length = touches.length,
					touch,
					which = e.which;

				if (which && which > 1) {
					return;
				}

				if (that._maxTouchesReached()) {
					return;
				}

				UserEvents.current = null;

				that.currentTarget = e.currentTarget;

				if (that.stopPropagation) {
					e.stopPropagation();
				}

				for (; idx < length; idx++) {
					if (that._maxTouchesReached()) {
						break;
					}

					touch = touches[idx];

					if (filter) {
						target = $(touch.currentTarget); // target.is(filter) ? target : target.closest(filter, that.element);
					} else {
						target = that.element;
					}

					if (!target.length) {
						continue;
					}

					touch = new Touch(that, target, touch);
					that.touches.push(touch);
					touch.press();

					if (that._isMultiTouch()) {
						that.notify("gesturestart", {});
					}
				}
			},

			_move: function (e) {
				this._eachTouch("move", e);
			},

			_end: function (e) {
				this._eachTouch("end", e);
			},

			_eachTouch: function (methodName, e) {
				var that = this,
					dict = {},
					touches = getTouches(e),
					activeTouches = that.touches,
					idx,
					touch,
					touchInfo,
					matchingTouch;

				for (idx = 0; idx < activeTouches.length; idx++) {
					touch = activeTouches[idx];
					dict[touch.id] = touch;
				}

				for (idx = 0; idx < touches.length; idx++) {
					touchInfo = touches[idx];
					matchingTouch = dict[touchInfo.id];

					if (matchingTouch) {
						matchingTouch[methodName](touchInfo);
					}
				}
			},

			_apiCall: function (type, x, y, target) {
				this[type]({
					api: true,
					pageX: x,
					pageY: y,
					clientX: x,
					clientY: y,
					target: $(target || this.element)[0],
					stopPropagation: $.noop,
					preventDefault: $.noop
				});
			}
		});

		UserEvents.minHold = function (value) {
			DEFAULT_MIN_HOLD = value;
		};

		kendo.getTouches = getTouches;
		kendo.touchDelta = touchDelta;
		kendo.UserEvents = UserEvents;
	})(window.kendo.jQuery);

return window.kendo;

}, typeof define == 'function' && define.amd ? define : function(_, f){ f(); });
/*
* Kendo UI v2014.1.416 (http://www.telerik.com/kendo-ui)
* Copyright 2014 Telerik AD. All rights reserved.
*
* Kendo UI commercial licenses may be obtained at
* http://www.telerik.com/purchase/license-agreement/kendo-ui-complete
* If you do not own a commercial license, this file shall be governed by the trial license terms.
*/
(function(f, define){
    define([ "./kendo.core", "./kendo.userevents" ], f);
})(function(){

	(function ($, undefined) {
		var kendo = window.kendo,
			support = kendo.support,
			document = window.document,
			Class = kendo.Class,
			Widget = kendo.ui.Widget,
			Observable = kendo.Observable,
			UserEvents = kendo.UserEvents,
			proxy = $.proxy,
			extend = $.extend,
			getOffset = kendo.getOffset,
			draggables = {},
			dropTargets = {},
			dropAreas = {},
			lastDropTarget,
			elementUnderCursor = kendo.elementUnderCursor,
			KEYUP = "keyup",
			CHANGE = "change",

			// Draggable events
			DRAGSTART = "dragstart",
			HOLD = "hold",
			DRAG = "drag",
			DRAGEND = "dragend",
			DRAGCANCEL = "dragcancel",

			// DropTarget events
			DRAGENTER = "dragenter",
			DRAGLEAVE = "dragleave",
			DROP = "drop";

		function contains(parent, child) {
			try {
				return $.contains(parent, child) || parent == child;
			} catch (e) {
				return false;
			}
		}

		function numericCssPropery(element, property) {
			return parseInt(element.css(property), 10) || 0;
		}

		function within(value, range) {
			return Math.min(Math.max(value, range.min), range.max);
		}

		function containerBoundaries(container, element) {
			var offset = getOffset(container),
				minX = offset.left + numericCssPropery(container, "borderLeftWidth") + numericCssPropery(container, "paddingLeft"),
				minY = offset.top + numericCssPropery(container, "borderTopWidth") + numericCssPropery(container, "paddingTop"),
				maxX = minX + container.width() - element.outerWidth(true),
				maxY = minY + container.height() - element.outerHeight(true);

			return {
				x: { min: minX, max: maxX },
				y: { min: minY, max: maxY }
			};
		}

		function checkTarget(target, targets, areas) {
			var theTarget, theFilter, i = 0,
				targetLen = targets && targets.length,
				areaLen = areas && areas.length;

			while (target && target.parentNode) {
				for (i = 0; i < targetLen; i++) {
					theTarget = targets[i];
					if (theTarget.element[0] === target) {
						return { target: theTarget, targetElement: target };
					}
				}

				for (i = 0; i < areaLen; i++) {
					theFilter = areas[i];
					if (support.matchesSelector.call(target, theFilter.options.filter)) {
						return { target: theFilter, targetElement: target };
					}
				}

				target = target.parentNode;
			}

			return undefined;
		}

		var TapCapture = Observable.extend({
			init: function (element, options) {
				var that = this,
					domElement = element[0];

				that.capture = false;

				if (domElement.addEventListener) {
					$.each(kendo.eventMap.down.split(" "), function () {
						domElement.addEventListener(this, proxy(that._press, that), true);
					});
					$.each(kendo.eventMap.up.split(" "), function () {
						domElement.addEventListener(this, proxy(that._release, that), true);
					});
				} else {
					$.each(kendo.eventMap.down.split(" "), function () {
						domElement.attachEvent(this, proxy(that._press, that));
					});
					$.each(kendo.eventMap.up.split(" "), function () {
						domElement.attachEvent(this, proxy(that._release, that));
					});
				}

				Observable.fn.init.call(that);

				that.bind(["press", "release"], options || {});
			},

			captureNext: function () {
				this.capture = true;
			},

			cancelCapture: function () {
				this.capture = false;
			},

			_press: function (e) {
				var that = this;
				that.trigger("press");
				if (that.capture) {
					e.preventDefault();
				}
			},

			_release: function (e) {
				var that = this;
				that.trigger("release");

				if (that.capture) {
					e.preventDefault();
					that.cancelCapture();
				}
			}
		});

		var PaneDimension = Observable.extend({
			init: function (options) {
				var that = this;
				Observable.fn.init.call(that);

				that.forcedEnabled = false;

				$.extend(that, options);

				that.scale = 1;

				if (that.horizontal) {
					that.measure = "offsetWidth";
					that.scrollSize = "scrollWidth";
					that.axis = "x";
				} else {
					that.measure = "offsetHeight";
					that.scrollSize = "scrollHeight";
					that.axis = "y";
				}
			},

			makeVirtual: function () {
				$.extend(this, {
					virtual: true,
					forcedEnabled: true,
					_virtualMin: 0,
					_virtualMax: 0
				});
			},

			virtualSize: function (min, max) {
				if (this._virtualMin !== min || this._virtualMax !== max) {
					this._virtualMin = min;
					this._virtualMax = max;
					this.update();
				}
			},

			outOfBounds: function (offset) {
				return offset > this.max || offset < this.min;
			},

			forceEnabled: function () {
				this.forcedEnabled = true;
			},

			getSize: function () {
				return this.container[0][this.measure];
			},

			getTotal: function () {
				return this.element[0][this.scrollSize];
			},

			rescale: function (scale) {
				this.scale = scale;
			},

			update: function (silent) {
				var that = this,
					total = that.virtual ? that._virtualMax : that.getTotal(),
					scaledTotal = total * that.scale,
					size = that.getSize();

				that.max = that.virtual ? -that._virtualMin : 0;
				that.size = size;
				that.total = scaledTotal;
				that.min = Math.min(that.max, size - scaledTotal);
				that.minScale = size / total;
				that.centerOffset = (scaledTotal - size) / 2;

				that.enabled = that.forcedEnabled || (scaledTotal > size);

				if (!silent) {
					that.trigger(CHANGE, that);
				}
			}
		});

		var PaneDimensions = Observable.extend({
			init: function (options) {
				var that = this;

				Observable.fn.init.call(that);

				that.x = new PaneDimension(extend({ horizontal: true }, options));
				that.y = new PaneDimension(extend({ horizontal: false }, options));
				that.container = options.container;
				that.forcedMinScale = options.minScale;
				that.maxScale = options.maxScale || 100;

				that.bind(CHANGE, options);
			},

			rescale: function (newScale) {
				this.x.rescale(newScale);
				this.y.rescale(newScale);
				this.refresh();
			},

			centerCoordinates: function () {
				return { x: Math.min(0, -this.x.centerOffset), y: Math.min(0, -this.y.centerOffset) };
			},

			refresh: function () {
				var that = this;
				that.x.update();
				that.y.update();
				that.enabled = that.x.enabled || that.y.enabled;
				that.minScale = that.forcedMinScale || Math.min(that.x.minScale, that.y.minScale);
				that.fitScale = Math.max(that.x.minScale, that.y.minScale);
				that.trigger(CHANGE);
			}
		});

		var PaneAxis = Observable.extend({
			init: function (options) {
				var that = this;
				extend(that, options);
				Observable.fn.init.call(that);
			},

			outOfBounds: function () {
				return this.dimension.outOfBounds(this.movable[this.axis]);
			},

			dragMove: function (delta) {
				var that = this,
					dimension = that.dimension,
					axis = that.axis,
					movable = that.movable,
					position = movable[axis] + delta;

				if (!dimension.enabled) {
					return;
				}

				if ((position < dimension.min && delta < 0) || (position > dimension.max && delta > 0)) {
					delta *= that.resistance;
				}

				movable.translateAxis(axis, delta);
				that.trigger(CHANGE, that);
			}
		});

		var Pane = Class.extend({

			init: function (options) {
				var that = this,
					x,
					y,
					resistance,
					movable;

				extend(that, { elastic: true }, options);

				resistance = that.elastic ? 0.5 : 0;
				movable = that.movable;

				that.x = x = new PaneAxis({
					axis: "x",
					dimension: that.dimensions.x,
					resistance: resistance,
					movable: movable
				});

				that.y = y = new PaneAxis({
					axis: "y",
					dimension: that.dimensions.y,
					resistance: resistance,
					movable: movable
				});

				that.userEvents.bind(["move", "end", "gesturestart", "gesturechange"], {
					gesturestart: function (e) {
						that.gesture = e;
						that.offset = that.dimensions.container.offset();
					},

					gesturechange: function (e) {
						var previousGesture = that.gesture,
							previousCenter = previousGesture.center,

							center = e.center,

							scaleDelta = e.distance / previousGesture.distance,

							minScale = that.dimensions.minScale,
							maxScale = that.dimensions.maxScale,
							coordinates;

						if (movable.scale <= minScale && scaleDelta < 1) {
							// Resist shrinking. Instead of shrinking from 1 to 0.5, it will shrink to 0.5 + (1 /* minScale */ - 0.5) * 0.8 = 0.9;
							scaleDelta += (1 - scaleDelta) * 0.8;
						}

						if (movable.scale * scaleDelta >= maxScale) {
							scaleDelta = maxScale / movable.scale;
						}

						var offsetX = movable.x + that.offset.left,
							offsetY = movable.y + that.offset.top;

						coordinates = {
							x: (offsetX - previousCenter.x) * scaleDelta + center.x - offsetX,
							y: (offsetY - previousCenter.y) * scaleDelta + center.y - offsetY
						};

						movable.scaleWith(scaleDelta);

						x.dragMove(coordinates.x);
						y.dragMove(coordinates.y);

						that.dimensions.rescale(movable.scale);
						that.gesture = e;
						e.preventDefault();
					},

					move: function (e) {
						if (e.event.target.tagName.match(/textarea|input/i)) {
							return;
						}

						if (x.dimension.enabled || y.dimension.enabled) {
							x.dragMove(e.x.delta);
							y.dragMove(e.y.delta);
							e.preventDefault();
						} else {
							e.touch.skip();
						}
					},

					end: function (e) {
						e.preventDefault();
					}
				});
			}
		});

		var TRANSFORM_STYLE = support.transitions.prefix + "Transform",
			translate;


		if (support.hasHW3D) {
			translate = function (x, y, scale) {
				return "translate3d(" + x + "px," + y + "px,0) scale(" + scale + ")";
			};
		} else {
			translate = function (x, y, scale) {
				return "translate(" + x + "px," + y + "px) scale(" + scale + ")";
			};
		}

		var Movable = Observable.extend({
			init: function (element) {
				var that = this;

				Observable.fn.init.call(that);

				that.element = $(element);
				that.element[0].style.webkitTransformOrigin = "left top";
				that.x = 0;
				that.y = 0;
				that.scale = 1;
				that._saveCoordinates(translate(that.x, that.y, that.scale));
			},

			translateAxis: function (axis, by) {
				this[axis] += by;
				this.refresh();
			},

			scaleTo: function (scale) {
				this.scale = scale;
				this.refresh();
			},

			scaleWith: function (scaleDelta) {
				this.scale *= scaleDelta;
				this.refresh();
			},

			translate: function (coordinates) {
				this.x += coordinates.x;
				this.y += coordinates.y;
				this.refresh();
			},

			moveAxis: function (axis, value) {
				this[axis] = value;
				this.refresh();
			},

			moveTo: function (coordinates) {
				extend(this, coordinates);
				this.refresh();
			},

			refresh: function () {
				var that = this,
					x = that.x,
					y = that.y,
					newCoordinates;

				if (that.round) {
					x = Math.round(x);
					y = Math.round(y);
				}

				newCoordinates = translate(x, y, that.scale);

				if (newCoordinates != that.coordinates) {
					if (kendo.support.browser.msie && kendo.support.browser.version < 10) {
						that.element[0].style.position = "absolute";
						that.element[0].style.left = that.x + "px";
						that.element[0].style.top = that.y + "px";
					} else {
						that.element[0].style[TRANSFORM_STYLE] = newCoordinates;
					}
					that._saveCoordinates(newCoordinates);
					that.trigger(CHANGE);
				}
			},

			_saveCoordinates: function (coordinates) {
				this.coordinates = coordinates;
			}
		});

		var DropTarget = Widget.extend({
			init: function (element, options) {
				var that = this;

				Widget.fn.init.call(that, element, options);

				var group = that.options.group;

				if (!(group in dropTargets)) {
					dropTargets[group] = [that];
				} else {
					dropTargets[group].push(that);
				}
			},

			events: [
				DRAGENTER,
				DRAGLEAVE,
				DROP
			],

			options: {
				name: "DropTarget",
				group: "default"
			},

			destroy: function () {
				var groupName = this.options.group,
					group = dropTargets[groupName] || dropAreas[groupName],
					i;

				if (group.length > 1) {
					Widget.fn.destroy.call(this);

					for (i = 0; i < group.length; i++) {
						if (group[i] == this) {
							group.splice(i, 1);
							break;
						}
					}
				} else {
					DropTarget.destroyGroup(groupName);
				}
			},

			_trigger: function (eventName, e) {
				var that = this,
					draggable = draggables[that.options.group];

				if (draggable) {
					return that.trigger(eventName, extend({}, e.event, {
						draggable: draggable,
						dropTarget: e.dropTarget
					}));
				}
			},

			_over: function (e) {
				this._trigger(DRAGENTER, e);
			},

			_out: function (e) {
				this._trigger(DRAGLEAVE, e);
			},

			_drop: function (e) {
				var that = this,
					draggable = draggables[that.options.group];

				if (draggable) {
					draggable.dropped = !that._trigger(DROP, e);
				}
			}
		});

		DropTarget.destroyGroup = function (groupName) {
			var group = dropTargets[groupName] || dropAreas[groupName],
				i;

			if (group) {
				for (i = 0; i < group.length; i++) {
					Widget.fn.destroy.call(group[i]);
				}

				group.length = 0;
				delete dropTargets[groupName];
				delete dropAreas[groupName];
			}
		};

		DropTarget._cache = dropTargets;

		var DropTargetArea = DropTarget.extend({
			init: function (element, options) {
				var that = this;

				Widget.fn.init.call(that, element, options);

				var group = that.options.group;

				if (!(group in dropAreas)) {
					dropAreas[group] = [that];
				} else {
					dropAreas[group].push(that);
				}
			},

			options: {
				name: "DropTargetArea",
				group: "default",
				filter: null
			}
		});

		var Draggable = Widget.extend({
			init: function (element, options) {
				var that = this;

				Widget.fn.init.call(that, element, options);

				that._activated = false;

				that.userEvents = new UserEvents(that.element, {
					global: true,
					allowSelection: true,
					stopPropagation: true,
					filter: that.options.filter,
					threshold: that.options.distance,
					start: proxy(that._start, that),
					hold: proxy(that._hold, that),
					move: proxy(that._drag, that),
					end: proxy(that._end, that),
					cancel: proxy(that._cancel, that),
					select: proxy(that._select, that)
				});

				that._afterEndHandler = proxy(that._afterEnd, that);
				that.captureEscape = function (e) {
					if (e.keyCode === kendo.keys.ESC) {
						that._trigger(DRAGCANCEL, { event: e });
						that.userEvents.cancel();
					}
				};
			},

			events: [
				HOLD,
				DRAGSTART,
				DRAG,
				DRAGEND,
				DRAGCANCEL
			],

			options: {
				name: "Draggable",
				distance: 5,
				group: "default",
				cursorOffset: null,
				axis: null,
				container: null,
				filter: null,
				ignore: null,
				holdToDrag: false,
				dropped: false
			},

			cancelHold: function () {
				this._activated = false;
			},

			_updateHint: function (e) {
				var that = this,
					coordinates,
					options = that.options,
					boundaries = that.boundaries,
					axis = options.axis,
					cursorOffset = that.options.cursorOffset;

				if (cursorOffset) {
					coordinates = { left: e.x.location + cursorOffset.left, top: e.y.location + cursorOffset.top };
				} else {
					that.hintOffset.left += e.x.delta;
					that.hintOffset.top += e.y.delta;
					coordinates = $.extend({}, that.hintOffset);
				}

				if (boundaries) {
					coordinates.top = within(coordinates.top, boundaries.y);
					coordinates.left = within(coordinates.left, boundaries.x);
				}

				if (axis === "x") {
					delete coordinates.top;
				} else if (axis === "y") {
					delete coordinates.left;
				}

				that.hint.css(coordinates);
			},

			_shouldIgnoreTarget: function (target) {
				var ignoreSelector = this.options.ignore;
				return ignoreSelector && $(target).is(ignoreSelector);
			},

			_select: function (e) {
				if (!this._shouldIgnoreTarget(e.event.target)) {
					e.preventDefault();
				}
			},

			_start: function (e) {
				var that = this,
					options = that.options,
					container = options.container,
					hint = options.hint;

				if (this._shouldIgnoreTarget(e.touch.initialTouch) || (options.holdToDrag && !that._activated)) {
					that.userEvents.cancel();
					return;
				}

				that.currentTarget = e.target;
				that.currentTargetOffset = getOffset(that.currentTarget);

				if (hint) {
					if (that.hint) {
						that.hint.stop(true, true).remove();
					}

					that.hint = kendo.isFunction(hint) ? $(hint.call(that, that.currentTarget)) : hint;

					var offset = getOffset(that.currentTarget);
					that.hintOffset = offset;

					that.hint.css({
						position: "absolute",
						zIndex: 20000, // the Window's z-index is 10000 and can be raised because of z-stacking
						left: offset.left,
						top: offset.top
					})
					.appendTo(document.body);
				}

				draggables[options.group] = that;

				that.dropped = false;

				if (container) {
					that.boundaries = containerBoundaries(container, that.hint);
				}

				if (that._trigger(DRAGSTART, e)) {
					that.userEvents.cancel();
					that._afterEnd();
				}

				$(document).on(KEYUP, that.captureEscape);
			},

			_hold: function (e) {
				this.currentTarget = e.target;

				if (this._trigger(HOLD, e)) {
					this.userEvents.cancel();
				} else {
					this._activated = true;
				}
			},

			_drag: function (e) {
				var that = this;

				e.preventDefault();

				that._withDropTarget(e, function (target, targetElement) {
					if (!target) {
						if (lastDropTarget) {
							lastDropTarget._trigger(DRAGLEAVE, extend(e, { dropTarget: $(lastDropTarget.targetElement) }));
							lastDropTarget = null;
						}
						return;
					}

					if (lastDropTarget) {
						if (targetElement === lastDropTarget.targetElement) {
							return;
						}

						lastDropTarget._trigger(DRAGLEAVE, extend(e, { dropTarget: $(lastDropTarget.targetElement) }));
					}

					target._trigger(DRAGENTER, extend(e, { dropTarget: $(targetElement) }));
					lastDropTarget = extend(target, { targetElement: targetElement });
				});

				that._trigger(DRAG, e);

				if (that.hint) {
					that._updateHint(e);
				}
			},

			_end: function (e) {
				var that = this;

				that._withDropTarget(e, function (target, targetElement) {
					if (target) {
						target._drop(extend({}, e, { dropTarget: $(targetElement) }));
						lastDropTarget = null;
					}
				});

				that._trigger(DRAGEND, e);
				that._cancel(e.event);
			},

			_cancel: function () {
				var that = this;

				that._activated = false;

				if (that.hint && !that.dropped) {
					setTimeout(function () {
						that.hint.stop(true, true).animate(that.currentTargetOffset, "fast", that._afterEndHandler);
					}, 0);

				} else {
					that._afterEnd();
				}
			},

			_trigger: function (eventName, e) {
				var that = this;

				return that.trigger(
					eventName, extend(
					{},
					e.event,
					{
						x: e.x,
						y: e.y,
						currentTarget: that.currentTarget,
						dropTarget: e.dropTarget
					}
				));
			},

			_withDropTarget: function (e, callback) {
				var that = this,
					target, result,
					options = that.options,
					targets = dropTargets[options.group],
					areas = dropAreas[options.group];

				if (targets && targets.length || areas && areas.length) {

					target = elementUnderCursor(e);

					if (that.hint && contains(that.hint[0], target)) {
						that.hint.hide();
						target = elementUnderCursor(e);
						// IE8 does not return the element in iframe from first attempt
						if (!target) {
							target = elementUnderCursor(e);
						}
						that.hint.show();
					}

					result = checkTarget(target, targets, areas);

					if (result) {
						callback(result.target, result.targetElement);
					} else {
						callback();
					}
				}
			},

			destroy: function () {
				var that = this;

				Widget.fn.destroy.call(that);

				that._afterEnd();

				that.userEvents.destroy();

				that.currentTarget = null;
			},

			_afterEnd: function () {
				var that = this;

				if (that.hint) {
					that.hint.remove();
				}

				delete draggables[that.options.group];

				that.trigger("destroy");
				$(document).off(KEYUP, that.captureEscape);
			}
		});

		kendo.ui.plugin(DropTarget);
		kendo.ui.plugin(DropTargetArea);
		kendo.ui.plugin(Draggable);
		kendo.TapCapture = TapCapture;
		kendo.containerBoundaries = containerBoundaries;

		extend(kendo.ui, {
			Pane: Pane,
			PaneDimensions: PaneDimensions,
			Movable: Movable
		});

	})(window.kendo.jQuery);

return window.kendo;

}, typeof define == 'function' && define.amd ? define : function(_, f){ f(); });
/*
* Kendo UI v2014.1.416 (http://www.telerik.com/kendo-ui)
* Copyright 2014 Telerik AD. All rights reserved.
*
* Kendo UI commercial licenses may be obtained at
* http://www.telerik.com/purchase/license-agreement/kendo-ui-complete
* If you do not own a commercial license, this file shall be governed by the trial license terms.
*/
(function(f, define){
    define([ "./kendo.draganddrop" ], f);
})(function(){

	(function ($, undefined) {
		var kendo = window.kendo,
			Widget = kendo.ui.Widget,
			Draggable = kendo.ui.Draggable,
			isPlainObject = $.isPlainObject,
			activeElement = kendo._activeElement,
			proxy = $.proxy,
			extend = $.extend,
			each = $.each,
			template = kendo.template,
			BODY = "body",
			templates,
			NS = ".kendoWindow",
			// classNames
			KWINDOW = ".k-window",
			KWINDOWTITLE = ".k-window-title",
			KWINDOWTITLEBAR = KWINDOWTITLE + "bar",
			KWINDOWCONTENT = ".k-window-content",
			KWINDOWRESIZEHANDLES = ".k-resize-handle",
			KOVERLAY = ".k-overlay",
			KCONTENTFRAME = "k-content-frame",
			LOADING = "k-loading",
			KHOVERSTATE = "k-state-hover",
			KFOCUSEDSTATE = "k-state-focused",
			MAXIMIZEDSTATE = "k-window-maximized",
			// constants
			VISIBLE = ":visible",
			HIDDEN = "hidden",
			CURSOR = "cursor",
			// events
			OPEN = "open",
			ACTIVATE = "activate",
			DEACTIVATE = "deactivate",
			CLOSE = "close",
			REFRESH = "refresh",
			RESIZE = "resize",
			DRAGSTART = "dragstart",
			DRAGEND = "dragend",
			ERROR = "error",
			OVERFLOW = "overflow",
			ZINDEX = "zIndex",
			MINIMIZE_MAXIMIZE = ".k-window-actions .k-i-minimize,.k-window-actions .k-i-maximize",
			KPIN = ".k-i-pin",
			KUNPIN = ".k-i-unpin",
			PIN_UNPIN = KPIN + "," + KUNPIN,
			TITLEBAR_BUTTONS = ".k-window-titlebar .k-window-action",
			REFRESHICON = ".k-window-titlebar .k-i-refresh",
			isLocalUrl = kendo.isLocalUrl;

		function defined(x) {
			return (typeof x != "undefined");
		}

		function constrain(value, low, high) {
			return Math.max(Math.min(parseInt(value, 10), high === Infinity ? high : parseInt(high, 10)), parseInt(low, 10));
		}

		function sizingAction(actionId, callback) {
			return function () {
				var that = this,
					wrapper = that.wrapper,
					style = wrapper[0].style,
					options = that.options;

				if (options.isMaximized || options.isMinimized) {
					return;
				}

				that.restoreOptions = {
					width: style.width,
					height: style.height
				};

				wrapper
					.children(KWINDOWRESIZEHANDLES).hide().end()
					.children(KWINDOWTITLEBAR).find(MINIMIZE_MAXIMIZE).parent().hide()
						.eq(0).before(templates.action({ name: "Restore" }));

				callback.call(that);

				if (actionId == "maximize") {
					that.wrapper.children(KWINDOWTITLEBAR).find(PIN_UNPIN).parent().hide();
				} else {
					that.wrapper.children(KWINDOWTITLEBAR).find(PIN_UNPIN).parent().show();
				}

				return that;
			};
		}

		function executableScript() {
			return !this.type || this.type.toLowerCase().indexOf("script") >= 0;
		}

		var Window = Widget.extend({
			init: function (element, options) {
				var that = this,
					wrapper,
					offset = {},
					visibility, display, position,
					isVisible = false,
					content,
					windowContent,
					suppressActions = options && options.actions && !options.actions.length,
					id;

				Widget.fn.init.call(that, element, options);
				options = that.options;
				position = options.position;
				element = that.element;
				content = options.content;

				if (suppressActions) {
					options.actions = [];
				}

				that.appendTo = $(options.appendTo);

				that._animations();

				if (content && !isPlainObject(content)) {
					content = options.content = { url: content };
				}

				// remove script blocks to prevent double-execution
				element.find("script").filter(executableScript).remove();

				if (!element.parent().is(that.appendTo) && (position.top === undefined || position.left === undefined)) {
					if (element.is(VISIBLE)) {
						offset = element.offset();
						isVisible = true;
					} else {
						visibility = element.css("visibility");
						display = element.css("display");

						element.css({ visibility: HIDDEN, display: "" });
						offset = element.offset();
						element.css({ visibility: visibility, display: display });
					}

					if (position.top === undefined) {
						position.top = offset.top;
					}
					if (position.left === undefined) {
						position.left = offset.left;
					}
				}

				if (!defined(options.visible) || options.visible === null) {
					options.visible = element.is(VISIBLE);
				}

				wrapper = that.wrapper = element.closest(KWINDOW);

				if (!element.is(".k-content") || !wrapper[0]) {
					element.addClass("k-window-content k-content");
					that._createWindow(element, options);
					wrapper = that.wrapper = element.closest(KWINDOW);

					that._dimensions();
				}

				that._position();

				if (options.pinned) {
					that.pin(true);
				}

				if (content) {
					that.refresh(content);
				}

				if (options.visible) {
					that.toFront();
				}

				windowContent = wrapper.children(KWINDOWCONTENT);
				that._tabindex(windowContent);

				if (options.visible && options.modal) {
					that._overlay(wrapper.is(VISIBLE)).css({ opacity: 0.5 });
				}

				wrapper
					.on("mouseenter" + NS, TITLEBAR_BUTTONS, proxy(that._buttonEnter, that))
					.on("mouseleave" + NS, TITLEBAR_BUTTONS, proxy(that._buttonLeave, that))
					.on("click" + NS, "> " + TITLEBAR_BUTTONS, proxy(that._windowActionHandler, that));

				windowContent
					.on("keydown" + NS, proxy(that._keydown, that))
					.on("focus" + NS, proxy(that._focus, that))
					.on("blur" + NS, proxy(that._blur, that));

				this._resizable();

				this._draggable();

				id = element.attr("id");
				if (id) {
					id = id + "_wnd_title";
					wrapper.children(KWINDOWTITLEBAR)
						   .children(KWINDOWTITLE)
						   .attr("id", id);

					windowContent
						.attr({
							"role": "dialog",
							"aria-labelledby": id
						});
				}

				wrapper.add(wrapper.children(".k-resize-handle," + KWINDOWTITLEBAR))
						.on("mousedown" + NS, proxy(that.toFront, that));

				that.touchScroller = kendo.touchScroller(element);

				that._resizeHandler = proxy(that._onDocumentResize, that);

				$(window).on("resize", that._resizeHandler);

				if (options.visible) {
					that.trigger(OPEN);
					that.trigger(ACTIVATE);
				}

				kendo.notify(that);
			},

			_buttonEnter: function () {
				$(this).addClass(KHOVERSTATE);
			},

			_buttonLeave: function () {
				$(this).removeClass(KHOVERSTATE);
			},

			_focus: function () {
				this.wrapper.addClass(KFOCUSEDSTATE);
			},

			_blur: function () {
				this.wrapper.removeClass(KFOCUSEDSTATE);
			},

			_dimensions: function () {
				var wrapper = this.wrapper;
				var options = this.options;
				var width = options.width;
				var height = options.height;
				var maxHeight = options.maxHeight;
				var dimensions = ["minWidth", "minHeight", "maxWidth", "maxHeight"];

				this.title(options.title);

				for (var i = 0; i < dimensions.length; i++) {
					var value = options[dimensions[i]];
					if (value && value != Infinity) {
						wrapper.css(dimensions[i], value);
					}
				}

				if (maxHeight && maxHeight != Infinity) {
					this.element.css("maxHeight", maxHeight);
				}

				if (width) {
					if (width.toString().indexOf("%") > 0) {
						wrapper.width(width);
					} else {
						wrapper.width(constrain(width, options.minWidth, options.maxWidth));
					}
				}

				if (height) {
					if (height.toString().indexOf("%") > 0) {
						wrapper.height(height);
					} else {
						wrapper.height(constrain(height, options.minHeight, options.maxHeight));
					}
				}

				if (!options.visible) {
					wrapper.hide();
				}
			},

			_position: function () {
				var wrapper = this.wrapper,
					position = this.options.position;

				if (position.top === 0) {
					position.top = position.top.toString();
				}

				if (position.left === 0) {
					position.left = position.left.toString();
				}

				wrapper.css({
					top: position.top || "",
					left: position.left || ""
				});
			},

			_animations: function () {
				var options = this.options;

				if (options.animation === false) {
					options.animation = { open: { effects: {} }, close: { hide: true, effects: {} } };
				}
			},

			_resize: function () {
				kendo.resize(this.element.children());
			},

			_resizable: function () {
				var resizable = this.options.resizable;
				var wrapper = this.wrapper;

				if (this.resizing) {
					wrapper
						.off("dblclick" + NS)
						.children(KWINDOWRESIZEHANDLES).remove();

					this.resizing.destroy();
					this.resizing = null;
				}

				if (resizable) {
					wrapper.on("dblclick" + NS, KWINDOWTITLEBAR, proxy(function (e) {
						if (!$(e.target).closest(".k-window-action").length) {
							this.toggleMaximization();
						}
					}, this));

					each("n e s w se sw ne nw".split(" "), function (index, handler) {
						wrapper.append(templates.resizeHandle(handler));
					});

					this.resizing = new WindowResizing(this);
				}

				wrapper = null;
			},

			_draggable: function () {
				var draggable = this.options.draggable;

				if (this.dragging) {
					this.dragging.destroy();
					this.dragging = null;
				}
				if (draggable) {
					this.dragging = new WindowDragging(this, draggable.dragHandle || KWINDOWTITLEBAR);
				}
			},

			setOptions: function (options) {
				Widget.fn.setOptions.call(this, options);
				this._animations();
				this._dimensions();
				this._position();
				this._resizable();
				this._draggable();
			},

			events: [
				OPEN,
				ACTIVATE,
				DEACTIVATE,
				CLOSE,
				REFRESH,
				RESIZE,
				DRAGSTART,
				DRAGEND,
				ERROR
			],

			options: {
				name: "Window",
				animation: {
					open: {
						effects: { zoom: { direction: "in" }, fade: { direction: "in" } },
						duration: 350
					},
					close: {
						effects: { zoom: { direction: "out", properties: { scale: 0.7 } }, fade: { direction: "out" } },
						duration: 350,
						hide: true
					}
				},
				title: "",
				actions: ["Close"],
				autoFocus: true,
				modal: false,
				resizable: true,
				draggable: true,
				minWidth: 90,
				minHeight: 50,
				maxWidth: Infinity,
				maxHeight: Infinity,
				pinned: false,
				position: {},
				content: null,
				visible: null,
				height: null,
				width: null,
				appendTo: "body"
			},

			_closable: function () {
				return $.inArray("close", $.map(this.options.actions, function (x) { return x.toLowerCase(); })) > -1;
			},

			_keydown: function (e) {
				var that = this,
					options = that.options,
					keys = kendo.keys,
					keyCode = e.keyCode,
					wrapper = that.wrapper,
					offset, handled,
					distance = 10,
					isMaximized = that.options.isMaximized,
					newWidth, newHeight, w, h;

				if (e.target != e.currentTarget || that._closing) {
					return;
				}

				if (keyCode == keys.ESC && that._closable()) {
					that._close(false);
				}

				if (options.draggable && !e.ctrlKey && !isMaximized) {
					offset = kendo.getOffset(wrapper);

					if (keyCode == keys.UP) {
						handled = wrapper.css("top", offset.top - distance);
					} else if (keyCode == keys.DOWN) {
						handled = wrapper.css("top", offset.top + distance);
					} else if (keyCode == keys.LEFT) {
						handled = wrapper.css("left", offset.left - distance);
					} else if (keyCode == keys.RIGHT) {
						handled = wrapper.css("left", offset.left + distance);
					}
				}

				if (options.resizable && e.ctrlKey && !isMaximized) {
					if (keyCode == keys.UP) {
						handled = true;
						newHeight = wrapper.height() - distance;
					} else if (keyCode == keys.DOWN) {
						handled = true;
						newHeight = wrapper.height() + distance;
					} if (keyCode == keys.LEFT) {
						handled = true;
						newWidth = wrapper.width() - distance;
					} else if (keyCode == keys.RIGHT) {
						handled = true;
						newWidth = wrapper.width() + distance;
					}

					if (handled) {
						w = constrain(newWidth, options.minWidth, options.maxWidth);
						h = constrain(newHeight, options.minHeight, options.maxHeight);

						if (!isNaN(w)) {
							wrapper.width(w);
							that.options.width = w + "px";
						}
						if (!isNaN(h)) {
							wrapper.height(h);
							that.options.height = h + "px";
						}

						that.resize();
					}
				}

				if (handled) {
					e.preventDefault();
				}
			},

			_overlay: function (visible) {
				var overlay = this.appendTo.children(KOVERLAY),
					wrapper = this.wrapper;

				if (!overlay.length) {
					overlay = $("<div class='k-overlay' />");
				}

				overlay
					.insertBefore(wrapper[0])
					.toggle(visible)
					.css(ZINDEX, parseInt(wrapper.css(ZINDEX), 10) - 1);

				return overlay;
			},

			_actionForIcon: function (icon) {
				var iconClass = /\bk-i-\w+\b/.exec(icon[0].className)[0];

				return {
					"k-i-close": "_close",
					"k-i-maximize": "maximize",
					"k-i-minimize": "minimize",
					"k-i-restore": "restore",
					"k-i-refresh": "refresh",
					"k-i-pin": "pin",
					"k-i-unpin": "unpin"
				}[iconClass];
			},

			_windowActionHandler: function (e) {
				if (this._closing) {
					return;
				}

				var icon = $(e.target).closest(".k-window-action").find(".k-icon");
				var action = this._actionForIcon(icon);

				if (action) {
					e.preventDefault();
					this[action]();
					return false;
				}
			},

			_modals: function () {
				var that = this;

				var zStack = $(KWINDOW).filter(function () {
					var dom = $(this);
					var object = that._object(dom);
					var options = object && object.options;

					return options && options.modal && options.visible && dom.is(VISIBLE);
				}).sort(function (a, b) {
					return +$(a).css("zIndex") - +$(b).css("zIndex");
				});

				that = null;

				return zStack;
			},

			_object: function (element) {
				var content = element.children(KWINDOWCONTENT);

				return content.data("kendoWindow") || content.data("kendo" + this.options.name);
			},

			center: function () {
				var that = this,
					position = that.options.position,
					wrapper = that.wrapper,
					documentWindow = $(window),
					scrollTop = 0,
					scrollLeft = 0,
					newTop, newLeft;

				if (that.options.isMaximized) {
					return that;
				}

				if (!that.options.pinned) {
					scrollTop = documentWindow.scrollTop();
					scrollLeft = documentWindow.scrollLeft();
				}

				newLeft = scrollLeft + Math.max(0, (documentWindow.width() - wrapper.width()) / 2);
				newTop = scrollTop + Math.max(0, (documentWindow.height() - wrapper.height()) / 2);

				wrapper.css({
					left: newLeft,
					top: newTop
				});

				position.top = newTop;
				position.left = newLeft;

				return that;
			},

			title: function (text) {
				var that = this,
					wrapper = that.wrapper,
					options = that.options,
					titleBar = wrapper.children(KWINDOWTITLEBAR),
					title = titleBar.children(KWINDOWTITLE),
					titleBarHeight = titleBar.outerHeight();

				if (!arguments.length) {
					return title.text();
				}

				if (text === false) {
					wrapper.addClass("k-window-titleless");
					titleBar.remove();
				} else {
					if (!titleBar.length) {
						wrapper.prepend(templates.titlebar(extend(templates, options)));
					}

					wrapper.css("padding-top", titleBarHeight);
					titleBar.css("margin-top", -titleBarHeight);
				}

				title.text(text);
				that.options.title = text;

				return that;
			},

			content: function (html) {
				var content = this.wrapper.children(KWINDOWCONTENT),
					scrollContainer = content.children(".km-scroll-container");

				content = scrollContainer[0] ? scrollContainer : content;

				if (!defined(html)) {
					return content.html();
				}

				kendo.destroy(this.element.children());

				content.empty().html(html);
				return this;
			},

			open: function () {
				var that = this,
					wrapper = that.wrapper,
					options = that.options,
					showOptions = options.animation.open,
					contentElement = wrapper.children(KWINDOWCONTENT),
					overlay;

				if (!that.trigger(OPEN)) {
					if (that._closing) {
						wrapper.kendoStop(true, true);
					}

					that._closing = false;

					that.toFront();

					if (options.autoFocus) {
						that.element.focus();
					}

					options.visible = true;

					if (options.modal) {
						overlay = that._overlay(false);

						overlay.kendoStop(true, true);

						if (showOptions.duration && kendo.effects.Fade) {
							var overlayFx = kendo.fx(overlay).fadeIn();
							overlayFx.duration(showOptions.duration || 0);
							overlayFx.endValue(0.5);
							overlayFx.play();
						} else {
							overlay.css("opacity", 0.5);
						}

						overlay.show();
					}

					if (!wrapper.is(VISIBLE)) {
						contentElement.css(OVERFLOW, HIDDEN);
						wrapper.show().kendoStop().kendoAnimate({
							effects: showOptions.effects,
							duration: showOptions.duration,
							complete: proxy(this._activate, this)
						});
					}
				}

				if (options.isMaximized) {
					that._documentScrollTop = $(document).scrollTop();
					$("html, body").css(OVERFLOW, HIDDEN);
				}

				return that;
			},

			_activate: function () {
				if (this.options.autoFocus) {
					this.element.focus();
				}
				this.trigger(ACTIVATE);
				this.wrapper.children(KWINDOWCONTENT).css(OVERFLOW, "");
			},

			_removeOverlay: function (suppressAnimation) {
				var modals = this._modals();
				var options = this.options;
				var hideOverlay = options.modal && !modals.length;
				var overlay = options.modal ? this._overlay(true) : $(undefined);
				var hideOptions = options.animation.close;

				if (hideOverlay) {
					if (!suppressAnimation && hideOptions.duration && kendo.effects.Fade) {
						var overlayFx = kendo.fx(overlay).fadeOut();
						overlayFx.duration(hideOptions.duration || 0);
						overlayFx.startValue(0.5);
						overlayFx.play();
					} else {
						this._overlay(false).remove();
					}
				} else if (modals.length) {
					this._object(modals.last())._overlay(true);
				}
			},

			_close: function (systemTriggered) {
				var that = this,
					wrapper = that.wrapper,
					options = that.options,
					showOptions = options.animation.open,
					hideOptions = options.animation.close;

				if (wrapper.is(VISIBLE) && !that.trigger(CLOSE, { userTriggered: !systemTriggered })) {
					that._closing = true;
					options.visible = false;

					$(KWINDOW).each(function (i, element) {
						var contentElement = $(element).children(KWINDOWCONTENT);

						// Remove overlay set by toFront
						if (element != wrapper && contentElement.find("> ." + KCONTENTFRAME).length > 0) {
							contentElement.children(KOVERLAY).remove();
						}
					});

					this._removeOverlay();

					wrapper.kendoStop().kendoAnimate({
						effects: hideOptions.effects || showOptions.effects,
						reverse: hideOptions.reverse === true,
						duration: hideOptions.duration,
						complete: proxy(this._deactivate, this)
					});
				}

				if (that.options.isMaximized) {
					$("html, body").css(OVERFLOW, "");
					if (that._documentScrollTop && that._documentScrollTop > 0) {
						$(document).scrollTop(that._documentScrollTop);
					}
				}
			},

			_deactivate: function () {
				this.wrapper.hide().css("opacity", "");
				this.trigger(DEACTIVATE);
				var lastModal = this._object(this._modals().last());
				if (lastModal) {
					lastModal.toFront();
				}
			},

			close: function () {
				this._close(true);
				return this;
			},

			_actionable: function (element) {
				return $(element).is(TITLEBAR_BUTTONS + "," + TITLEBAR_BUTTONS + " .k-icon,:input,a");
			},

			_shouldFocus: function (target) {
				var active = activeElement(),
					element = this.element;

				return this.options.autoFocus &&
						!$(active).is(element) &&
						!this._actionable(target) &&
						(!element.find(active).length || !element.find(target).length);
			},

			toFront: function (e) {
				var that = this,
					wrapper = that.wrapper,
					currentWindow = wrapper[0],
					zIndex = +wrapper.css(ZINDEX),
					originalZIndex = zIndex,
					target = (e && e.target) || null;

				$(KWINDOW).each(function (i, element) {
					var windowObject = $(element),
						zIndexNew = windowObject.css(ZINDEX),
						contentElement = windowObject.children(KWINDOWCONTENT);

					if (!isNaN(zIndexNew)) {
						zIndex = Math.max(+zIndexNew, zIndex);
					}

					// Add overlay to windows with iframes and lower z-index to prevent
					// trapping of events when resizing / dragging
					if (element != currentWindow && contentElement.find("> ." + KCONTENTFRAME).length > 0) {
						contentElement.append(templates.overlay);
					}
				});

				if (!wrapper[0].style.zIndex || originalZIndex < zIndex) {
					wrapper.css(ZINDEX, zIndex + 2);
				}
				that.element.find("> .k-overlay").remove();

				if (that._shouldFocus(target)) {
					that.element.focus();

					var scrollTop = $(window).scrollTop(),
						windowTop = parseInt(wrapper.position().top, 10);

					if (windowTop > 0 && windowTop < scrollTop) {
						if (scrollTop > 0) {
							$(window).scrollTop(windowTop);
						} else {
							wrapper.css("top", scrollTop);
						}
					}
				}

				wrapper = null;

				return that;
			},

			toggleMaximization: function () {
				if (this._closing) {
					return this;
				}

				return this[this.options.isMaximized ? "restore" : "maximize"]();
			},

			restore: function () {
				var that = this;
				var options = that.options;
				var minHeight = options.minHeight;
				var restoreOptions = that.restoreOptions;

				if (!options.isMaximized && !options.isMinimized) {
					return that;
				}

				if (minHeight && minHeight != Infinity) {
					that.wrapper.css("min-height", minHeight);
				}

				that.wrapper
					.css({
						position: options.pinned ? "fixed" : "absolute",
						left: restoreOptions.left,
						top: restoreOptions.top,
						width: restoreOptions.width,
						height: restoreOptions.height
					})
					.removeClass(MAXIMIZEDSTATE)
					.find(".k-window-content,.k-resize-handle").show().end()
					.find(".k-window-titlebar .k-i-restore").parent().remove().end().end()
					.find(MINIMIZE_MAXIMIZE).parent().show().end().end()
					.find(PIN_UNPIN).parent().show();

				that.options.width = restoreOptions.width;
				that.options.height = restoreOptions.height;

				$("html, body").css(OVERFLOW, "");
				if (this._documentScrollTop && this._documentScrollTop > 0) {
					$(document).scrollTop(this._documentScrollTop);
				}

				options.isMaximized = options.isMinimized = false;

				that.resize();

				return that;
			},

			maximize: sizingAction("maximize", function () {
				var that = this,
					wrapper = that.wrapper,
					position = wrapper.position();

				extend(that.restoreOptions, {
					left: position.left,
					top: position.top
				});

				wrapper.css({
					left: 0,
					top: 0,
					position: "fixed"
				})
					.addClass(MAXIMIZEDSTATE);

				this._documentScrollTop = $(document).scrollTop();
				$("html, body").css(OVERFLOW, HIDDEN);

				that.options.isMaximized = true;

				that._onDocumentResize();
			}),

			minimize: sizingAction("minimize", function () {
				var that = this;

				that.wrapper.css({
					height: "",
					minHeight: ""
				});

				that.element.hide();

				that.options.isMinimized = true;
			}),

			pin: function (force) {
				var that = this,
					win = $(window),
					wrapper = that.wrapper,
					top = parseInt(wrapper.css("top"), 10),
					left = parseInt(wrapper.css("left"), 10);

				if (force || !that.options.pinned && !that.options.isMaximized) {
					wrapper.css({ position: "fixed", top: top - win.scrollTop(), left: left - win.scrollLeft() });
					wrapper.children(KWINDOWTITLEBAR).find(KPIN).addClass("k-i-unpin").removeClass("k-i-pin");

					that.options.pinned = true;
				}
			},

			unpin: function () {
				var that = this,
					win = $(window),
					wrapper = that.wrapper,
					top = parseInt(wrapper.css("top"), 10),
					left = parseInt(wrapper.css("left"), 10);

				if (that.options.pinned && !that.options.isMaximized) {
					wrapper.css({ position: "", top: top + win.scrollTop(), left: left + win.scrollLeft() });
					wrapper.children(KWINDOWTITLEBAR).find(KUNPIN).addClass("k-i-pin").removeClass("k-i-unpin");

					that.options.pinned = false;
				}
			},

			_onDocumentResize: function () {
				var that = this,
					wrapper = that.wrapper,
					wnd = $(window),
					w, h;

				if (!that.options.isMaximized) {
					return;
				}

				w = wnd.width();
				h = wnd.height() - parseInt(wrapper.css("padding-top"), 10);

				wrapper.css({
					width: w,
					height: h
				});
				that.options.width = w;
				that.options.height = h;

				that.resize();
			},

			refresh: function (options) {
				var that = this,
					initOptions = that.options,
					element = $(that.element),
					iframe,
					showIframe,
					url;

				if (!isPlainObject(options)) {
					options = { url: options };
				}

				options = extend({}, initOptions.content, options);

				showIframe = defined(initOptions.iframe) ? initOptions.iframe : options.iframe;

				url = options.url;

				if (url) {
					if (!defined(showIframe)) {
						showIframe = !isLocalUrl(url);
					}

					if (!showIframe) {
						// perform AJAX request
						that._ajaxRequest(options);
					} else {
						iframe = element.find("." + KCONTENTFRAME)[0];

						if (iframe) {
							// refresh existing iframe
							iframe.src = url || iframe.src;
						} else {
							// render new iframe
							element.html(templates.contentFrame(extend({}, initOptions, { content: options })));
						}

						element.find("." + KCONTENTFRAME)
							.unbind("load" + NS)
							.on("load" + NS, proxy(this._triggerRefresh, this));
					}
				} else {
					if (options.template) {
						// refresh template
						that.content(template(options.template)({}));
					}

					that.trigger(REFRESH);
				}

				element.toggleClass("k-window-iframecontent", showIframe);

				return that;
			},

			_triggerRefresh: function () {
				this.trigger(REFRESH);
			},

			_ajaxComplete: function () {
				clearTimeout(this._loadingIconTimeout);
				this.wrapper.find(REFRESHICON).removeClass(LOADING);
			},

			_ajaxError: function (xhr, status) {
				this.trigger(ERROR, { status: status, xhr: xhr });
			},

			_ajaxSuccess: function (contentTemplate) {
				return function (data) {
					if (contentTemplate) {
						data = template(contentTemplate)(data || {});
					}

					this.content(data);
					this.element.prop("scrollTop", 0);

					this.trigger(REFRESH);
				};
			},

			_showLoading: function () {
				this.wrapper.find(REFRESHICON).addClass(LOADING);
			},

			_ajaxRequest: function (options) {
				this._loadingIconTimeout = setTimeout(proxy(this._showLoading, this), 100);

				$.ajax(extend({
					type: "GET",
					dataType: "html",
					cache: false,
					error: proxy(this._ajaxError, this),
					complete: proxy(this._ajaxComplete, this),
					success: proxy(this._ajaxSuccess(options.template), this)
				}, options));
			},

			destroy: function () {
				if (this.resizing) {
					this.resizing.destroy();
				}

				if (this.dragging) {
					this.dragging.destroy();
				}

				this.wrapper.off(NS)
					.children(KWINDOWCONTENT).off(NS).end()
					.find(".k-resize-handle,.k-window-titlebar").off(NS);

				$(window).off("resize", this._resizeHandler);

				clearTimeout(this._loadingIconTimeout);

				Widget.fn.destroy.call(this);

				this.unbind(undefined);

				kendo.destroy(this.wrapper);

				this._removeOverlay(true);

				this.wrapper.empty().remove();

				this.wrapper = this.appendTo = this.element = $();
			},

			_createWindow: function () {
				var contentHtml = this.element,
					options = this.options,
					iframeSrcAttributes,
					wrapper,
					isRtl = kendo.support.isRtl(contentHtml);

				if (options.scrollable === false) {
					contentHtml.attr("style", "overflow:hidden;");
				}

				wrapper = $(templates.wrapper(options));

				if (options.title !== false) {
					wrapper.append(templates.titlebar(extend(templates, options)));
				}

				// Collect the src attributes of all iframes and then set them to empty string.
				// This seems to fix this IE9 "feature": http://msdn.microsoft.com/en-us/library/gg622929%28v=VS.85%29.aspx?ppud=4
				iframeSrcAttributes = contentHtml.find("iframe:not(.k-content)").map(function () {
					var src = this.getAttribute("src");
					this.src = "";
					return src;
				});

				// Make sure the wrapper is appended to the body only once. IE9+ will throw exceptions if you move iframes in DOM
				wrapper
					.toggleClass("k-rtl", isRtl)
					.appendTo(this.appendTo)
					.append(contentHtml)
					.find("iframe:not(.k-content)").each(function (index) {
						// Restore the src attribute of the iframes when they are part of the live DOM tree
						this.src = iframeSrcAttributes[index];
					});

				wrapper.find(".k-window-title")
					.css(isRtl ? "left" : "right", wrapper.find(".k-window-actions").outerWidth() + 10);

				contentHtml.show();

				contentHtml.find("[data-role=editor]").each(function () {
					var editor = $(this).data("kendoEditor");

					if (editor) {
						editor.refresh();
					}
				});

				wrapper = contentHtml = null;
			}
		});

		templates = {
			wrapper: template("<div class='k-widget k-window' />"),
			action: template(
				"<a role='button' href='\\#' class='k-window-action k-link'>" +
					"<span role='presentation' class='k-icon k-i-#= name.toLowerCase() #'>#= name #</span>" +
				"</a>"
			),
			titlebar: template(
				"<div class='k-window-titlebar k-header'>&nbsp;" +
					"<span class='k-window-title'>#= title #</span>" +
					"<div class='k-window-actions'>" +
					"# for (var i = 0; i < actions.length; i++) { #" +
						"#= action({ name: actions[i] }) #" +
					"# } #" +
					"</div>" +
				"</div>"
			),
			overlay: "<div class='k-overlay' />",
			contentFrame: template(
				"<iframe frameborder='0' title='#= title #' class='" + KCONTENTFRAME + "' " +
					"src='#= content.url #'>" +
						"This page requires frames in order to show content" +
				"</iframe>"
			),
			resizeHandle: template("<div class='k-resize-handle k-resize-#= data #'></div>")
		};


		function WindowResizing(wnd) {
			this.owner = wnd;
			this._draggable = new Draggable(wnd.wrapper, {
				filter: KWINDOWRESIZEHANDLES,
				group: wnd.wrapper.id + "-resizing",
				dragstart: proxy(this.dragstart, this),
				drag: proxy(this.drag, this),
				dragend: proxy(this.dragend, this)
			});
		}

		WindowResizing.prototype = {
			dragstart: function (e) {
				var wnd = this.owner;
				var wrapper = wnd.wrapper;

				this.elementPadding = parseInt(wnd.wrapper.css("padding-top"), 10);
				this.initialCursorPosition = kendo.getOffset(wrapper, "position");

				this.resizeDirection = e.currentTarget.prop("className").replace("k-resize-handle k-resize-", "");

				this.initialSize = {
					width: wrapper.width(),
					height: wrapper.height()
				};

				this.containerOffset = kendo.getOffset(wnd.appendTo);

				wrapper
					.append(templates.overlay)
					.children(KWINDOWRESIZEHANDLES).not(e.currentTarget).hide();

				$(BODY).css(CURSOR, e.currentTarget.css(CURSOR));
			},
			drag: function (e) {
				var that = this,
					wnd = that.owner,
					wrapper = wnd.wrapper,
					options = wnd.options,
					direction = that.resizeDirection,
					containerOffset = that.containerOffset,
					initialPosition = that.initialCursorPosition,
					initialSize = that.initialSize,
					newWidth, newHeight,
					windowBottom, windowRight,
					x = Math.max(e.x.location, containerOffset.left),
					y = Math.max(e.y.location, containerOffset.top);

				if (direction.indexOf("e") >= 0) {
					newWidth = x - initialPosition.left;

					wrapper.width(constrain(newWidth, options.minWidth, options.maxWidth));
				} else if (direction.indexOf("w") >= 0) {
					windowRight = initialPosition.left + initialSize.width;
					newWidth = constrain(windowRight - x, options.minWidth, options.maxWidth);

					wrapper.css({
						left: windowRight - newWidth - containerOffset.left,
						width: newWidth
					});
				}

				if (direction.indexOf("s") >= 0) {
					newHeight = y - initialPosition.top - that.elementPadding;

					wrapper.height(constrain(newHeight, options.minHeight, options.maxHeight));
				} else if (direction.indexOf("n") >= 0) {
					windowBottom = initialPosition.top + initialSize.height;
					newHeight = constrain(windowBottom - y, options.minHeight, options.maxHeight);

					wrapper.css({
						top: windowBottom - newHeight - containerOffset.top,
						height: newHeight
					});
				}

				if (newWidth) {
					wnd.options.width = newWidth + "px";
				}
				if (newHeight) {
					wnd.options.height = newHeight + "px";
				}

				wnd.resize();
			},
			dragend: function (e) {
				var that = this,
					wnd = that.owner,
					wrapper = wnd.wrapper;

				wrapper
					.find(KOVERLAY).remove().end()
					.children(KWINDOWRESIZEHANDLES).not(e.currentTarget).show();

				$(BODY).css(CURSOR, "");

				if (wnd.touchScroller) {
					wnd.touchScroller.reset();
				}
				if (e.keyCode == 27) {
					wrapper.css(that.initialCursorPosition)
						.css(that.initialSize);
				}

				return false;
			},
			destroy: function () {
				if (this._draggable) {
					this._draggable.destroy();
				}

				this._draggable = this.owner = null;
			}
		};

		function WindowDragging(wnd, dragHandle) {
			this.owner = wnd;
			this._draggable = new Draggable(wnd.wrapper, {
				filter: dragHandle,
				group: wnd.wrapper.id + "-moving",
				dragstart: proxy(this.dragstart, this),
				drag: proxy(this.drag, this),
				dragend: proxy(this.dragend, this),
				dragcancel: proxy(this.dragcancel, this)
			});

			this._draggable.userEvents.stopPropagation = false;
		}

		WindowDragging.prototype = {
			dragstart: function (e) {
				var wnd = this.owner,
					element = wnd.element,
					actions = element.find(".k-window-actions"),
					containerOffset = kendo.getOffset(wnd.appendTo);

				wnd.trigger(DRAGSTART);

				wnd.initialWindowPosition = kendo.getOffset(wnd.wrapper, "position");

				wnd.startPosition = {
					left: e.x.client - wnd.initialWindowPosition.left,
					top: e.y.client - wnd.initialWindowPosition.top
				};

				if (actions.length > 0) {
					wnd.minLeftPosition = actions.outerWidth() + parseInt(actions.css("right"), 10) - element.outerWidth();
				} else {
					wnd.minLeftPosition = 20 - element.outerWidth(); // at least 20px remain visible
				}

				wnd.minLeftPosition -= containerOffset.left;
				wnd.minTopPosition = -containerOffset.top;

				wnd.wrapper
					.append(templates.overlay)
					.children(KWINDOWRESIZEHANDLES).hide();

				$(BODY).css(CURSOR, e.currentTarget.css(CURSOR));
			},

			drag: function (e) {
				var wnd = this.owner,
					position = wnd.options.position,
					newTop = Math.max(e.y.client - wnd.startPosition.top, wnd.minTopPosition),
					newLeft = Math.max(e.x.client - wnd.startPosition.left, wnd.minLeftPosition),
					coordinates = {
						left: newLeft,
						top: newTop
					};

				$(wnd.wrapper).css(coordinates);
				position.top = newTop;
				position.left = newLeft;
			},

			_finishDrag: function () {
				var wnd = this.owner;

				wnd.wrapper
					.children(KWINDOWRESIZEHANDLES).toggle(!wnd.options.isMinimized).end()
					.find(KOVERLAY).remove();

				$(BODY).css(CURSOR, "");
			},

			dragcancel: function (e) {
				this._finishDrag();

				e.currentTarget.closest(KWINDOW).css(this.owner.initialWindowPosition);
			},

			dragend: function () {
				this._finishDrag();

				this.owner.trigger(DRAGEND);

				return false;
			},
			destroy: function () {
				if (this._draggable) {
					this._draggable.destroy();
				}

				this._draggable = this.owner = null;
			}
		};

		kendo.ui.plugin(Window);

	})(window.kendo.jQuery);

return window.kendo;

}, typeof define == 'function' && define.amd ? define : function(_, f){ f(); });
/*
* Kendo UI v2014.1.416 (http://www.telerik.com/kendo-ui)
* Copyright 2014 Telerik AD. All rights reserved.
*
* Kendo UI commercial licenses may be obtained at
* http://www.telerik.com/purchase/license-agreement/kendo-ui-complete
* If you do not own a commercial license, this file shall be governed by the trial license terms.
*/
(function(f, define){
    define([ "./kendo.core" ], f);
})(function(){

	(function ($, undefined) {
		var kendo = window.kendo,
			support = kendo.support,
			ui = kendo.ui,
			Widget = ui.Widget,
			keys = kendo.keys,
			parse = kendo.parseDate,
			adjustDST = kendo.date.adjustDST,
			extractFormat = kendo._extractFormat,
			template = kendo.template,
			getCulture = kendo.getCulture,
			transitions = kendo.support.transitions,
			transitionOrigin = transitions ? transitions.css + "transform-origin" : "",
			cellTemplate = template('<td#=data.cssClass# role="gridcell"><a tabindex="-1" class="k-link" href="\\#" data-#=data.ns#value="#=data.dateString#">#=data.value#</a></td>', { useWithBlock: false }),
			emptyCellTemplate = template('<td role="gridcell">&nbsp;</td>', { useWithBlock: false }),
			browser = kendo.support.browser,
			isIE8 = browser.msie && browser.version < 9,
			ns = ".kendoCalendar",
			CLICK = "click" + ns,
			KEYDOWN_NS = "keydown" + ns,
			ID = "id",
			MIN = "min",
			LEFT = "left",
			SLIDE = "slideIn",
			MONTH = "month",
			CENTURY = "century",
			CHANGE = "change",
			NAVIGATE = "navigate",
			VALUE = "value",
			HOVER = "k-state-hover",
			DISABLED = "k-state-disabled",
			FOCUSED = "k-state-focused",
			OTHERMONTH = "k-other-month",
			OTHERMONTHCLASS = ' class="' + OTHERMONTH + '"',
			TODAY = "k-nav-today",
			CELLSELECTOR = "td:has(.k-link)",
			BLUR = "blur" + ns,
			FOCUS = "focus",
			FOCUS_WITH_NS = FOCUS + ns,
			MOUSEENTER = support.touch ? "touchstart" : "mouseenter",
			MOUSEENTER_WITH_NS = support.touch ? "touchstart" + ns : "mouseenter" + ns,
			MOUSELEAVE = support.touch ? "touchend" + ns + " touchmove" + ns : "mouseleave" + ns,
			MS_PER_MINUTE = 60000,
			MS_PER_DAY = 86400000,
			PREVARROW = "_prevArrow",
			NEXTARROW = "_nextArrow",
			ARIA_DISABLED = "aria-disabled",
			ARIA_SELECTED = "aria-selected",
			proxy = $.proxy,
			extend = $.extend,
			DATE = Date,
			views = {
				month: 0,
				year: 1,
				decade: 2,
				century: 3
			};

		var Calendar = Widget.extend({
			init: function (element, options) {
				var that = this, value, id;

				Widget.fn.init.call(that, element, options);

				element = that.wrapper = that.element;
				options = that.options;

				options.url = window.unescape(options.url);

				that._templates();

				that._header();

				that._footer(that.footer);

				id = element
						.addClass("k-widget k-calendar")
						.on(MOUSEENTER_WITH_NS + " " + MOUSELEAVE, CELLSELECTOR, mousetoggle)
						.on(KEYDOWN_NS, "table.k-content", proxy(that._move, that))
						.on(CLICK, CELLSELECTOR, function (e) {
							var link = e.currentTarget.firstChild;

							if (link.href.indexOf("#") != -1) {
								e.preventDefault();
							}

							that._click($(link));
						})
						.on("mouseup" + ns, "table.k-content, .k-footer", function () {
							that._focusView(that.options.focusOnNav !== false);
						})
						.attr(ID);

				if (id) {
					that._cellID = id + "_cell_selected";
				}

				normalize(options);
				value = parse(options.value, options.format, options.culture);

				that._index = views[options.start];
				that._current = new DATE(+restrictValue(value, options.min, options.max));

				that._addClassProxy = function () {
					that._active = true;
					that._cell.addClass(FOCUSED);
				};

				that._removeClassProxy = function () {
					that._active = false;
					that._cell.removeClass(FOCUSED);
				};

				that.value(value);

				kendo.notify(that);
			},

			options: {
				name: "Calendar",
				value: null,
				min: new DATE(1900, 0, 1),
				max: new DATE(2099, 11, 31),
				dates: [],
				url: "",
				culture: "",
				footer: "",
				format: "",
				month: {},
				start: MONTH,
				depth: MONTH,
				animation: {
					horizontal: {
						effects: SLIDE,
						reverse: true,
						duration: 500,
						divisor: 2
					},
					vertical: {
						effects: "zoomIn",
						duration: 400
					}
				}
			},

			events: [
				CHANGE,
				NAVIGATE
			],

			setOptions: function (options) {
				var that = this;

				normalize(options);

				if (!options.dates[0]) {
					options.dates = that.options.dates;
				}

				Widget.fn.setOptions.call(that, options);

				that._templates();

				that._footer(that.footer);
				that._index = views[that.options.start];

				that.navigate();
			},

			destroy: function () {
				var that = this,
					today = that._today;

				that.element.off(ns);
				that._title.off(ns);
				that[PREVARROW].off(ns);
				that[NEXTARROW].off(ns);

				kendo.destroy(that._table);

				if (today) {
					kendo.destroy(today.off(ns));
				}

				Widget.fn.destroy.call(that);
			},

			current: function () {
				return this._current;
			},

			view: function () {
				return this._view;
			},

			focus: function (table) {
				table = table || this._table;
				this._bindTable(table);
				table.focus();
			},

			min: function (value) {
				return this._option(MIN, value);
			},

			max: function (value) {
				return this._option("max", value);
			},

			navigateToPast: function () {
				this._navigate(PREVARROW, -1);
			},

			navigateToFuture: function () {
				this._navigate(NEXTARROW, 1);
			},

			navigateUp: function () {
				var that = this,
					index = that._index;

				if (that._title.hasClass(DISABLED)) {
					return;
				}

				that.navigate(that._current, ++index);
			},

			navigateDown: function (value) {
				var that = this,
				index = that._index,
				depth = that.options.depth;

				if (!value) {
					return;
				}

				if (index === views[depth]) {
					if (+that._value != +value) {
						that.value(value);
						that.trigger(CHANGE);
					}
					return;
				}

				that.navigate(value, --index);
			},

			navigate: function (value, view) {
				view = isNaN(view) ? views[view] : view;

				var that = this,
					options = that.options,
					culture = options.culture,
					min = options.min,
					max = options.max,
					title = that._title,
					from = that._table,
					old = that._oldTable,
					selectedValue = that._value,
					currentValue = that._current,
					future = value && +value > +currentValue,
					vertical = view !== undefined && view !== that._index,
					to, currentView, compare,
					disabled;

				if (!value) {
					value = currentValue;
				}

				that._current = value = new DATE(+restrictValue(value, min, max));

				if (view === undefined) {
					view = that._index;
				} else {
					that._index = view;
				}

				that._view = currentView = calendar.views[view];
				compare = currentView.compare;

				disabled = view === views[CENTURY];
				title.toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);

				disabled = compare(value, min) < 1;
				that[PREVARROW].toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);

				disabled = compare(value, max) > -1;
				that[NEXTARROW].toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);

				if (from && old && old.data("animating")) {
					old.kendoStop(true, true);
					from.kendoStop(true, true);
				}

				that._oldTable = from;

				if (!from || that._changeView) {
					title.html(currentView.title(value, min, max, culture));

					that._table = to = $(currentView.content(extend({
						min: min,
						max: max,
						date: value,
						url: options.url,
						dates: options.dates,
						format: options.format,
						culture: culture
					}, that[currentView.name])));

					makeUnselectable(to);

					that._animate({
						from: from,
						to: to,
						vertical: vertical,
						future: future
					});

					that._focus(value);
					that.trigger(NAVIGATE);
				}

				if (view === views[options.depth] && selectedValue) {
					that._class("k-state-selected", currentView.toDateString(selectedValue));
				}

				that._class(FOCUSED, currentView.toDateString(value));

				if (!from && that._cell) {
					that._cell.removeClass(FOCUSED);
				}

				that._changeView = true;
			},

			value: function (value) {
				var that = this,
				view = that._view,
				options = that.options,
				old = that._view,
				min = options.min,
				max = options.max;

				if (value === undefined) {
					return that._value;
				}

				value = parse(value, options.format, options.culture);

				if (value !== null) {
					value = new DATE(+value);

					if (!isInRange(value, min, max)) {
						value = null;
					}
				}

				that._value = value;

				if (old && value === null && that._cell) {
					that._cell.removeClass("k-state-selected");
				} else {
					that._changeView = !value || view && view.compare(value, that._current) !== 0;
					that.navigate(value);
				}
			},

			_move: function (e) {
				var that = this,
					options = that.options,
					key = e.keyCode,
					view = that._view,
					index = that._index,
					currentValue = new DATE(+that._current),
					isRtl = kendo.support.isRtl(that.wrapper),
					value, prevent, method, temp;

				if (e.target === that._table[0]) {
					that._active = true;
				}

				if (e.ctrlKey) {
					if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {
						that.navigateToFuture();
						prevent = true;
					} else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {
						that.navigateToPast();
						prevent = true;
					} else if (key == keys.UP) {
						that.navigateUp();
						prevent = true;
					} else if (key == keys.DOWN) {
						that._click($(that._cell[0].firstChild));
						prevent = true;
					}
				} else {
					if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {
						value = 1;
						prevent = true;
					} else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {
						value = -1;
						prevent = true;
					} else if (key == keys.UP) {
						value = index === 0 ? -7 : -4;
						prevent = true;
					} else if (key == keys.DOWN) {
						value = index === 0 ? 7 : 4;
						prevent = true;
					} else if (key == keys.ENTER) {
						that._click($(that._cell[0].firstChild));
						prevent = true;
					} else if (key == keys.HOME || key == keys.END) {
						method = key == keys.HOME ? "first" : "last";
						temp = view[method](currentValue);
						currentValue = new DATE(temp.getFullYear(), temp.getMonth(), temp.getDate(), currentValue.getHours(), currentValue.getMinutes(), currentValue.getSeconds(), currentValue.getMilliseconds());
						prevent = true;
					} else if (key == keys.PAGEUP) {
						prevent = true;
						that.navigateToPast();
					} else if (key == keys.PAGEDOWN) {
						prevent = true;
						that.navigateToFuture();
					}

					if (value || method) {
						if (!method) {
							view.setDate(currentValue, value);
						}

						that._focus(restrictValue(currentValue, options.min, options.max));
					}
				}

				if (prevent) {
					e.preventDefault();
				}

				return that._current;
			},

			_animate: function (options) {
				var that = this,
					from = options.from,
					to = options.to,
					active = that._active;

				if (!from) {
					to.insertAfter(that.element[0].firstChild);
					that._bindTable(to);
				} else if (from.parent().data("animating")) {
					from.parent().kendoStop(true, true).remove();
					from.remove();

					to.insertAfter(that.element[0].firstChild);
					that._focusView(active);
				} else if (!from.is(":visible") || that.options.animation === false) {
					to.insertAfter(from);
					from.remove();

					that._focusView(active);
				} else {
					that[options.vertical ? "_vertical" : "_horizontal"](from, to, options.future);
				}
			},

			_horizontal: function (from, to, future) {
				var that = this,
					active = that._active,
					horizontal = that.options.animation.horizontal,
					effects = horizontal.effects,
					viewWidth = from.outerWidth();

				if (effects && effects.indexOf(SLIDE) != -1) {
					from.add(to).css({ width: viewWidth });

					from.wrap("<div/>");

					that._focusView(active, from);

					from.parent()
						.css({
							position: "relative",
							width: viewWidth * 2,
							"float": LEFT,
							"margin-left": future ? 0 : -viewWidth
						});

					to[future ? "insertAfter" : "insertBefore"](from);

					extend(horizontal, {
						effects: SLIDE + ":" + (future ? "right" : LEFT),
						complete: function () {
							from.remove();
							to.unwrap();

							that._focusView(active);

							that._oldTable = undefined;
						}
					});

					from.parent().kendoStop(true, true).kendoAnimate(horizontal);
				}
			},

			_vertical: function (from, to) {
				var that = this,
					vertical = that.options.animation.vertical,
					effects = vertical.effects,
					active = that._active, //active state before from's blur
					cell, position;

				if (effects && effects.indexOf("zoom") != -1) {
					to.css({
						position: "absolute",
						top: from.prev().outerHeight(),
						left: 0
					}).insertBefore(from);

					if (transitionOrigin) {
						cell = that._cellByDate(that._view.toDateString(that._current));
						position = cell.position();
						position = (position.left + parseInt(cell.width() / 2, 10)) + "px" + " " + (position.top + parseInt(cell.height() / 2, 10) + "px");
						to.css(transitionOrigin, position);
					}

					from.kendoStop(true, true).kendoAnimate({
						effects: "fadeOut",
						duration: 600,
						complete: function () {
							from.remove();

							to.css({
								position: "static",
								top: 0,
								left: 0
							});

							that._focusView(active);

							that._oldTable = undefined;
						}
					});

					to.kendoStop(true, true).kendoAnimate(vertical);
				}
			},

			_cellByDate: function (value) {
				return this._table.find("td:not(." + OTHERMONTH + ")")
						   .filter(function () {
						   	return $(this.firstChild).attr(kendo.attr(VALUE)) === value;
						   });
			},

			_class: function (className, value) {
				var that = this,
					id = that._cellID,
					cell = that._cell;

				if (cell) {
					cell.removeAttr(ARIA_SELECTED)
						.removeAttr("aria-label")
						.removeAttr(ID);
				}

				cell = that._table
						   .find("td:not(." + OTHERMONTH + ")")
						   .removeClass(className)
						   .filter(function () {
						   	return $(this.firstChild).attr(kendo.attr(VALUE)) === value;
						   })
						   .attr(ARIA_SELECTED, true);

				if (className === FOCUSED && !that._active && that.options.focusOnNav !== false) {
					className = "";
				}

				cell.addClass(className);

				if (cell[0]) {
					that._cell = cell;
				}

				if (id) {
					cell.attr(ID, id);
					that._table.removeAttr("aria-activedescendant").attr("aria-activedescendant", id);
				}
			},

			_bindTable: function (table) {
				table
					.on(FOCUS_WITH_NS, this._addClassProxy)
					.on(BLUR, this._removeClassProxy);
			},

			_click: function (link) {
				var that = this,
					options = that.options,
					currentValue = new Date(+that._current),
					value = link.attr(kendo.attr(VALUE)).split("/");

				//Safari cannot create correctly date from "1/1/2090"
				value = new DATE(value[0], value[1], value[2]);
				adjustDST(value, 0);

				that._view.setDate(currentValue, value);

				that.navigateDown(restrictValue(currentValue, options.min, options.max));
			},

			_focus: function (value) {
				var that = this,
					view = that._view;

				if (view.compare(value, that._current) !== 0) {
					that.navigate(value);
				} else {
					that._current = value;
					that._class(FOCUSED, view.toDateString(value));
				}
			},

			_focusView: function (active, table) {
				if (active) {
					this.focus(table);
				}
			},

			_footer: function (template) {
				var that = this,
					today = getToday(),
					element = that.element,
					footer = element.find(".k-footer");

				if (!template) {
					that._toggle(false);
					footer.hide();
					return;
				}

				if (!footer[0]) {
					footer = $('<div class="k-footer"><a href="#" class="k-link k-nav-today"></a></div>').appendTo(element);
				}

				that._today = footer.show()
									.find(".k-link")
									.html(template(today))
									.attr("title", kendo.toString(today, "D", that.options.culture));

				that._toggle();
			},

			_header: function () {
				var that = this,
				element = that.element,
				links;

				if (!element.find(".k-header")[0]) {
					element.html('<div class="k-header">' +
								 '<a href="#" role="button" class="k-link k-nav-prev"><span class="k-icon k-i-arrow-w"></span></a>' +
								 '<a href="#" role="button" aria-live="assertive" aria-atomic="true" class="k-link k-nav-fast"></a>' +
								 '<a href="#" role="button" class="k-link k-nav-next"><span class="k-icon k-i-arrow-e"></span></a>' +
								 '</div>');
				}

				links = element.find(".k-link")
							   .on(MOUSEENTER_WITH_NS + " " + MOUSELEAVE + " " + FOCUS_WITH_NS + " " + BLUR, mousetoggle)
							   .click(false);

				that._title = links.eq(1).on(CLICK, function () { that._focusView(that.options.focusOnNav !== false); that.navigateUp(); });
				that[PREVARROW] = links.eq(0).on(CLICK, function () { that._focusView(that.options.focusOnNav !== false); that.navigateToPast(); });
				that[NEXTARROW] = links.eq(2).on(CLICK, function () { that._focusView(that.options.focusOnNav !== false); that.navigateToFuture(); });
			},

			_navigate: function (arrow, modifier) {
				var that = this,
					index = that._index + 1,
					currentValue = new DATE(+that._current);

				arrow = that[arrow];

				if (!arrow.hasClass(DISABLED)) {
					if (index > 3) {
						currentValue.setFullYear(currentValue.getFullYear() + 100 * modifier);
					} else {
						calendar.views[index].setDate(currentValue, modifier);
					}

					that.navigate(currentValue);
				}
			},

			_option: function (option, value) {
				var that = this,
					options = that.options,
					currentValue = that._value || that._current,
					isBigger;

				if (value === undefined) {
					return options[option];
				}

				value = parse(value, options.format, options.culture);

				if (!value) {
					return;
				}

				options[option] = new DATE(+value);

				if (option === MIN) {
					isBigger = value > currentValue;
				} else {
					isBigger = currentValue > value;
				}

				if (isBigger || isEqualMonth(currentValue, value)) {
					if (isBigger) {
						that._value = null;
					}
					that._changeView = true;
				}

				if (!that._changeView) {
					that._changeView = !!(options.month.content || options.month.empty);
				}

				that.navigate(that._value);

				that._toggle();
			},

			_toggle: function (toggle) {
				var that = this,
					options = that.options,
					link = that._today;

				if (toggle === undefined) {
					toggle = isInRange(getToday(), options.min, options.max);
				}

				if (link) {
					link.off(CLICK);

					if (toggle) {
						link.addClass(TODAY)
							.removeClass(DISABLED)
							.on(CLICK, proxy(that._todayClick, that));
					} else {
						link.removeClass(TODAY)
							.addClass(DISABLED)
							.on(CLICK, prevent);
					}
				}
			},

			_todayClick: function (e) {
				var that = this,
					depth = views[that.options.depth],
					today = getToday();

				e.preventDefault();

				if (that._view.compare(that._current, today) === 0 && that._index == depth) {
					that._changeView = false;
				}

				that._value = today;
				that.navigate(today, depth);

				that.trigger(CHANGE);
			},

			_templates: function () {
				var that = this,
					options = that.options,
					footer = options.footer,
					month = options.month,
					content = month.content,
					empty = month.empty;

				that.month = {
					content: template('<td#=data.cssClass# role="gridcell"><a tabindex="-1" class="k-link#=data.linkClass#" href="#=data.url#" ' + kendo.attr("value") + '="#=data.dateString#" title="#=data.title#">' + (content || "#=data.value#") + '</a></td>', { useWithBlock: !!content }),
					empty: template('<td role="gridcell">' + (empty || "&nbsp;") + "</td>", { useWithBlock: !!empty })
				};

				that.footer = footer !== false ? template(footer || '#= kendo.toString(data,"D","' + options.culture + '") #', { useWithBlock: false }) : null;
			}
		});

		ui.plugin(Calendar);

		var calendar = {
			firstDayOfMonth: function (date) {
				return new DATE(
					date.getFullYear(),
					date.getMonth(),
					1
				);
			},

			firstVisibleDay: function (date, calendarInfo) {
				calendarInfo = calendarInfo || kendo.culture().calendar;

				var firstDay = calendarInfo.firstDay,
				firstVisibleDay = new DATE(date.getFullYear(), date.getMonth(), 0, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());

				while (firstVisibleDay.getDay() != firstDay) {
					calendar.setTime(firstVisibleDay, -1 * MS_PER_DAY);
				}

				return firstVisibleDay;
			},

			setTime: function (date, time) {
				var tzOffsetBefore = date.getTimezoneOffset(),
				resultDATE = new DATE(date.getTime() + time),
				tzOffsetDiff = resultDATE.getTimezoneOffset() - tzOffsetBefore;

				date.setTime(resultDATE.getTime() + tzOffsetDiff * MS_PER_MINUTE);
			},
			views: [{
				name: MONTH,
				title: function (date, min, max, culture) {
					return getCalendarInfo(culture).months.names[date.getMonth()] + " " + date.getFullYear();
				},
				content: function (options) {
					var that = this,
					idx = 0,
					min = options.min,
					max = options.max,
					date = options.date,
					dates = options.dates,
					format = options.format,
					culture = options.culture,
					navigateUrl = options.url,
					hasUrl = navigateUrl && dates[0],
					currentCalendar = getCalendarInfo(culture),
					firstDayIdx = currentCalendar.firstDay,
					days = currentCalendar.days,
					names = shiftArray(days.names, firstDayIdx),
					shortNames = shiftArray(days.namesShort, firstDayIdx),
					start = calendar.firstVisibleDay(date, currentCalendar),
					firstDayOfMonth = that.first(date),
					lastDayOfMonth = that.last(date),
					toDateString = that.toDateString,
					today = new DATE(),
					html = '<table tabindex="0" role="grid" class="k-content" cellspacing="0"><thead><tr role="row">';

					for (; idx < 7; idx++) {
						html += '<th scope="col" title="' + names[idx] + '">' + shortNames[idx] + '</th>';
					}

					today = new DATE(today.getFullYear(), today.getMonth(), today.getDate());
					adjustDST(today, 0);
					today = +today;

					return view({
						cells: 42,
						perRow: 7,
						html: html += '</tr></thead><tbody><tr role="row">',
						start: new DATE(start.getFullYear(), start.getMonth(), start.getDate()),
						min: new DATE(min.getFullYear(), min.getMonth(), min.getDate()),
						max: new DATE(max.getFullYear(), max.getMonth(), max.getDate()),
						content: options.content,
						empty: options.empty,
						setter: that.setDate,
						build: function (date) {
							var cssClass = [],
								day = date.getDay(),
								linkClass = "",
								url = "#";

							if (date < firstDayOfMonth || date > lastDayOfMonth) {
								cssClass.push(OTHERMONTH);
							}

							if (+date === today) {
								cssClass.push("k-today");
							}

							if (day === 0 || day === 6) {
								cssClass.push("k-weekend");
							}

							if (hasUrl && inArray(+date, dates)) {
								url = navigateUrl.replace("{0}", kendo.toString(date, format, culture));
								linkClass = " k-action-link";
							}

							return {
								date: date,
								dates: dates,
								ns: kendo.ns,
								title: kendo.toString(date, "D", culture),
								value: date.getDate(),
								dateString: toDateString(date),
								cssClass: cssClass[0] ? ' class="' + cssClass.join(" ") + '"' : "",
								linkClass: linkClass,
								url: url
							};
						}
					});
				},
				first: function (date) {
					return calendar.firstDayOfMonth(date);
				},
				last: function (date) {
					var last = new DATE(date.getFullYear(), date.getMonth() + 1, 0),
						first = calendar.firstDayOfMonth(date),
						timeOffset = Math.abs(last.getTimezoneOffset() - first.getTimezoneOffset());

					if (timeOffset) {
						last.setHours(first.getHours() + (timeOffset / 60));
					}

					return last;
				},
				compare: function (date1, date2) {
					var result,
					month1 = date1.getMonth(),
					year1 = date1.getFullYear(),
					month2 = date2.getMonth(),
					year2 = date2.getFullYear();

					if (year1 > year2) {
						result = 1;
					} else if (year1 < year2) {
						result = -1;
					} else {
						result = month1 == month2 ? 0 : month1 > month2 ? 1 : -1;
					}

					return result;
				},
				setDate: function (date, value) {
					var hours = date.getHours();
					if (value instanceof DATE) {
						date.setFullYear(value.getFullYear(), value.getMonth(), value.getDate());
					} else {
						calendar.setTime(date, value * MS_PER_DAY);
					}
					adjustDST(date, hours);
				},
				toDateString: function (date) {
					return date.getFullYear() + "/" + date.getMonth() + "/" + date.getDate();
				}
			},
			{
				name: "year",
				title: function (date) {
					return date.getFullYear();
				},
				content: function (options) {
					var namesAbbr = getCalendarInfo(options.culture).months.namesAbbr,
					toDateString = this.toDateString,
					min = options.min,
					max = options.max;

					return view({
						min: new DATE(min.getFullYear(), min.getMonth(), 1),
						max: new DATE(max.getFullYear(), max.getMonth(), 1),
						start: new DATE(options.date.getFullYear(), 0, 1),
						setter: this.setDate,
						build: function (date) {
							return {
								value: namesAbbr[date.getMonth()],
								ns: kendo.ns,
								dateString: toDateString(date),
								cssClass: ""
							};
						}
					});
				},
				first: function (date) {
					return new DATE(date.getFullYear(), 0, date.getDate());
				},
				last: function (date) {
					return new DATE(date.getFullYear(), 11, date.getDate());
				},
				compare: function (date1, date2) {
					return compare(date1, date2);
				},
				setDate: function (date, value) {
					var month,
						hours = date.getHours();

					if (value instanceof DATE) {
						month = value.getMonth();

						date.setFullYear(value.getFullYear(), month, date.getDate());

						if (month !== date.getMonth()) {
							date.setDate(0);
						}
					} else {
						month = date.getMonth() + value;

						date.setMonth(month);

						if (month > 11) {
							month -= 12;
						}

						if (month > 0 && date.getMonth() != month) {
							date.setDate(0);
						}
					}

					adjustDST(date, hours);
				},
				toDateString: function (date) {
					return date.getFullYear() + "/" + date.getMonth() + "/1";
				}
			},
			{
				name: "decade",
				title: function (date, min, max) {
					return title(date, min, max, 10);
				},
				content: function (options) {
					var year = options.date.getFullYear(),
					toDateString = this.toDateString;

					return view({
						start: new DATE(year - year % 10 - 1, 0, 1),
						min: new DATE(options.min.getFullYear(), 0, 1),
						max: new DATE(options.max.getFullYear(), 0, 1),
						setter: this.setDate,
						build: function (date, idx) {
							return {
								value: date.getFullYear(),
								ns: kendo.ns,
								dateString: toDateString(date),
								cssClass: idx === 0 || idx == 11 ? OTHERMONTHCLASS : ""
							};
						}
					});
				},
				first: function (date) {
					var year = date.getFullYear();
					return new DATE(year - year % 10, date.getMonth(), date.getDate());
				},
				last: function (date) {
					var year = date.getFullYear();
					return new DATE(year - year % 10 + 9, date.getMonth(), date.getDate());
				},
				compare: function (date1, date2) {
					return compare(date1, date2, 10);
				},
				setDate: function (date, value) {
					setDate(date, value, 1);
				},
				toDateString: function (date) {
					return date.getFullYear() + "/0/1";
				}
			},
			{
				name: CENTURY,
				title: function (date, min, max) {
					return title(date, min, max, 100);
				},
				content: function (options) {
					var year = options.date.getFullYear(),
					min = options.min.getFullYear(),
					max = options.max.getFullYear(),
					toDateString = this.toDateString,
					minYear = min,
					maxYear = max;

					minYear = minYear - minYear % 10;
					maxYear = maxYear - maxYear % 10;

					if (maxYear - minYear < 10) {
						maxYear = minYear + 9;
					}

					return view({
						start: new DATE(year - year % 100 - 10, 0, 1),
						min: new DATE(minYear, 0, 1),
						max: new DATE(maxYear, 0, 1),
						setter: this.setDate,
						build: function (date, idx) {
							var start = date.getFullYear(),
								end = start + 9;

							if (start < min) {
								start = min;
							}

							if (end > max) {
								end = max;
							}

							return {
								ns: kendo.ns,
								value: start + " - " + end,
								dateString: toDateString(date),
								cssClass: idx === 0 || idx == 11 ? OTHERMONTHCLASS : ""
							};
						}
					});
				},
				first: function (date) {
					var year = date.getFullYear();
					return new DATE(year - year % 100, date.getMonth(), date.getDate());
				},
				last: function (date) {
					var year = date.getFullYear();
					return new DATE(year - year % 100 + 99, date.getMonth(), date.getDate());
				},
				compare: function (date1, date2) {
					return compare(date1, date2, 100);
				},
				setDate: function (date, value) {
					setDate(date, value, 10);
				},
				toDateString: function (date) {
					var year = date.getFullYear();
					return (year - year % 10) + "/0/1";
				}
			}]
		};

		function title(date, min, max, modular) {
			var start = date.getFullYear(),
				minYear = min.getFullYear(),
				maxYear = max.getFullYear(),
				end;

			start = start - start % modular;
			end = start + (modular - 1);

			if (start < minYear) {
				start = minYear;
			}
			if (end > maxYear) {
				end = maxYear;
			}

			return start + "-" + end;
		}

		function view(options) {
			var idx = 0,
				data,
				min = options.min,
				max = options.max,
				start = options.start,
				setter = options.setter,
				build = options.build,
				length = options.cells || 12,
				cellsPerRow = options.perRow || 4,
				content = options.content || cellTemplate,
				empty = options.empty || emptyCellTemplate,
				html = options.html || '<table tabindex="0" role="grid" class="k-content k-meta-view" cellspacing="0"><tbody><tr role="row">';

			for (; idx < length; idx++) {
				if (idx > 0 && idx % cellsPerRow === 0) {
					html += '</tr><tr role="row">';
				}

				data = build(start, idx);

				html += isInRange(start, min, max) ? content(data) : empty(data);

				setter(start, 1);
			}

			return html + "</tr></tbody></table>";
		}

		function compare(date1, date2, modifier) {
			var year1 = date1.getFullYear(),
				start = date2.getFullYear(),
				end = start,
				result = 0;

			if (modifier) {
				start = start - start % modifier;
				end = start - start % modifier + modifier - 1;
			}

			if (year1 > end) {
				result = 1;
			} else if (year1 < start) {
				result = -1;
			}

			return result;
		}

		function getToday() {
			var today = new DATE();
			return new DATE(today.getFullYear(), today.getMonth(), today.getDate());
		}

		function restrictValue(value, min, max) {
			var today = getToday();

			if (value) {
				today = new DATE(+value);
			}

			if (min > today) {
				today = new DATE(+min);
			} else if (max < today) {
				today = new DATE(+max);
			}
			return today;
		}

		function isInRange(date, min, max) {
			return +date >= +min && +date <= +max;
		}

		function shiftArray(array, idx) {
			return array.slice(idx).concat(array.slice(0, idx));
		}

		function setDate(date, value, multiplier) {
			value = value instanceof DATE ? value.getFullYear() : date.getFullYear() + multiplier * value;
			date.setFullYear(value);
		}

		function mousetoggle(e) {
			$(this).toggleClass(HOVER, MOUSEENTER.indexOf(e.type) > -1 || e.type == FOCUS);
		}

		function prevent(e) {
			e.preventDefault();
		}

		function getCalendarInfo(culture) {
			return getCulture(culture).calendars.standard;
		}

		function normalize(options) {
			var start = views[options.start],
				depth = views[options.depth],
				culture = getCulture(options.culture);

			options.format = extractFormat(options.format || culture.calendars.standard.patterns.d);

			if (isNaN(start)) {
				start = 0;
				options.start = MONTH;
			}

			if (depth === undefined || depth > start) {
				options.depth = MONTH;
			}

			if (!options.dates) {
				options.dates = [];
			}
		}

		function makeUnselectable(element) {
			if (isIE8) {
				element.find("*").attr("unselectable", "on");
			}
		}

		function inArray(date, dates) {
			for (var i = 0, length = dates.length; i < length; i++) {
				if (date === +dates[i]) {
					return true;
				}
			}
			return false;
		}

		function isEqualDatePart(value1, value2) {
			if (value1) {
				return value1.getFullYear() === value2.getFullYear() &&
					   value1.getMonth() === value2.getMonth() &&
					   value1.getDate() === value2.getDate();
			}

			return false;
		}

		function isEqualMonth(value1, value2) {
			if (value1) {
				return value1.getFullYear() === value2.getFullYear() &&
					   value1.getMonth() === value2.getMonth();
			}

			return false;
		}

		calendar.isEqualDatePart = isEqualDatePart;
		calendar.makeUnselectable = makeUnselectable;
		calendar.restrictValue = restrictValue;
		calendar.isInRange = isInRange;
		calendar.normalize = normalize;
		calendar.viewsEnum = views;

		kendo.calendar = calendar;
	})(window.kendo.jQuery);

return window.kendo;

}, typeof define == 'function' && define.amd ? define : function(_, f){ f(); });
/*
* Kendo UI v2014.1.416 (http://www.telerik.com/kendo-ui)
* Copyright 2014 Telerik AD. All rights reserved.
*
* Kendo UI commercial licenses may be obtained at
* http://www.telerik.com/purchase/license-agreement/kendo-ui-complete
* If you do not own a commercial license, this file shall be governed by the trial license terms.
*/
(function(f, define){
    define([ "./kendo.calendar", "./kendo.popup" ], f);
})(function(){

	(function ($, undefined) {
		var kendo = window.kendo,
		ui = kendo.ui,
		Widget = ui.Widget,
		parse = kendo.parseDate,
		keys = kendo.keys,
		template = kendo.template,
		activeElement = kendo._activeElement,
		DIV = "<div />",
		SPAN = "<span />",
		ns = ".kendoDatePicker",
		CLICK = "click" + ns,
		OPEN = "open",
		CLOSE = "close",
		CHANGE = "change",
		DATEVIEW = "dateView",
		DISABLED = "disabled",
		READONLY = "readonly",
		DEFAULT = "k-state-default",
		FOCUSED = "k-state-focused",
		SELECTED = "k-state-selected",
		STATEDISABLED = "k-state-disabled",
		HOVER = "k-state-hover",
		KEYDOWN = "keydown" + ns,
		HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
		MOUSEDOWN = "mousedown" + ns,
		ID = "id",
		MIN = "min",
		MAX = "max",
		MONTH = "month",
		ARIA_DISABLED = "aria-disabled",
		ARIA_EXPANDED = "aria-expanded",
		ARIA_HIDDEN = "aria-hidden",
		ARIA_READONLY = "aria-readonly",
		calendar = kendo.calendar,
		isInRange = calendar.isInRange,
		restrictValue = calendar.restrictValue,
		isEqualDatePart = calendar.isEqualDatePart,
		extend = $.extend,
		proxy = $.proxy,
		DATE = Date;

		function normalize(options) {
			var parseFormats = options.parseFormats,
				format = options.format;

			calendar.normalize(options);

			parseFormats = $.isArray(parseFormats) ? parseFormats : [parseFormats];
			if ($.inArray(format, parseFormats) === -1) {
				parseFormats.splice(0, 0, options.format);
			}

			options.parseFormats = parseFormats;
		}

		function preventDefault(e) {
			e.preventDefault();
		}

		var DateView = function (options) {
			var that = this, id,
				body = document.body,
				div = $(DIV).attr(ARIA_HIDDEN, "true")
							.addClass("k-calendar-container")
							.appendTo(body);

			that.options = options = options || {};
			id = options.id;

			if (id) {
				id += "_dateview";

				div.attr(ID, id);
				that._dateViewID = id;
			}

			that.popup = new ui.Popup(div, extend(options.popup, options, { name: "Popup", isRtl: kendo.support.isRtl(options.anchor) }));
			that.div = div;

			that.value(options.value);
		};

		DateView.prototype = {
			_calendar: function () {
				var that = this;
				var calendar = that.calendar;
				var options = that.options;
				var div;

				if (!calendar) {
					div = $(DIV).attr(ID, kendo.guid())
								.appendTo(that.popup.element)
								.on(MOUSEDOWN, preventDefault)
								.on(CLICK, "td:has(.k-link)", proxy(that._click, that));

					that.calendar = calendar = new ui.Calendar(div);
					that._setOptions(options);

					kendo.calendar.makeUnselectable(calendar.element);

					calendar.navigate(that._value || that._current, options.start);

					that.value(that._value);
				}
			},

			_setOptions: function (options) {
				this.calendar.setOptions({
					focusOnNav: false,
					change: options.change,
					culture: options.culture,
					dates: options.dates,
					depth: options.depth,
					footer: options.footer,
					format: options.format,
					max: options.max,
					min: options.min,
					month: options.month,
					start: options.start
				});
			},

			setOptions: function (options) {
				var old = this.options;

				this.options = extend(old, options, {
					change: old.change,
					close: old.close,
					open: old.open
				});

				if (this.calendar) {
					this._setOptions(this.options);
				}
			},

			destroy: function () {
				this.popup.destroy();
			},

			open: function () {
				var that = this;

				that._calendar();
				that.popup.open();
			},

			close: function () {
				this.popup.close();
			},

			min: function (value) {
				this._option(MIN, value);
			},

			max: function (value) {
				this._option(MAX, value);
			},

			toggle: function () {
				var that = this;

				that[that.popup.visible() ? CLOSE : OPEN]();
			},

			move: function (e) {
				var that = this,
					key = e.keyCode,
					calendar = that.calendar,
					selectIsClicked = e.ctrlKey && key == keys.DOWN || key == keys.ENTER;

				if (key == keys.ESC) {
					that.close();
					return;
				}

				if (e.altKey) {
					if (key == keys.DOWN) {
						that.open();
						e.preventDefault();
					} else if (key == keys.UP) {
						that.close();
						e.preventDefault();
					}
					return;
				}

				if (!that.popup.visible()) {
					return;
				}

				if (selectIsClicked && calendar._cell.hasClass(SELECTED)) {
					that.close();
					e.preventDefault();
					return;
				}

				that._current = calendar._move(e);
			},

			current: function (date) {
				this._current = date;
				this.calendar._focus(date);
			},

			value: function (value) {
				var that = this,
					calendar = that.calendar,
					options = that.options;

				that._value = value;
				that._current = new DATE(+restrictValue(value, options.min, options.max));

				if (calendar) {
					calendar.value(value);
				}
			},

			_click: function (e) {
				if (e.currentTarget.className.indexOf(SELECTED) !== -1) {
					this.close();
				}
			},

			_option: function (option, value) {
				var that = this;
				var calendar = that.calendar;

				that.options[option] = value;

				if (calendar) {
					calendar[option](value);
				}
			}
		};

		DateView.normalize = normalize;

		kendo.DateView = DateView;

		var DatePicker = Widget.extend({
			init: function (element, options) {
				var that = this,
					disabled,
					div;

				Widget.fn.init.call(that, element, options);
				element = that.element;
				options = that.options;

				options.min = parse(element.attr("min")) || parse(options.min);
				options.max = parse(element.attr("max")) || parse(options.max);

				normalize(options);

				that._wrapper();

				that.dateView = new DateView(extend({}, options, {
					id: element.attr(ID),
					anchor: that.wrapper,
					change: function () {
						// calendar is the current scope
						that._change(this.value());
						that.close();
					},
					close: function (e) {
						if (that.trigger(CLOSE)) {
							e.preventDefault();
						} else {
							element.attr(ARIA_EXPANDED, false);
							div.attr(ARIA_HIDDEN, true);
						}
					},
					open: function (e) {
						var options = that.options,
							date;

						if (that.trigger(OPEN)) {
							e.preventDefault();
						} else {
							if (that.element.val() !== that._oldText) {
								date = parse(element.val(), options.parseFormats, options.culture);

								that.dateView[date ? "current" : "value"](date);
							}

							element.attr(ARIA_EXPANDED, true);
							div.attr(ARIA_HIDDEN, false);

							that._updateARIA(date);

						}
					}
				}));
				div = that.dateView.div;

				that._icon();

				try {
					element[0].setAttribute("type", "text");
				} catch (e) {
					element[0].type = "text";
				}

				element
					.addClass("k-input")
					.attr({
						role: "combobox",
						"aria-expanded": false,
						"aria-owns": that.dateView._dateViewID
					});

				that._reset();
				that._template();

				disabled = element.is("[disabled]");
				if (disabled) {
					that.enable(false);
				} else {
					that.readonly(element.is("[readonly]"));
				}

				that._old = that._update(options.value || that.element.val());
				that._oldText = element.val();

				kendo.notify(that);
			},
			events: [
			OPEN,
			CLOSE,
			CHANGE],
			options: {
				name: "DatePicker",
				value: null,
				footer: "",
				format: "",
				culture: "",
				parseFormats: [],
				min: new Date(1900, 0, 1),
				max: new Date(2099, 11, 31),
				start: MONTH,
				depth: MONTH,
				animation: {},
				month: {},
				dates: [],
				ARIATemplate: 'Current focused date is #=kendo.toString(data.current, "D")#'
			},

			setOptions: function (options) {
				var that = this;
				var value = that._value;

				Widget.fn.setOptions.call(that, options);

				options = that.options;

				options.min = parse(options.min);
				options.max = parse(options.max);

				normalize(options);

				that.dateView.setOptions(options);

				if (value) {
					that.element.val(kendo.toString(value, options.format, options.culture));
					that._updateARIA(value);
				}
			},

			_editable: function (options) {
				var that = this,
					icon = that._dateIcon.off(ns),
					element = that.element.off(ns),
					wrapper = that._inputWrapper.off(ns),
					readonly = options.readonly,
					disable = options.disable;

				if (!readonly && !disable) {
					wrapper
						.addClass(DEFAULT)
						.removeClass(STATEDISABLED)
						.on(HOVEREVENTS, that._toggleHover);

					element.removeAttr(DISABLED)
						   .removeAttr(READONLY)
						   .attr(ARIA_DISABLED, false)
						   .attr(ARIA_READONLY, false)
						   .on("keydown" + ns, proxy(that._keydown, that))
						   .on("blur" + ns, proxy(that._blur, that))
						   .on("focus" + ns, function () {
						   	that._inputWrapper.addClass(FOCUSED);
						   });

					icon.on(CLICK, proxy(that._click, that))
						.on(MOUSEDOWN, preventDefault);
				} else {
					wrapper
						.addClass(disable ? STATEDISABLED : DEFAULT)
						.removeClass(disable ? DEFAULT : STATEDISABLED);

					element.attr(DISABLED, disable)
						   .attr(READONLY, readonly)
						   .attr(ARIA_DISABLED, disable)
						   .attr(ARIA_READONLY, readonly);
				}
			},

			readonly: function (readonly) {
				this._editable({
					readonly: readonly === undefined ? true : readonly,
					disable: false
				});
			},

			enable: function (enable) {
				this._editable({
					readonly: false,
					disable: !(enable = enable === undefined ? true : enable)
				});
			},

			destroy: function () {
				var that = this;

				Widget.fn.destroy.call(that);

				that.dateView.destroy();

				that.element.off(ns);
				that._dateIcon.off(ns);
				that._inputWrapper.off(ns);

				if (that._form) {
					that._form.off("reset", that._resetHandler);
				}
			},

			open: function () {
				this.dateView.open();
			},

			close: function () {
				this.dateView.close();
			},

			min: function (value) {
				return this._option(MIN, value);
			},

			max: function (value) {
				return this._option(MAX, value);
			},

			value: function (value) {
				var that = this;

				if (value === undefined) {
					return that._value;
				}

				that._old = that._update(value);

				if (that._old === null) {
					that.element.val("");
				}

				that._oldText = that.element.val();
			},

			_toggleHover: function (e) {
				$(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
			},

			_blur: function () {
				var that = this,
					value = that.element.val();

				that.close();
				if (value !== that._oldText) {
					that._change(value);
				}

				that._inputWrapper.removeClass(FOCUSED);
			},

			_click: function () {
				var that = this,
					element = that.element;

				that.dateView.toggle();

				if (!kendo.support.touch && element[0] !== activeElement()) {
					element.focus();
				}
			},

			_change: function (value) {
				var that = this;

				value = that._update(value);

				if (+that._old != +value) {
					that._old = value;
					that._oldText = that.element.val();

					that.trigger(CHANGE);

					// trigger the DOM change event so any subscriber gets notified
					that.element.trigger(CHANGE);
				}
			},

			_keydown: function (e) {
				var that = this,
					dateView = that.dateView,
					value = that.element.val();

				if (!dateView.popup.visible() && e.keyCode == keys.ENTER && value !== that._oldText) {
					that._change(value);
				} else {
					dateView.move(e);
					that._updateARIA(dateView._current);
				}
			},

			_icon: function () {
				var that = this,
					element = that.element,
					icon;

				icon = element.next("span.k-select");

				if (!icon[0]) {
					icon = $('<span unselectable="on" class="k-select"><span unselectable="on" class="k-icon k-i-calendar">select</span></span>').insertAfter(element);
				}

				that._dateIcon = icon.attr({
					"role": "button",
					"aria-controls": that.dateView._dateViewID
				});
			},

			_option: function (option, value) {
				var that = this,
					options = that.options;

				if (value === undefined) {
					return options[option];
				}

				value = parse(value, options.parseFormats, options.culture);

				if (!value) {
					return;
				}

				options[option] = new DATE(+value);
				that.dateView[option](value);
			},

			_update: function (value) {
				var that = this,
					options = that.options,
					min = options.min,
					max = options.max,
					current = that._value,
					date = parse(value, options.parseFormats, options.culture),
					isSameType = (date === null && current === null) || (date instanceof Date && current instanceof Date),
					formattedValue;

				if (+date === +current && isSameType) {
					formattedValue = kendo.toString(date, options.format, options.culture);

					if (formattedValue !== value) {
						that.element.val(date === null ? value : formattedValue);
					}

					return date;
				}

				if (date !== null && isEqualDatePart(date, min)) {
					date = restrictValue(date, min, max);
				} else if (!isInRange(date, min, max)) {
					date = null;
				}

				that._value = date;
				that.dateView.value(date);
				that.element.val(date ? kendo.toString(date, options.format, options.culture) : value);
				that._updateARIA(date);

				return date;
			},

			_wrapper: function () {
				var that = this,
					element = that.element,
					wrapper;

				wrapper = element.parents(".k-datepicker");

				if (!wrapper[0]) {
					wrapper = element.wrap(SPAN).parent().addClass("k-picker-wrap k-state-default");
					wrapper = wrapper.wrap(SPAN).parent();
				}

				wrapper[0].style.cssText = element[0].style.cssText;
				element.css({
					width: "100%",
					height: element[0].style.height
				});

				that.wrapper = wrapper.addClass("k-widget k-datepicker k-header")
									  .addClass(element[0].className);

				that._inputWrapper = $(wrapper[0].firstChild);
			},

			_reset: function () {
				var that = this,
					element = that.element,
					formId = element.attr("form"),
					form = formId ? $("#" + formId) : element.closest("form");

				if (form[0]) {
					that._resetHandler = function () {
						that.value(element[0].defaultValue);
					};

					that._form = form.on("reset", that._resetHandler);
				}
			},

			_template: function () {
				this._ariaTemplate = template(this.options.ARIATemplate);
			},

			_updateARIA: function (date) {
				var cell;
				var that = this;
				var calendar = that.dateView.calendar;

				that.element.removeAttr("aria-activedescendant");

				if (calendar) {
					cell = calendar._cell;
					cell.attr("aria-label", that._ariaTemplate({ current: date || calendar.current() }));

					that.element.attr("aria-activedescendant", cell.attr("id"));
				}
			}
		});

		ui.plugin(DatePicker);

	})(window.kendo.jQuery);

return window.kendo;

}, typeof define == 'function' && define.amd ? define : function(_, f){ f(); });
/*
* Kendo UI v2014.1.416 (http://www.telerik.com/kendo-ui)
* Copyright 2014 Telerik AD. All rights reserved.
*
* Kendo UI commercial licenses may be obtained at
* http://www.telerik.com/purchase/license-agreement/kendo-ui-complete
* If you do not own a commercial license, this file shall be governed by the trial license terms.
*/
(function(f, define){
    define([ "./kendo.core", "./kendo.userevents" ], f);
})(function(){

	(function ($, undefined) {
		var kendo = window.kendo,
			caret = kendo.caret,
			keys = kendo.keys,
			ui = kendo.ui,
			Widget = ui.Widget,
			activeElement = kendo._activeElement,
			extractFormat = kendo._extractFormat,
			parse = kendo.parseFloat,
			placeholderSupported = kendo.support.placeholder,
			getCulture = kendo.getCulture,
			round = kendo._round,
			CHANGE = "change",
			DISABLED = "disabled",
			READONLY = "readonly",
			INPUT = "k-input",
			SPIN = "spin",
			ns = ".kendoNumericTextBox",
			TOUCHEND = "touchend",
			MOUSELEAVE = "mouseleave" + ns,
			HOVEREVENTS = "mouseenter" + ns + " " + MOUSELEAVE,
			DEFAULT = "k-state-default",
			FOCUSED = "k-state-focused",
			HOVER = "k-state-hover",
			FOCUS = "focus",
			POINT = ".",
			SELECTED = "k-state-selected",
			STATEDISABLED = "k-state-disabled",
			ARIA_DISABLED = "aria-disabled",
			ARIA_READONLY = "aria-readonly",
			INTEGER_REGEXP = /^(-)?(\d*)$/,
			NULL = null,
			proxy = $.proxy;

		var NumericTextBox = Widget.extend({
			init: function (element, options) {
				var that = this,
				isStep = options && options.step !== undefined,
				min, max, step, value, disabled;

				Widget.fn.init.call(that, element, options);

				options = that.options;
				element = that.element
							  .on("blur" + ns, proxy(that._focusout, that))
							  .attr("role", "spinbutton");

				options.placeholder = options.placeholder || element.attr("placeholder");

				that._reset();
				that._wrapper();
				that._arrows();
				that._input();

				if (!kendo.support.mobileOS) {
					that._text.on(FOCUS + ns, proxy(that._click, that));
				} else {
					that._text.on(TOUCHEND + ns + " " + FOCUS + ns, function (e) {
						that._toggleText(false);
						if (e.type === FOCUS) {
							element.focus();
						}
					});
				}

				min = that.min(element.attr("min"));
				max = that.max(element.attr("max"));
				step = that._parse(element.attr("step"));

				if (options.min === NULL && min !== NULL) {
					options.min = min;
				}

				if (options.max === NULL && max !== NULL) {
					options.max = max;
				}

				if (!isStep && step !== NULL) {
					options.step = step;
				}

				element.attr("aria-valuemin", options.min)
					   .attr("aria-valuemax", options.max);

				options.format = extractFormat(options.format);

				value = options.value;
				that.value(value !== NULL ? value : element.val());

				disabled = element.is("[disabled]");
				if (disabled) {
					that.enable(false);
				} else {
					that.readonly(element.is("[readonly]"));
				}

				kendo.notify(that);
			},

			options: {
				name: "NumericTextBox",
				decimals: NULL,
				min: NULL,
				max: NULL,
				value: NULL,
				step: 1,
				culture: "",
				format: "n",
				spinners: true,
				placeholder: "",
				upArrowText: "Increase value",
				downArrowText: "Decrease value"
			},
			events: [
				CHANGE,
				SPIN
			],

			_editable: function (options) {
				var that = this,
					element = that.element,
					disable = options.disable,
					readonly = options.readonly,
					text = that._text.add(element),
					wrapper = that._inputWrapper.off(HOVEREVENTS);

				that._toggleText(true);

				that._upArrowEventHandler.unbind("press");
				that._downArrowEventHandler.unbind("press");
				element.off("keydown" + ns).off("keypress" + ns).off("paste" + ns);

				if (!readonly && !disable) {
					wrapper
						.addClass(DEFAULT)
						.removeClass(STATEDISABLED)
						.on(HOVEREVENTS, that._toggleHover);

					text.removeAttr(DISABLED)
						.removeAttr(READONLY)
						.attr(ARIA_DISABLED, false)
						.attr(ARIA_READONLY, false);

					that._upArrowEventHandler.bind("press", function (e) {
						e.preventDefault();
						that._spin(1);
						that._upArrow.addClass(SELECTED);
					});

					that._downArrowEventHandler.bind("press", function (e) {
						e.preventDefault();
						that._spin(-1);
						that._downArrow.addClass(SELECTED);
					});

					that.element
						.on("keydown" + ns, proxy(that._keydown, that))
						.on("keypress" + ns, proxy(that._keypress, that))
						.on("paste" + ns, proxy(that._paste, that));

				} else {
					wrapper
						.addClass(disable ? STATEDISABLED : DEFAULT)
						.removeClass(disable ? DEFAULT : STATEDISABLED);

					text.attr(DISABLED, disable)
						.attr(READONLY, readonly)
						.attr(ARIA_DISABLED, disable)
						.attr(ARIA_READONLY, readonly);
				}
			},

			readonly: function (readonly) {
				this._editable({
					readonly: readonly === undefined ? true : readonly,
					disable: false
				});
			},

			enable: function (enable) {
				this._editable({
					readonly: false,
					disable: !(enable = enable === undefined ? true : enable)
				});
			},

			destroy: function () {
				var that = this;

				that.element
					.add(that._text)
					.add(that._upArrow)
					.add(that._downArrow)
					.add(that._inputWrapper)
					.off(ns);

				that._upArrowEventHandler.destroy();
				that._downArrowEventHandler.destroy();

				if (that._form) {
					that._form.off("reset", that._resetHandler);
				}

				Widget.fn.destroy.call(that);
			},

			min: function (value) {
				return this._option("min", value);
			},

			max: function (value) {
				return this._option("max", value);
			},

			step: function (value) {
				return this._option("step", value);
			},

			value: function (value) {
				var that = this, adjusted;

				if (value === undefined) {
					return that._value;
				}

				value = that._parse(value);
				adjusted = that._adjust(value);

				if (value !== adjusted) {
					return;
				}

				that._update(value);
				that._old = that._value;
			},

			focus: function () {
				this._focusin();
			},

			_adjust: function (value) {
				var that = this,
				options = that.options,
				min = options.min,
				max = options.max;

				if (value === NULL) {
					return value;
				}

				if (min !== NULL && value < min) {
					value = min;
				} else if (max !== NULL && value > max) {
					value = max;
				}

				return value;
			},

			_arrows: function () {
				var that = this,
				arrows,
				_release = function () {
					clearTimeout(that._spinning);
					arrows.removeClass(SELECTED);
				},
				options = that.options,
				spinners = options.spinners,
				element = that.element;

				arrows = element.siblings(".k-icon");

				if (!arrows[0]) {
					arrows = $(buttonHtml("n", options.upArrowText) + buttonHtml("s", options.downArrowText))
							.insertAfter(element);

					arrows.wrapAll('<span class="k-select"/>');
				}

				if (!spinners) {
					arrows.parent().toggle(spinners);
					that._inputWrapper.addClass("k-expand-padding");
				}

				that._upArrow = arrows.eq(0);
				that._upArrowEventHandler = new kendo.UserEvents(that._upArrow, { release: _release });
				that._downArrow = arrows.eq(1);
				that._downArrowEventHandler = new kendo.UserEvents(that._downArrow, { release: _release });
			},

			_blur: function () {
				var that = this;

				that._toggleText(true);
				that._change(that.element.val());
			},

			_click: function (e) {
				var that = this;

				clearTimeout(that._focusing);
				that._focusing = setTimeout(function () {
					var input = e.target,
						idx = caret(input)[0],
						value = input.value.substring(0, idx),
						format = that._format(that.options.format),
						group = format[","],
						result, groupRegExp, extractRegExp,
						caretPosition = 0;

					if (group) {
						groupRegExp = new RegExp("\\" + group, "g");
						extractRegExp = new RegExp("([\\d\\" + group + "]+)(\\" + format[POINT] + ")?(\\d+)?");
					}

					if (extractRegExp) {
						result = extractRegExp.exec(value);
					}

					if (result) {
						caretPosition = result[0].replace(groupRegExp, "").length;

						if (value.indexOf("(") != -1 && that._value < 0) {
							caretPosition++;
						}
					}

					that._focusin();

					caret(that.element[0], caretPosition);
				});
			},

			_change: function (value) {
				var that = this;

				that._update(value);
				value = that._value;

				if (that._old != value) {
					that._old = value;
					that.trigger(CHANGE);

					// trigger the DOM change event so any subscriber gets notified
					that.element.trigger(CHANGE);
				}
			},

			_culture: function (culture) {
				return culture || getCulture(this.options.culture);
			},

			_focusin: function () {
				var that = this;
				that._inputWrapper.addClass(FOCUSED);
				that._toggleText(false);
				that.element[0].focus();
			},

			_focusout: function () {
				var that = this;

				clearTimeout(that._focusing);
				that._inputWrapper.removeClass(FOCUSED).removeClass(HOVER);
				that._blur();
			},

			_format: function (format, culture) {
				var numberFormat = this._culture(culture).numberFormat;

				format = format.toLowerCase();

				if (format.indexOf("c") > -1) {
					numberFormat = numberFormat.currency;
				} else if (format.indexOf("p") > -1) {
					numberFormat = numberFormat.percent;
				}

				return numberFormat;
			},

			_input: function () {
				var that = this,
					CLASSNAME = "k-formatted-value",
					element = that.element.addClass(INPUT).show()[0],
					accessKey = element.accessKey,
					wrapper = that.wrapper,
					text;

				text = wrapper.find(POINT + CLASSNAME);

				if (!text[0]) {
					text = $('<input type="text"/>').insertBefore(element).addClass(CLASSNAME);
				}

				try {
					element.setAttribute("type", "text");
				} catch (e) {
					element.type = "text";
				}

				text[0].tabIndex = element.tabIndex;
				text[0].style.cssText = element.style.cssText;
				text.prop("placeholder", that.options.placeholder);

				if (accessKey) {
					text.attr("accesskey", accessKey);
					element.accessKey = "";
				}

				that._text = text.addClass(element.className);
			},

			_keydown: function (e) {
				var that = this,
					key = e.keyCode;

				that._key = key;

				if (key == keys.DOWN) {
					that._step(-1);
				} else if (key == keys.UP) {
					that._step(1);
				} else if (key == keys.ENTER) {
					that._change(that.element.val());
				}
			},

			_keypress: function (e) {
				if (e.which === 0 || e.keyCode === keys.BACKSPACE || e.keyCode === keys.ENTER) {
					return;
				}

				var that = this;
				var min = that.options.min;
				var element = that.element;
				var selection = caret(element);
				var selectionStart = selection[0];
				var selectionEnd = selection[1];
				var character = String.fromCharCode(e.which);
				var numberFormat = that._format(that.options.format);
				var isNumPadDecimal = that._key === keys.NUMPAD_DOT;
				var value = element.val();
				var isValid;

				if (isNumPadDecimal) {
					character = numberFormat[POINT];
				}

				value = value.substring(0, selectionStart) + character + value.substring(selectionEnd);
				isValid = that._numericRegex(numberFormat).test(value);

				if (isValid && isNumPadDecimal) {
					element.val(value);
					caret(element, selectionStart + character.length);

					e.preventDefault();
				} else if ((min !== null && min >= 0 && value.charAt(0) === "-") || !isValid) {
					e.preventDefault();
				}

				that._key = 0;
			},

			_numericRegex: function (numberFormat) {
				var that = this;
				var separator = numberFormat[POINT];
				var precision = that.options.decimals;

				if (separator === POINT) {
					separator = "\\" + separator;
				}

				if (precision === NULL) {
					precision = numberFormat.decimals;
				}

				if (precision === 0) {
					return INTEGER_REGEXP;
				}

				if (that._separator !== separator) {
					that._separator = separator;
					that._floatRegExp = new RegExp("^(-)?(((\\d+(" + separator + "\\d*)?)|(" + separator + "\\d*)))?$");
				}

				return that._floatRegExp;
			},

			_paste: function (e) {
				var that = this,
					element = e.target,
					value = element.value;

				setTimeout(function () {
					if (that._parse(element.value) === NULL) {
						that._update(value);
					}
				});
			},

			_option: function (option, value) {
				var that = this,
					options = that.options;

				if (value === undefined) {
					return options[option];
				}

				value = that._parse(value);

				if (!value && option === "step") {
					return;
				}

				options[option] = value;
				that.element
					.attr("aria-value" + option, value)
					.attr(option, value);
			},

			_spin: function (step, timeout) {
				var that = this;

				timeout = timeout || 500;

				clearTimeout(that._spinning);
				that._spinning = setTimeout(function () {
					that._spin(step, 50);
				}, timeout);

				that._step(step);
			},

			_step: function (step) {
				var that = this,
					element = that.element,
					value = that._parse(element.val()) || 0;

				if (activeElement() != element[0]) {
					that._focusin();
				}

				value += that.options.step * step;

				that._update(that._adjust(value));

				that.trigger(SPIN);
			},

			_toggleHover: function (e) {
				$(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
			},

			_toggleText: function (toggle) {
				var that = this;

				that._text.toggle(toggle);
				that.element.toggle(!toggle);
			},

			_parse: function (value, culture) {
				return parse(value, this._culture(culture), this.options.format);
			},

			_update: function (value) {
				var that = this,
					options = that.options,
					format = options.format,
					decimals = options.decimals,
					culture = that._culture(),
					numberFormat = that._format(format, culture),
					isNotNull;

				if (decimals === NULL) {
					decimals = numberFormat.decimals;
				}

				value = that._parse(value, culture);

				isNotNull = value !== NULL;

				if (isNotNull) {
					value = parseFloat(round(value, decimals));
				}

				that._value = value = that._adjust(value);
				that._placeholder(kendo.toString(value, format, culture));

				if (isNotNull) {
					value = value.toString();
					/*if (value.indexOf("e") !== -1) {
						value = round(+value, decimals);
					}
					value = value.replace(POINT, numberFormat[POINT]);*/
				} else {
					value = "";
				}

				that.element.val(value).attr("aria-valuenow", value);
			},

			_placeholder: function (value) {
				this._text.val(value);
				if (!placeholderSupported && !value) {
					this._text.val(this.options.placeholder);
				}
			},

			_wrapper: function () {
				var that = this,
					element = that.element,
					DOMElement = element[0],
					wrapper;

				wrapper = element.parents(".k-numerictextbox");

				if (!wrapper.is("span.k-numerictextbox")) {
					wrapper = element.hide().wrap('<span class="k-numeric-wrap k-state-default" />').parent();
					wrapper = wrapper.wrap("<span/>").parent();
				}

				wrapper[0].style.cssText = DOMElement.style.cssText;
				DOMElement.style.width = "";
				that.wrapper = wrapper.addClass("k-widget k-numerictextbox")
									  .addClass(DOMElement.className)
									  .css("display", "");

				that._inputWrapper = $(wrapper[0].firstChild);
			},

			_reset: function () {
				var that = this,
					element = that.element,
					formId = element.attr("form"),
					form = formId ? $("#" + formId) : element.closest("form");

				if (form[0]) {
					that._resetHandler = function () {
						setTimeout(function () {
							that.value(element[0].value);
						});
					};

					that._form = form.on("reset", that._resetHandler);
				}
			}
		});

		function buttonHtml(className, text) {
			return '<span unselectable="on" class="k-link"><span unselectable="on" class="k-icon k-i-arrow-' + className + '" title="' + text + '">' + text + '</span></span>';
		}

		ui.plugin(NumericTextBox);
	})(window.kendo.jQuery);

return window.kendo;

}, typeof define == 'function' && define.amd ? define : function(_, f){ f(); });
/*
* Kendo UI v2014.1.416 (http://www.telerik.com/kendo-ui)
* Copyright 2014 Telerik AD. All rights reserved.
*
* Kendo UI commercial licenses may be obtained at
* http://www.telerik.com/purchase/license-agreement/kendo-ui-complete
* If you do not own a commercial license, this file shall be governed by the trial license terms.
*/
(function(f, define){
    define([], f);
})(function(){

(function( window, undefined ) {
    var kendo = window.kendo || (window.kendo = { cultures: {} });
    kendo.cultures["de-CH"] = {
        name: "de-CH",
        numberFormat: {
            pattern: ["-n"],
            decimals: 2,
            ",": "'",
            ".": ".",
            groupSize: [3],
            percent: {
                pattern: ["-n%","n%"],
                decimals: 2,
                ",": "'",
                ".": ".",
                groupSize: [3],
                symbol: "%"
            },
            currency: {
                pattern: ["$-n","$ n"],
                decimals: 2,
                ",": "'",
                ".": ".",
                groupSize: [3],
                symbol: "Fr."
            }
        },
        calendars: {
            standard: {
                days: {
                    names: ["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],
                    namesAbbr: ["So","Mo","Di","Mi","Do","Fr","Sa"],
                    namesShort: ["So","Mo","Di","Mi","Do","Fr","Sa"]
                },
                months: {
                    names: ["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember",""],
                    namesAbbr: ["Jan","Feb","Mrz","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez",""]
                },
                AM: [""],
                PM: [""],
                patterns: {
                    d: "dd.MM.yyyy",
                    D: "dddd, d. MMMM yyyy",
                    F: "dddd, d. MMMM yyyy HH:mm:ss",
                    g: "dd.MM.yyyy HH:mm",
                    G: "dd.MM.yyyy HH:mm:ss",
                    m: "dd MMMM",
                    M: "dd MMMM",
                    s: "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
                    t: "HH:mm",
                    T: "HH:mm:ss",
                    u: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
                    y: "MMMM yyyy",
                    Y: "MMMM yyyy"
                },
                "/": ".",
                ":": ":",
                firstDay: 1
            }
        }
    }
})(this);


return window.kendo;

}, typeof define == 'function' && define.amd ? define : function(_, f){ f(); });
/*
* Kendo UI v2014.1.416 (http://www.telerik.com/kendo-ui)
* Copyright 2014 Telerik AD. All rights reserved.
*
* Kendo UI commercial licenses may be obtained at
* http://www.telerik.com/purchase/license-agreement/kendo-ui-complete
* If you do not own a commercial license, this file shall be governed by the trial license terms.
*/
(function(f, define){
    define([], f);
})(function(){

(function( window, undefined ) {
    var kendo = window.kendo || (window.kendo = { cultures: {} });
    kendo.cultures["en-US"] = {
        name: "en-US",
        numberFormat: {
            pattern: ["-n"],
            decimals: 2,
            ",": ",",
            ".": ".",
            groupSize: [3],
            percent: {
                pattern: ["-n %","n %"],
                decimals: 2,
                ",": ",",
                ".": ".",
                groupSize: [3],
                symbol: "%"
            },
            currency: {
                pattern: ["($n)","$n"],
                decimals: 2,
                ",": ",",
                ".": ".",
                groupSize: [3],
                symbol: "$"
            }
        },
        calendars: {
            standard: {
                days: {
                    names: ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],
                    namesAbbr: ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],
                    namesShort: ["Su","Mo","Tu","We","Th","Fr","Sa"]
                },
                months: {
                    names: ["January","February","March","April","May","June","July","August","September","October","November","December",""],
                    namesAbbr: ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""]
                },
                AM: ["AM","am","AM"],
                PM: ["PM","pm","PM"],
                patterns: {
                    d: "M/d/yyyy",
                    D: "dddd, MMMM dd, yyyy",
                    F: "dddd, MMMM dd, yyyy h:mm:ss tt",
                    g: "M/d/yyyy h:mm tt",
                    G: "M/d/yyyy h:mm:ss tt",
                    m: "MMMM dd",
                    M: "MMMM dd",
                    s: "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
                    t: "h:mm tt",
                    T: "h:mm:ss tt",
                    u: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
                    y: "MMMM, yyyy",
                    Y: "MMMM, yyyy"
                },
                "/": "/",
                ":": ":",
                firstDay: 0
            }
        }
    }
})(this);


return window.kendo;

}, typeof define == 'function' && define.amd ? define : function(_, f){ f(); });
/*
* Kendo UI v2014.1.416 (http://www.telerik.com/kendo-ui)
* Copyright 2014 Telerik AD. All rights reserved.
*
* Kendo UI commercial licenses may be obtained at
* http://www.telerik.com/purchase/license-agreement/kendo-ui-complete
* If you do not own a commercial license, this file shall be governed by the trial license terms.
*/
(function(f, define){
    define([], f);
})(function(){

(function( window, undefined ) {
    var kendo = window.kendo || (window.kendo = { cultures: {} });
    kendo.cultures["fr-CH"] = {
        name: "fr-CH",
        numberFormat: {
            pattern: ["-n"],
            decimals: 2,
            ",": "'",
            ".": ".",
            groupSize: [3],
            percent: {
                pattern: ["-n %","n %"],
                decimals: 2,
                ",": "'",
                ".": ".",
                groupSize: [3],
                symbol: "%"
            },
            currency: {
                pattern: ["$-n","$ n"],
                decimals: 2,
                ",": "'",
                ".": ".",
                groupSize: [3],
                symbol: "fr."
            }
        },
        calendars: {
            standard: {
                days: {
                    names: ["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],
                    namesAbbr: ["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],
                    namesShort: ["di","lu","ma","me","je","ve","sa"]
                },
                months: {
                    names: ["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre",""],
                    namesAbbr: ["janv.","févr.","mars","avr.","mai","juin","juil.","août","sept.","oct.","nov.","déc.",""]
                },
                AM: [""],
                PM: [""],
                patterns: {
                    d: "dd.MM.yyyy",
                    D: "dddd d MMMM yyyy",
                    F: "dddd d MMMM yyyy HH:mm:ss",
                    g: "dd.MM.yyyy HH:mm",
                    G: "dd.MM.yyyy HH:mm:ss",
                    m: "d MMMM",
                    M: "d MMMM",
                    s: "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
                    t: "HH:mm",
                    T: "HH:mm:ss",
                    u: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
                    y: "MMMM yyyy",
                    Y: "MMMM yyyy"
                },
                "/": ".",
                ":": ":",
                firstDay: 1
            }
        }
    }
})(this);


return window.kendo;

}, typeof define == 'function' && define.amd ? define : function(_, f){ f(); });
/*
* Kendo UI v2014.1.416 (http://www.telerik.com/kendo-ui)
* Copyright 2014 Telerik AD. All rights reserved.
*
* Kendo UI commercial licenses may be obtained at
* http://www.telerik.com/purchase/license-agreement/kendo-ui-complete
* If you do not own a commercial license, this file shall be governed by the trial license terms.
*/
(function(f, define){
    define([], f);
})(function(){

(function( window, undefined ) {
    var kendo = window.kendo || (window.kendo = { cultures: {} });
    kendo.cultures["it-IT"] = {
        name: "it-IT",
        numberFormat: {
            pattern: ["-n"],
            decimals: 2,
            ",": ".",
            ".": ",",
            groupSize: [3],
            percent: {
                pattern: ["-n%","n%"],
                decimals: 2,
                ",": ".",
                ".": ",",
                groupSize: [3],
                symbol: "%"
            },
            currency: {
                pattern: ["-$ n","$ n"],
                decimals: 2,
                ",": ".",
                ".": ",",
                groupSize: [3],
                symbol: "€"
            }
        },
        calendars: {
            standard: {
                days: {
                    names: ["domenica","lunedì","martedì","mercoledì","giovedì","venerdì","sabato"],
                    namesAbbr: ["dom","lun","mar","mer","gio","ven","sab"],
                    namesShort: ["do","lu","ma","me","gi","ve","sa"]
                },
                months: {
                    names: ["gennaio","febbraio","marzo","aprile","maggio","giugno","luglio","agosto","settembre","ottobre","novembre","dicembre",""],
                    namesAbbr: ["gen","feb","mar","apr","mag","giu","lug","ago","set","ott","nov","dic",""]
                },
                AM: [""],
                PM: [""],
                patterns: {
                    d: "dd/MM/yyyy",
                    D: "dddd d MMMM yyyy",
                    F: "dddd d MMMM yyyy HH:mm:ss",
                    g: "dd/MM/yyyy HH:mm",
                    G: "dd/MM/yyyy HH:mm:ss",
                    m: "dd MMMM",
                    M: "dd MMMM",
                    s: "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
                    t: "HH:mm",
                    T: "HH:mm:ss",
                    u: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
                    y: "MMMM yyyy",
                    Y: "MMMM yyyy"
                },
                "/": "/",
                ":": ":",
                firstDay: 1
            }
        }
    }
})(this);


return window.kendo;

}, typeof define == 'function' && define.amd ? define : function(_, f){ f(); });
/*
* Kendo UI v2014.1.416 (http://www.telerik.com/kendo-ui)
* Copyright 2014 Telerik AD. All rights reserved.
*
* Kendo UI commercial licenses may be obtained at
* http://www.telerik.com/purchase/license-agreement/kendo-ui-complete
* If you do not own a commercial license, this file shall be governed by the trial license terms.
*/
(function(f, define){
    define([], f);
})(function(){

(function( window, undefined ) {
    var kendo = window.kendo || (window.kendo = { cultures: {} });
    kendo.cultures["en-GB"] = {
        name: "en-GB",
        numberFormat: {
            pattern: ["-n"],
            decimals: 2,
            ",": ",",
            ".": ".",
            groupSize: [3],
            percent: {
                pattern: ["-n %","n %"],
                decimals: 2,
                ",": ",",
                ".": ".",
                groupSize: [3],
                symbol: "%"
            },
            currency: {
                pattern: ["-$n","$n"],
                decimals: 2,
                ",": ",",
                ".": ".",
                groupSize: [3],
                symbol: "£"
            }
        },
        calendars: {
            standard: {
                days: {
                    names: ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],
                    namesAbbr: ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],
                    namesShort: ["Su","Mo","Tu","We","Th","Fr","Sa"]
                },
                months: {
                    names: ["January","February","March","April","May","June","July","August","September","October","November","December",""],
                    namesAbbr: ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""]
                },
                AM: ["AM","am","AM"],
                PM: ["PM","pm","PM"],
                patterns: {
                    d: "dd/MM/yyyy",
                    D: "dd MMMM yyyy",
                    F: "dd MMMM yyyy HH:mm:ss",
                    g: "dd/MM/yyyy HH:mm",
                    G: "dd/MM/yyyy HH:mm:ss",
                    m: "dd MMMM",
                    M: "dd MMMM",
                    s: "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
                    t: "HH:mm",
                    T: "HH:mm:ss",
                    u: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
                    y: "MMMM yyyy",
                    Y: "MMMM yyyy"
                },
                "/": "/",
                ":": ":",
                firstDay: 1
            }
        }
    }
})(this);


return window.kendo;

}, typeof define == 'function' && define.amd ? define : function(_, f){ f(); });
